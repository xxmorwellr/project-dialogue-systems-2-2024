"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.asrMachine = void 0;
const xstate_1 = require("xstate");
const getToken_1 = require("./getToken");
const SpeechToText_1 = require("web-speech-cognitive-services/lib/SpeechServices/SpeechToText");
exports.asrMachine = (0, xstate_1.setup)({
    types: {
        context: {},
        events: {},
        input: {},
    },
    actions: {
        recStop: ({ context }) => {
            context.wsaASRinstance.abort();
            console.debug("[ASR] stopped");
        },
    },
    actors: {
        getToken: getToken_1.getToken,
        ponyfill: (0, xstate_1.fromCallback)(({ sendBack, input }) => {
            const { SpeechGrammarList, SpeechRecognition } = (0, SpeechToText_1.default)({
                audioContext: input.audioContext,
                speechRecognitionEndpointId: input.speechRecognitionEndpointId,
                credentials: {
                    region: input.azureRegion,
                    authorizationToken: input.azureAuthorizationToken,
                },
            });
            sendBack({
                type: "READY",
                value: {
                    wsaASR: SpeechRecognition,
                    wsaGrammarList: SpeechGrammarList,
                },
            });
            console.debug("[ASR] READY", input);
        }),
        recStart: (0, xstate_1.fromCallback)(({ sendBack, input }) => {
            let asr = new input.wsaASR();
            asr.grammars = new input.wsaGrammarList();
            asr.grammars.phrases = input.phrases || [];
            asr.lang = input.locale;
            asr.continuous = true;
            asr.interimResults = true;
            asr.onresult = function (event) {
                if (event.results[event.results.length - 1].isFinal) {
                    const transcript = event.results
                        .map((x) => x[0].transcript.replace(/\.$/, ""))
                        .join(" ");
                    const confidence = event.results
                        .map((x) => x[0].confidence)
                        .reduce((a, b) => a + b) / event.results.length;
                    const res = [
                        {
                            utterance: transcript,
                            confidence: confidence,
                        },
                    ];
                    sendBack({
                        type: "RESULT",
                        value: res,
                    });
                    console.debug("[ASR] RESULT (pre-final)", res);
                }
                else {
                    sendBack({ type: "STARTSPEECH" });
                }
            };
            asr.addEventListener("start", () => {
                sendBack({ type: "STARTED", value: { wsaASRinstance: asr } });
            });
            // receive((event) => {
            //   console.debug("bla");
            //   if (event.type === "STOP") {
            //     asr.abort();
            //   }
            // });
            asr.start();
        }),
        nluPromise: (0, xstate_1.fromPromise)(({ input }) => __awaiter(void 0, void 0, void 0, function* () {
            const response = yield fetch(new Request(input.endpoint, {
                method: "POST",
                headers: {
                    "Ocp-Apim-Subscription-Key": input.key,
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    kind: "Conversation",
                    analysisInput: {
                        conversationItem: {
                            id: "PARTICIPANT_ID_HERE",
                            text: input.query,
                            modality: "text",
                            language: "en-US", // TODO
                            participantId: "PARTICIPANT_ID_HERE",
                        },
                    },
                    parameters: {
                        projectName: input.projectName,
                        verbose: true,
                        deploymentName: input.deploymentName,
                        stringIndexType: "TextElement_V8",
                    },
                }),
            }));
            return response.json();
        })),
    },
}).createMachine({
    id: "asr",
    context: ({ input }) => ({
        asrDefaultCompleteTimeout: input.asrDefaultCompleteTimeout || 0,
        asrDefaultNoInputTimeout: input.asrDefaultNoInputTimeout || 5000,
        locale: input.locale || "en-US",
        audioContext: input.audioContext,
        azureCredentials: input.azureCredentials,
        azureRegion: input.azureRegion,
        azureLanguageCredentials: input.azureLanguageCredentials,
        speechRecognitionEndpointId: input.speechRecognitionEndpointId,
    }),
    initial: "GetToken",
    on: {
        READY: {
            target: ".Ready",
            actions: [
                (0, xstate_1.assign)({
                    wsaASR: ({ event }) => event.value.wsaASR,
                    wsaGrammarList: ({ event }) => event.value.wsaGrammarList,
                }),
                (0, xstate_1.sendParent)({ type: "ASR_READY" }),
            ],
        },
    },
    states: {
        Fail: {},
        Ready: {
            on: {
                START: {
                    target: "Recognising",
                    actions: (0, xstate_1.assign)({ params: ({ event }) => event.value || {} }),
                },
            },
        },
        Recognising: {
            initial: "WaitForRecogniser",
            invoke: {
                id: "recStart",
                input: ({ context }) => ({
                    wsaASR: context.wsaASR,
                    wsaGrammarList: context.wsaGrammarList,
                    locale: context.locale,
                    phrases: (context.params || {}).hints || [],
                }),
                src: "recStart",
            },
            exit: "recStop",
            on: {
                RESULT: {
                    actions: [
                        (0, xstate_1.assign)({
                            result: ({ event }) => event.value,
                        }),
                        (0, xstate_1.cancel)("completeTimeout"),
                    ],
                    target: ".Match",
                },
                RECOGNISED: [
                    {
                        target: ".NLURequest",
                        guard: ({ context }) => !!(context.params.nlu && context.azureLanguageCredentials),
                    },
                    {
                        target: "Ready",
                        actions: [
                            (0, xstate_1.sendParent)(({ context }) => ({
                                type: "RECOGNISED",
                                value: context.result,
                            })),
                        ],
                    },
                ],
                CONTROL: {
                    target: "Paused",
                },
                STOP: {
                    target: "Ready",
                },
                NOINPUT: {
                    actions: (0, xstate_1.sendParent)({ type: "ASR_NOINPUT" }),
                    target: "Ready",
                },
            },
            states: {
                WaitForRecogniser: {
                    on: {
                        STARTED: {
                            target: "NoInput",
                            actions: [
                                (0, xstate_1.assign)({
                                    wsaASRinstance: ({ event }) => event.value.wsaASRinstance,
                                }),
                                (0, xstate_1.sendParent)({ type: "ASR_STARTED" }),
                            ],
                        },
                    },
                },
                NoInput: {
                    entry: [
                        (0, xstate_1.raise)({ type: "NOINPUT" }, {
                            delay: ({ context }) => (context.params || {}).noInputTimeout ||
                                context.asrDefaultNoInputTimeout,
                            id: "timeout",
                        }),
                    ],
                    on: {
                        STARTSPEECH: {
                            target: "InProgress",
                            actions: (0, xstate_1.cancel)("completeTimeout"),
                        },
                    },
                    exit: [(0, xstate_1.cancel)("timeout")],
                },
                InProgress: {
                    entry: () => console.debug("[ASR] in progress"),
                },
                Match: {
                    entry: [
                        ({ context }) => console.debug("RECOGNISED will be sent in (ms)", (context.params || {}).completeTimeout ||
                            context.asrDefaultCompleteTimeout),
                        (0, xstate_1.raise)({ type: "RECOGNISED" }, {
                            delay: ({ context }) => (context.params || {}).completeTimeout ||
                                context.asrDefaultCompleteTimeout,
                            id: "completeTimeout",
                        }),
                    ],
                },
                NLURequest: {
                    invoke: {
                        src: "nluPromise",
                        input: ({ context }) => {
                            let c;
                            typeof context.params.nlu === "boolean"
                                ? (c = context.azureLanguageCredentials)
                                : (c = context.params.nlu);
                            return {
                                endpoint: c.endpoint,
                                key: c.key,
                                projectName: c.projectName,
                                deploymentName: c.deploymentName,
                                query: context.result[0].utterance,
                            };
                        },
                        onDone: [
                            {
                                actions: [
                                    ({ event }) => console.error("[ASR] no NLU prediction", event.output),
                                    (0, xstate_1.sendParent)(({ context }) => ({
                                        type: "RECOGNISED",
                                        value: context.result,
                                    })),
                                ],
                                target: "#asr.Ready",
                                guard: ({ event }) => !(event.output.result || {}).prediction,
                            },
                            {
                                actions: [
                                    ({ event }) => console.debug("[ASR] NLU result", event.output.result.prediction),
                                    (0, xstate_1.sendParent)(({ context, event }) => ({
                                        type: "RECOGNISED",
                                        value: context.result,
                                        nluValue: event.output.result.prediction,
                                    })),
                                ],
                                target: "#asr.Ready",
                            },
                        ],
                        onError: {
                            actions: [
                                ({ event }) => console.error("[ASR]", event.error),
                                (0, xstate_1.sendParent)(({ context }) => ({
                                    type: "RECOGNISED",
                                    value: context.result,
                                })),
                            ],
                            target: "#asr.Ready",
                        },
                    },
                },
            },
        },
        Paused: {
            entry: (0, xstate_1.sendParent)({ type: "ASR_PAUSED" }),
            on: {
                CONTROL: {
                    target: "Recognising",
                    //       ///// todo? reset noInputTimeout
                    //       // actions: assign({
                    //       //   params: {
                    //       //     noInputTimeout: ({ context }) =>
                    //       //       context.asrDefaultNoInputTimeout,
                    //       //     completeTimeout: 0,
                    //       //     locale: "0",
                    //       //     hints: [""],
                    //       //   },
                    //       // }),} },
                },
            },
        },
        GetToken: {
            invoke: {
                id: "getAuthorizationToken",
                input: ({ context }) => ({
                    credentials: context.azureCredentials,
                }),
                src: "getToken",
                onDone: {
                    target: "Ponyfill",
                    actions: [
                        (0, xstate_1.assign)(({ event }) => {
                            return { azureAuthorizationToken: event.output };
                        }),
                    ],
                },
                onError: {
                    actions: ({ event }) => console.error("[ASR]", event.error),
                    target: "Fail",
                },
            },
        },
        Ponyfill: {
            invoke: {
                id: "ponyASR",
                src: "ponyfill",
                input: ({ context }) => ({
                    azureRegion: context.azureRegion,
                    audioContext: context.audioContext,
                    azureAuthorizationToken: context.azureAuthorizationToken,
                    locale: context.locale,
                    speechRecognitionEndpointId: context.speechRecognitionEndpointId,
                }),
            },
        },
    },
});
