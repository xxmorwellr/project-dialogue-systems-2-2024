{"version":3,"file":"createSpeechRecognitionPonyfill.js","names":["VERSION","buildSpeechResult","transcript","confidence","isFinal","result","results","type","bingSpeechPromisify","fn","sink","CognitiveSpeech","Sink","then","Resolve","Reject","Promise","err","message","authorizationToken","subscriptionKey","textNormalization","console","warn","window","navigator","mediaDevices","getUserMedia","SpeechRecognition","_lang","document","documentElement","getAttribute","language","readyState","createRecognizer","memoize","mode","RecognitionMode","Interactive","osPlatform","userAgent","osName","appName","osVersion","appVersion","deviceManufacturer","deviceModel","deviceVersion","config","RecognizerConfig","SpeechConfig","Context","OS","Device","SpeechResultFormat","Detailed","fetchToken","fetchAuthorizationToken","CreateRecognizer","CognitiveTokenAuthentication","_grammars","nextGrammars","SpeechGrammarList","Error","nextLang","nextContinuous","nextInterimResults","nextMaxAlternatives","nextServiceURI","recognizer","AudioSource","TurnOff","_aborted","event","emit","subType","lang","toPromise","eventListener","promises","speechContext","grammars","createSpeechContext","Recognize","JSON","stringify","recognitionTriggered","emitCognitiveServices","race","listeningStarted","recognitionEnded","Name","Status","RecognitionCompletionStatus","AudioSourceError","error","connectingToService","recognitionStarted","ConnectError","getSpeechHypothesisPromise","speechEndDetected","speechHypothesis","gotFirstHypothesis","Result","Text","speechDetailedPhrase","recognitionResult","RecognitionStatus","Success","best","NBest","ITN","Lexical","MaskedITN","Display","Confidence","NoMatch","InitialSilenceTimeout","DOMEventEmitter","events","ConnectingToServiceEvent","EventAsPromise","ListeningStartedEvent","RecognitionEndedEvent","RecognitionStartedEvent","RecognitionTriggeredEvent","SpeechDetailedPhraseEvent","SpeechEndDetectedEvent","SpeechHypothesisEvent","SpeechSimplePhraseEvent","SpeechStartDetectedEvent","upcoming","speechSimplePhrase","speechStartDetected","name","eventAsPromise","call"],"sources":["../../../src/BingSpeech/SpeechToText/createSpeechRecognitionPonyfill.js"],"sourcesContent":["import * as CognitiveSpeech from 'microsoft-speech-browser-sdk';\nimport EventAsPromise from 'event-as-promise';\nimport memoize from 'memoize-one';\n\nimport DOMEventEmitter from '../Util/DOMEventEmitter';\nimport fetchAuthorizationToken from '../fetchAuthorizationToken';\nimport SpeechGrammarList from './SpeechGrammarList';\n\nconst { npm_package_version: VERSION } = process.env;\n\nfunction buildSpeechResult(transcript, confidence, isFinal) {\n  const result = [{ confidence, transcript }];\n\n  result.isFinal = isFinal;\n\n  return { results: [result], type: 'result' };\n}\n\nfunction bingSpeechPromisify(fn) {\n  return () => {\n    try {\n      const sink = new CognitiveSpeech.Sink();\n\n      fn().then(sink.Resolve, sink.Reject);\n\n      return new CognitiveSpeech.Promise(sink);\n    } catch (err) {\n      sink.Reject(err.message);\n    }\n  };\n}\n\nexport default ({\n  authorizationToken,\n  subscriptionKey,\n  textNormalization\n}) => {\n  if (!authorizationToken && !subscriptionKey) {\n    console.warn('Either authorization token or subscription key must be specified');\n\n    return {};\n  } else if (!window.navigator.mediaDevices || !window.navigator.mediaDevices.getUserMedia) {\n    console.warn('This browser does not support WebRTC and it will not work with Cognitive Services Speech Services.');\n\n    return {};\n  }\n\n  class SpeechRecognition extends DOMEventEmitter {\n    constructor() {\n      super([\n        'audiostart',\n        'soundstart',\n        'speechstart',\n        'speechend',\n        'soundend',\n        'audioend',\n        'result',\n        'nomatch',\n        'error',\n        'start',\n        'end',\n        'cognitiveservices'\n      ]);\n\n      this._lang = typeof window !== 'undefined' ? (window.document.documentElement.getAttribute('lang') || window.navigator.language) : 'en-US';\n\n      this.readyState = 0;\n\n      this.createRecognizer = memoize((\n        language,\n        mode = CognitiveSpeech.RecognitionMode.Interactive,\n        osPlatform = window.navigator.userAgent,\n        osName = window.navigator.appName,\n        osVersion = window.navigator.appVersion,\n        deviceManufacturer = 'microsoft-speech-browser-sdk',\n        deviceModel = 'web-speech-cognitive-services',\n        deviceVersion = VERSION\n      ) => {\n        const config = new CognitiveSpeech.RecognizerConfig(\n          new CognitiveSpeech.SpeechConfig(\n            new CognitiveSpeech.Context(\n              new CognitiveSpeech.OS(\n                osPlatform,\n                osName,\n                osVersion\n              ),\n              new CognitiveSpeech.Device(\n                deviceManufacturer,\n                deviceModel,\n                deviceVersion\n              )\n            )\n          ),\n          mode,\n          language,\n          CognitiveSpeech.SpeechResultFormat.Detailed\n        );\n\n        let fetchToken;\n\n        if (authorizationToken) {\n          fetchToken = bingSpeechPromisify(async () => typeof authorizationToken === 'function' ? await authorizationToken() : authorizationToken);\n        } else if (subscriptionKey) {\n          fetchToken = bingSpeechPromisify(async () => fetchAuthorizationToken(subscriptionKey));\n        }\n\n        return CognitiveSpeech.CreateRecognizer(config, new CognitiveSpeech.CognitiveTokenAuthentication(fetchToken, fetchToken));\n      });\n    }\n\n    get grammars() { return this._grammars; }\n    set grammars(nextGrammars) {\n      if (nextGrammars && !(nextGrammars instanceof SpeechGrammarList)) {\n        throw new Error('must be instance of SpeechGrammarList from \"web-speech-cognitive-services\"');\n      }\n\n      this._grammars = nextGrammars;\n    }\n\n    get lang() { return this._lang; }\n    set lang(nextLang) { this._lang = nextLang; }\n\n    get continuous() { return false; }\n    set continuous(nextContinuous) { nextContinuous && console.warn(`Bing Speech: Cannot set continuous to ${ nextContinuous }, this feature is not supported.`); }\n\n    get interimResults() { return true; }\n    set interimResults(nextInterimResults) { !nextInterimResults && console.warn(`Bing Speech: Cannot set interimResults to ${ nextInterimResults }, this feature is not supported.`); }\n\n    get maxAlternatives() { return 1; }\n    set maxAlternatives(nextMaxAlternatives) { nextMaxAlternatives !== 1 && console.warn(`Bing Speech: Cannot set maxAlternatives to ${ nextMaxAlternatives }, this feature is not supported.`); }\n\n    get serviceURI() { return null; }\n    set serviceURI(nextServiceURI) { nextServiceURI && console.warn(`Bing Speech: Cannot set serviceURI to ${ nextServiceURI }, this feature is not supported.`); }\n\n    abort() {\n      // TODO: Should redesign how to stop a recognition session\n      //       After abort is called, we should not saw it is a \"success\", \"silent\", or \"no match\"\n      const { AudioSource } = this.recognizer || {};\n\n      AudioSource && AudioSource.TurnOff();\n\n      this._aborted = true;\n    }\n\n    emitCognitiveServices(type, event) {\n      this.emit('cognitiveservices', {\n        ...event,\n        subType: type\n      });\n    }\n\n    stop() {\n      // TODO: Support stop\n\n      const { AudioSource } = this.recognizer || {};\n\n      AudioSource && AudioSource.TurnOff();\n    }\n\n    async start() {\n      const recognizer = this.recognizer = this.createRecognizer(\n        this.lang,\n        this.osPlatform || window.navigator.userAgent,\n        this.osName || window.navigator.appName,\n        this.osVersion || window.navigator.appVersion,\n        this.deviceManufacturer || 'web-speech-cognitive-services',\n        this.deviceModel || 'web-speech-cognitive-services',\n        this.deviceVersion || VERSION\n      );\n\n      const { eventListener, ...promises } = toPromise();\n\n      const speechContext = this.grammars && this.grammars.createSpeechContext();\n\n      recognizer.Recognize(eventListener, speechContext && JSON.stringify(speechContext));\n      this._aborted = false;\n\n      const recognitionTriggered = await promises.recognitionTriggered;\n\n      this.emitCognitiveServices('recognitionTriggered', recognitionTriggered);\n\n      let error;\n\n      const listeningStarted = await Promise.race([\n        promises.listeningStarted,\n        promises.recognitionEnded\n      ]);\n\n      this.emitCognitiveServices(listeningStarted.Name === 'RecognitionEndedEvent' ? 'recognitionEnded' : ' listeningStarted', listeningStarted);\n\n      if (listeningStarted.Name === 'RecognitionEndedEvent') {\n        // Possibly not authorized to use microphone\n        if (listeningStarted.Status === CognitiveSpeech.RecognitionCompletionStatus.AudioSourceError) {\n          error = 'not-allowed';\n        } else {\n          error = CognitiveSpeech.RecognitionCompletionStatus[listeningStarted.Status];\n        }\n      } else {\n        this.emit('start');\n\n        const connectingToService = await promises.connectingToService;\n\n        this.emitCognitiveServices('connectingToService', connectingToService);\n\n        const recognitionStarted = await Promise.race([\n          promises.recognitionStarted,\n          promises.recognitionEnded\n        ]);\n\n        this.emitCognitiveServices(\n          recognitionStarted.Name === 'RecognitionEndedEvent' ? 'recognitionEnded' : 'recognitionStarted',\n          recognitionStarted\n        );\n\n        this.emit('audiostart');\n\n        if (recognitionStarted.Name === 'RecognitionEndedEvent') {\n          // Possibly network error\n          if (recognitionStarted.Status === CognitiveSpeech.RecognitionCompletionStatus.ConnectError) {\n            error = 'network';\n          } else {\n            error = CognitiveSpeech.RecognitionCompletionStatus[recognitionStarted.Status];\n          }\n        } else {\n          let gotFirstHypothesis;\n\n          for (;;) {\n            const speechHypothesis = await Promise.race([\n              promises.getSpeechHypothesisPromise(),\n              promises.speechEndDetected\n            ]);\n\n            this.emitCognitiveServices(\n              speechHypothesis.Name === 'SpeechEndDetectedEvent' ? 'speechEndDetected' : 'speechHypothesis',\n              speechHypothesis\n            );\n\n            if (speechHypothesis.Name === 'SpeechEndDetectedEvent') {\n              break;\n            }\n\n            if (!gotFirstHypothesis) {\n              gotFirstHypothesis = true;\n              this.emit('soundstart');\n              this.emit('speechstart');\n            }\n\n            this.emit('result', buildSpeechResult(speechHypothesis.Result.Text, .5, false));\n          }\n\n          if (gotFirstHypothesis) {\n            this.emit('speechend');\n            this.emit('soundend');\n          }\n        }\n\n        this.emit('audioend');\n\n        if (this._aborted) {\n          error = 'aborted';\n\n          const recognitionEnded = await promises.recognitionEnded;\n\n          this.emitCognitiveServices('recognitionEnded', recognitionEnded);\n        } else {\n          const speechDetailedPhrase = await Promise.race([\n            promises.speechDetailedPhrase,\n            promises.recognitionEnded\n          ]);\n\n          this.emitCognitiveServices(\n            speechDetailedPhrase.Name === 'RecognitionEndedEvent' ? 'recognitionEnded' : 'speechDetailedPhrase',\n            speechDetailedPhrase\n          );\n\n          if (speechDetailedPhrase.Name !== 'RecognitionEndedEvent') {\n            const recognitionResult = CognitiveSpeech.RecognitionStatus[speechDetailedPhrase.Result.RecognitionStatus];\n\n            if (recognitionResult === CognitiveSpeech.RecognitionStatus.Success) {\n              // TODO: [P2] Support maxAlternatives\n              const best = speechDetailedPhrase.Result.NBest[0];\n\n              this.emit(\n                'result',\n                buildSpeechResult(\n                  textNormalization === 'itn' ?\n                    best.ITN\n                  : textNormalization === 'lexical' ?\n                    best.Lexical\n                  : textNormalization === 'maskeditn' ?\n                    best.MaskedITN\n                  :\n                    best.Display,\n                  best.Confidence,\n                  true\n                )\n              );\n            } else if (recognitionResult !== CognitiveSpeech.RecognitionStatus.NoMatch) {\n              // Possibly silent or muted\n              if (recognitionResult === CognitiveSpeech.RecognitionStatus.InitialSilenceTimeout) {\n                error = 'no-speech';\n              } else {\n                error = speechDetailedPhrase.Result.RecognitionStatus;\n              }\n            }\n\n            const recognitionEnded = await promises.recognitionEnded;\n\n            this.emitCognitiveServices('recognitionEnded', recognitionEnded);\n          }\n        }\n      }\n\n      error && this.emit('error', { error });\n      this.emit('end');\n    }\n  }\n\n  return {\n    SpeechGrammarList,\n    SpeechRecognition\n  };\n}\n\nfunction toPromise() {\n  const events = {\n    ConnectingToServiceEvent: new EventAsPromise(),\n    ListeningStartedEvent: new EventAsPromise(),\n    RecognitionEndedEvent: new EventAsPromise(),\n    RecognitionStartedEvent: new EventAsPromise(),\n    RecognitionTriggeredEvent: new EventAsPromise(),\n    SpeechDetailedPhraseEvent: new EventAsPromise(),\n    SpeechEndDetectedEvent: new EventAsPromise(),\n    SpeechHypothesisEvent: new EventAsPromise(),\n    SpeechSimplePhraseEvent: new EventAsPromise(),\n    SpeechStartDetectedEvent: new EventAsPromise()\n  };\n\n  return {\n    connectingToService: events.ConnectingToServiceEvent.upcoming(),\n    listeningStarted: events.ListeningStartedEvent.upcoming(),\n    recognitionEnded: events.RecognitionEndedEvent.upcoming(),\n    recognitionStarted: events.RecognitionStartedEvent.upcoming(),\n    recognitionTriggered: events.RecognitionTriggeredEvent.upcoming(),\n    speechDetailedPhrase: events.SpeechDetailedPhraseEvent.upcoming(),\n    speechEndDetected: events.SpeechEndDetectedEvent.upcoming(),\n    getSpeechHypothesisPromise: () => events.SpeechHypothesisEvent.upcoming(),\n    speechSimplePhrase: events.SpeechSimplePhraseEvent.upcoming(),\n    speechStartDetected: events.SpeechStartDetectedEvent.upcoming(),\n    eventListener: event => {\n      const { Name: name } = event;\n      const eventAsPromise = events[name];\n\n      if (eventAsPromise) {\n        eventAsPromise.eventListener.call(null, event);\n      } else {\n        console.warn(`Unexpected event \\\"${ name }\\\" from Cognitive Services, please file a bug to https://github.com/compulim/web-speech-cognitive-services`);\n      }\n    }\n  };\n}\n"],"mappings":"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"}