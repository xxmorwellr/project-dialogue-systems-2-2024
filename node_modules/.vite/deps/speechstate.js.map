{
  "version": 3,
  "sources": ["../../speechstate/dist/getToken.js", "../../@babel/runtime/helpers/interopRequireDefault.js", "../../@babel/runtime/helpers/typeof.js", "../../@babel/runtime/helpers/regeneratorRuntime.js", "../../@babel/runtime/regenerator/index.js", "../../@babel/runtime/helpers/asyncToGenerator.js", "../../@babel/runtime/helpers/classCallCheck.js", "../../@babel/runtime/helpers/createClass.js", "../../@babel/runtime/helpers/setPrototypeOf.js", "../../@babel/runtime/helpers/inherits.js", "../../@babel/runtime/helpers/assertThisInitialized.js", "../../@babel/runtime/helpers/possibleConstructorReturn.js", "../../@babel/runtime/helpers/getPrototypeOf.js", "../../@babel/runtime/helpers/arrayLikeToArray.js", "../../@babel/runtime/helpers/arrayWithoutHoles.js", "../../@babel/runtime/helpers/iterableToArray.js", "../../@babel/runtime/helpers/unsupportedIterableToArray.js", "../../@babel/runtime/helpers/nonIterableSpread.js", "../../@babel/runtime/helpers/toConsumableArray.js", "../../@babel/runtime/helpers/superPropBase.js", "../../@babel/runtime/helpers/defineProperty.js", "../../@babel/runtime/helpers/set.js", "../../@babel/runtime/helpers/get.js", "../../@babel/runtime/helpers/isNativeFunction.js", "../../@babel/runtime/helpers/isNativeReflectConstruct.js", "../../@babel/runtime/helpers/construct.js", "../../@babel/runtime/helpers/wrapNativeSuper.js", "../../event-target-shim/es5.js", "../../@babel/runtime-corejs3/helpers/interopRequireDefault.js", "../../core-js-pure/internals/global-this.js", "../../core-js-pure/internals/fails.js", "../../core-js-pure/internals/function-bind-native.js", "../../core-js-pure/internals/function-apply.js", "../../core-js-pure/internals/function-uncurry-this.js", "../../core-js-pure/internals/classof-raw.js", "../../core-js-pure/internals/function-uncurry-this-clause.js", "../../core-js-pure/internals/is-callable.js", "../../core-js-pure/internals/descriptors.js", "../../core-js-pure/internals/function-call.js", "../../core-js-pure/internals/object-property-is-enumerable.js", "../../core-js-pure/internals/create-property-descriptor.js", "../../core-js-pure/internals/indexed-object.js", "../../core-js-pure/internals/is-null-or-undefined.js", "../../core-js-pure/internals/require-object-coercible.js", "../../core-js-pure/internals/to-indexed-object.js", "../../core-js-pure/internals/is-object.js", "../../core-js-pure/internals/path.js", "../../core-js-pure/internals/get-built-in.js", "../../core-js-pure/internals/object-is-prototype-of.js", "../../core-js-pure/internals/environment-user-agent.js", "../../core-js-pure/internals/environment-v8-version.js", "../../core-js-pure/internals/symbol-constructor-detection.js", "../../core-js-pure/internals/use-symbol-as-uid.js", "../../core-js-pure/internals/is-symbol.js", "../../core-js-pure/internals/try-to-string.js", "../../core-js-pure/internals/a-callable.js", "../../core-js-pure/internals/get-method.js", "../../core-js-pure/internals/ordinary-to-primitive.js", "../../core-js-pure/internals/is-pure.js", "../../core-js-pure/internals/define-global-property.js", "../../core-js-pure/internals/shared-store.js", "../../core-js-pure/internals/shared.js", "../../core-js-pure/internals/to-object.js", "../../core-js-pure/internals/has-own-property.js", "../../core-js-pure/internals/uid.js", "../../core-js-pure/internals/well-known-symbol.js", "../../core-js-pure/internals/to-primitive.js", "../../core-js-pure/internals/to-property-key.js", "../../core-js-pure/internals/document-create-element.js", "../../core-js-pure/internals/ie8-dom-define.js", "../../core-js-pure/internals/object-get-own-property-descriptor.js", "../../core-js-pure/internals/is-forced.js", "../../core-js-pure/internals/function-bind-context.js", "../../core-js-pure/internals/v8-prototype-define-bug.js", "../../core-js-pure/internals/an-object.js", "../../core-js-pure/internals/object-define-property.js", "../../core-js-pure/internals/create-non-enumerable-property.js", "../../core-js-pure/internals/export.js", "../../core-js-pure/internals/shared-key.js", "../../core-js-pure/internals/correct-prototype-getter.js", "../../core-js-pure/internals/object-get-prototype-of.js", "../../core-js-pure/internals/function-uncurry-this-accessor.js", "../../core-js-pure/internals/is-possible-prototype.js", "../../core-js-pure/internals/a-possible-prototype.js", "../../core-js-pure/internals/object-set-prototype-of.js", "../../core-js-pure/internals/math-trunc.js", "../../core-js-pure/internals/to-integer-or-infinity.js", "../../core-js-pure/internals/to-absolute-index.js", "../../core-js-pure/internals/to-length.js", "../../core-js-pure/internals/length-of-array-like.js", "../../core-js-pure/internals/array-includes.js", "../../core-js-pure/internals/hidden-keys.js", "../../core-js-pure/internals/object-keys-internal.js", "../../core-js-pure/internals/enum-bug-keys.js", "../../core-js-pure/internals/object-get-own-property-names.js", "../../core-js-pure/internals/object-get-own-property-symbols.js", "../../core-js-pure/internals/own-keys.js", "../../core-js-pure/internals/copy-constructor-properties.js", "../../core-js-pure/internals/object-keys.js", "../../core-js-pure/internals/object-define-properties.js", "../../core-js-pure/internals/html.js", "../../core-js-pure/internals/object-create.js", "../../core-js-pure/internals/install-error-cause.js", "../../core-js-pure/internals/error-stack-clear.js", "../../core-js-pure/internals/error-stack-installable.js", "../../core-js-pure/internals/error-stack-install.js", "../../core-js-pure/internals/iterators.js", "../../core-js-pure/internals/is-array-iterator-method.js", "../../core-js-pure/internals/to-string-tag-support.js", "../../core-js-pure/internals/classof.js", "../../core-js-pure/internals/get-iterator-method.js", "../../core-js-pure/internals/get-iterator.js", "../../core-js-pure/internals/iterator-close.js", "../../core-js-pure/internals/iterate.js", "../../core-js-pure/internals/to-string.js", "../../core-js-pure/internals/normalize-string-argument.js", "../../core-js-pure/modules/es.aggregate-error.constructor.js", "../../core-js-pure/modules/es.aggregate-error.js", "../../core-js-pure/internals/add-to-unscopables.js", "../../core-js-pure/internals/weak-map-basic-detection.js", "../../core-js-pure/internals/internal-state.js", "../../core-js-pure/internals/function-name.js", "../../core-js-pure/internals/define-built-in.js", "../../core-js-pure/internals/iterators-core.js", "../../core-js-pure/internals/object-to-string.js", "../../core-js-pure/internals/set-to-string-tag.js", "../../core-js-pure/internals/iterator-create-constructor.js", "../../core-js-pure/internals/iterator-define.js", "../../core-js-pure/internals/create-iter-result-object.js", "../../core-js-pure/modules/es.array.iterator.js", "../../core-js-pure/modules/es.object.to-string.js", "../../core-js-pure/internals/environment.js", "../../core-js-pure/internals/environment-is-node.js", "../../core-js-pure/internals/define-built-in-accessor.js", "../../core-js-pure/internals/set-species.js", "../../core-js-pure/internals/an-instance.js", "../../core-js-pure/internals/inspect-source.js", "../../core-js-pure/internals/is-constructor.js", "../../core-js-pure/internals/a-constructor.js", "../../core-js-pure/internals/species-constructor.js", "../../core-js-pure/internals/array-slice.js", "../../core-js-pure/internals/validate-arguments-length.js", "../../core-js-pure/internals/environment-is-ios.js", "../../core-js-pure/internals/task.js", "../../core-js-pure/internals/safe-get-built-in.js", "../../core-js-pure/internals/queue.js", "../../core-js-pure/internals/environment-is-ios-pebble.js", "../../core-js-pure/internals/environment-is-webos-webkit.js", "../../core-js-pure/internals/microtask.js", "../../core-js-pure/internals/host-report-errors.js", "../../core-js-pure/internals/perform.js", "../../core-js-pure/internals/promise-native-constructor.js", "../../core-js-pure/internals/promise-constructor-detection.js", "../../core-js-pure/internals/new-promise-capability.js", "../../core-js-pure/modules/es.promise.constructor.js", "../../core-js-pure/internals/check-correctness-of-iteration.js", "../../core-js-pure/internals/promise-statics-incorrect-iteration.js", "../../core-js-pure/modules/es.promise.all.js", "../../core-js-pure/modules/es.promise.catch.js", "../../core-js-pure/modules/es.promise.race.js", "../../core-js-pure/modules/es.promise.reject.js", "../../core-js-pure/internals/promise-resolve.js", "../../core-js-pure/modules/es.promise.resolve.js", "../../core-js-pure/modules/es.promise.js", "../../core-js-pure/modules/es.promise.all-settled.js", "../../core-js-pure/modules/es.promise.any.js", "../../core-js-pure/modules/es.promise.with-resolvers.js", "../../core-js-pure/modules/es.promise.finally.js", "../../core-js-pure/internals/string-multibyte.js", "../../core-js-pure/modules/es.string.iterator.js", "../../core-js-pure/es/promise/index.js", "../../core-js-pure/internals/dom-iterables.js", "../../core-js-pure/modules/web.dom-collections.iterator.js", "../../core-js-pure/stable/promise/index.js", "../../@babel/runtime-corejs3/core-js-stable/promise.js", "../../p-defer-es5/lib/index.js", "../../on-error-resume-next/lib/index.js", "../../memoize-one/dist/memoize-one.esm.js", "../../web-speech-cognitive-services/src/SpeechServices/TextToSpeech/AudioContextConsumer.js", "../../web-speech-cognitive-services/src/SpeechServices/TextToSpeech/AudioContextQueue.js", "../../web-speech-cognitive-services/src/SpeechServices/TextToSpeech/SpeechSynthesisVoice.js", "../../web-speech-cognitive-services/src/SpeechServices/TextToSpeech/fetchCustomVoices.js", "../../web-speech-cognitive-services/src/SpeechServices/TextToSpeech/fetchVoices.js", "../../@babel/runtime/helpers/objectWithoutPropertiesLoose.js", "../../@babel/runtime/helpers/objectWithoutProperties.js", "../../web-speech-cognitive-services/src/SpeechServices/resolveFunctionOrReturnValue.js", "../../web-speech-cognitive-services/src/SpeechServices/patchOptions.js", "../../web-speech-cognitive-services/src/SpeechServices/TextToSpeech/SpeechSynthesisEvent.js", "../../event-as-promise/src/external/p-defer.js", "../../event-as-promise/src/index.js", "../../src/index.ts", "../../web-speech-cognitive-services/src/SpeechServices/TextToSpeech/buildSSML.js", "../../web-speech-cognitive-services/src/SpeechServices/TextToSpeech/isSSML.js", "../../web-speech-cognitive-services/src/SpeechServices/TextToSpeech/fetchSpeechData.js", "../../web-speech-cognitive-services/src/SpeechServices/TextToSpeech/subscribeEvent.js", "../../web-speech-cognitive-services/src/SpeechServices/TextToSpeech/SpeechSynthesisUtterance.js", "../../web-speech-cognitive-services/src/SpeechServices/TextToSpeech/createSpeechSynthesisPonyfill.js", "../../web-speech-cognitive-services/src/SpeechServices/TextToSpeech.js", "../../speechstate/dist/tts.js", "../../web-speech-cognitive-services/src/Util/arrayToMap.js", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Guid.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/PlatformEvent.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/AudioSourceEvents.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/ConnectionEvents.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Error.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/ConnectionMessage.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/ConnectionOpenResponse.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/DeferralMap.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/DialogEvents.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/EventSource.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Events.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/IConnection.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/IErrorMessages.js", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/List.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Promise.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Queue.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/RawWebsocketMessage.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/RiffPcmEncoder.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Stream.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranslationStatus.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/ChunkedArrayBufferStream.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Timeout.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/OCSPEvents.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/BackgroundError.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/Exports.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/HeaderNames.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/IAuthentication.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/CognitiveSubscriptionKeyAuthentication.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/CognitiveTokenAuthentication.ts", "browser-external:fs", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/LogLevel.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Contracts.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/ConsoleLoggingListener.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioStreamFormat.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/MicAudioSource.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/FileAudioSource.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/PCMRecorder.ts", "browser-external:net", "browser-external:tls", "browser-external:agent-base", "browser-external:https-proxy-agent", "browser-external:ws", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/WebsocketMessageAdapter.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/WebsocketConnection.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/ReplayableAudioNode.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioFileWriter.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioInputStream.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisOutputFormat.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioOutputFormat.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioOutputStream.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/AudioConfig.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationReason.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/PullAudioInputStreamCallback.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/PushAudioOutputStreamCallback.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/KeywordRecognitionModel.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SessionEventArgs.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/RecognitionEventArgs.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/OutputFormat.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/IntentRecognitionEventArgs.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/RecognitionResult.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechRecognitionResult.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/IntentRecognitionResult.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/LanguageUnderstandingModel.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechRecognitionEventArgs.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationEventArgsBase.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechRecognitionCanceledEventArgs.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationRecognitionEventArgs.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationSynthesisEventArgs.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationRecognitionResult.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationSynthesisResult.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ResultReason.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechConfig.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechTranslationConfig.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PropertyCollection.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PropertyId.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Recognizer.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechRecognizer.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/IntentRecognizer.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfileType.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ConnectionMessage.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Connection.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationRecognizer.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Translations.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/NoMatchReason.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/NoMatchDetails.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TranslationRecognitionCanceledEventArgs.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/IntentRecognitionCanceledEventArgs.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationDetailsBase.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationDetails.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CancellationErrorCodes.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ConnectionEventArgs.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ServiceEventArgs.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PhraseListGrammar.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/DialogServiceConfig.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/BotFrameworkConfig.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/CustomCommandsConfig.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/QueryParameterNames.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ConnectionFactoryBase.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DialogConnectorFactory.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/DialogServiceConnector.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ActivityReceivedEventArgs.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/TurnStatusPayload.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/TurnStatusReceivedEventArgs.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ServicePropertyChannel.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ProfanityOption.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/BaseAudioPlayer.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ConnectionMessageEventArgs.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfile.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfileEnrollmentResult.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfileResult.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfilePhraseResult.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceProfileClient.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeakerRecognizer.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeakerIdentificationModel.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeakerVerificationModel.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/LanguageIdMode.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AutoDetectSourceLanguageConfig.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AutoDetectSourceLanguageResult.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SourceLanguageConfig.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeakerRecognitionResult.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/Conversation.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationCommon.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationExpirationEventArgs.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationParticipantsChangedEventArgs.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranslationCanceledEventArgs.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranslationEventArgs.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranslationResult.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common/src/common/StringUtils.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationTranslatorConnectionFactory.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranslator.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranscriber.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/IParticipant.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ParticipantChangedReason.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/Meeting.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/MeetingTranscriptionCanceledEventArgs.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/MeetingTranscriber.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/ConversationTranscriptionResult.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Transcription/src/sdk/Transcription/Exports.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Synthesizer.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesizer.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SynthesisResult.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisResult.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisEventArgs.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisWordBoundaryEventArgs.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisBookmarkEventArgs.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisVisemeEventArgs.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SpeechSynthesisBoundaryType.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/SynthesisVoicesResult.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/VoiceInfo.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/Audio/src/sdk/Audio/SpeakerAudioDestination.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/ConversationTranscriptionCanceledEventArgs.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/MeetingTranscriptionCanceledEventArgs.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PronunciationAssessmentGradingSystem.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PronunciationAssessmentGranularity.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PronunciationAssessmentConfig.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/PronunciationAssessmentResult.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AvatarConfig.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AvatarEventArgs.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechSynthesisConnectionFactory.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AvatarSynthesizer.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AvatarVideoFormat.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/AvatarWebRTCConnectionResult.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Diagnostics.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/sdk/src/sdk/Exports.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/ProxyInfo.ts", "../../bent/src/core.js", "../../bent/src/browser.js", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/RestMessageAdapter.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/RestConfigBase.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.browser/src/common.browser/Exports.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/IntentConnectionFactory.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeakerRecognitionConnectionFactory.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/RecognitionEvents.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechConnectionMessage.Internal.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ServiceRecognizerBase.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ConversationServiceRecognizer.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/RecognizerConfig.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/WebsocketMessageFormatter.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechConnectionFactory.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ConversationTranscriberConnectionFactory.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranscriberConnectionFactory.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranslationConnectionFactory.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/EnumTranslation.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/Enums.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/TranslationSynthesisEnd.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/TranslationHypothesis.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/TranslationPhrase.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranslationServiceRecognizer.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SpeechDetected.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SpeechHypothesis.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SpeechKeyword.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechServiceRecognizer.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ConversationTranscriptionServiceRecognizer.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/TranscriptionServiceRecognizer.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/DetailedSpeechPhrase.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SimpleSpeechPhrase.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/AddedLmIntent.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/IntentServiceRecognizer.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/IntentResponse.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/ServiceTelemetryListener.Internal.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/RequestSession.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechContext.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DynamicGrammarBuilder.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/ActivityResponsePayload.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DialogServiceTurnState.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DialogServiceTurnStateManager.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/DialogServiceAdapter.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/AgentConfig.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationConnectionConfig.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationManager.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationConnectionMessage.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationWebsocketMessageFormatter.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationConnectionFactory.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationRequestSession.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationTranslatorEventArgs.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationTranslatorInterfaces.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ServiceMessages/src/common.speech/Transcription/ServiceMessages/CommandResponsePayload.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ServiceMessages/src/common.speech/Transcription/ServiceMessages/ParticipantResponsePayload.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ServiceMessages/src/common.speech/Transcription/ServiceMessages/TranslationResponsePayload.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/ServiceMessages/src/common.speech/Transcription/ServiceMessages/Exports.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationServiceAdapter.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/ConversationTranslatorRecognizer.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/TranscriberRecognizer.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/Transcription/src/common.speech/Transcription/Exports.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/ServiceMessages/src/common.speech/ServiceMessages/SynthesisAudioMetadata.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisEvents.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisTurn.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisAdapterBase.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/AvatarSynthesisAdapter.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechSynthesisAdapter.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisRestAdapter.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesizerConfig.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SynthesisContext.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeakerRecognitionConfig.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeakerServiceRecognizer.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/VoiceServiceRecognizer.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/SpeechServiceConfig.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/src/common.speech/Exports.ts", "../../microsoft-cognitiveservices-speech-sdk/distrib/lib/microsoft.cognitiveservices.speech.sdk.ts", "../../web-speech-cognitive-services/src/SpeechServices/SpeechSDK.js", "../../web-speech-cognitive-services/src/SpeechServices/SpeechToText/cognitiveServiceEventResultToWebSpeechRecognitionResultList.js", "../../web-speech-cognitive-services/src/Util/createPromiseQueue.js", "../../web-speech-cognitive-services/src/SpeechServices/SpeechToText/SpeechGrammarList.js", "../../web-speech-cognitive-services/src/SpeechServices/SpeechToText/createSpeechRecognitionPonyfill.js", "../../web-speech-cognitive-services/src/SpeechServices/SpeechToText.js", "../../speechstate/dist/asr.js", "../../speechstate/dist/speechstate.js", "../../speechstate/dist/index.js"],
  "sourcesContent": ["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getToken = void 0;\nconst xstate_1 = require(\"xstate\");\nexports.getToken = (0, xstate_1.fromPromise)(({ input }) => __awaiter(void 0, void 0, void 0, function* () {\n    if (typeof input.credentials === \"string\") {\n        return fetch(new Request(input.credentials)).then((data) => data.text());\n    }\n    else {\n        return fetch(new Request(input.credentials.endpoint, {\n            method: \"POST\",\n            headers: {\n                \"Ocp-Apim-Subscription-Key\": input.credentials.key,\n            },\n        })).then((data) => data.text());\n    }\n}));\n", "function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return (module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _typeof(obj);\n}\n\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "var _typeof = require(\"./typeof.js\")[\"default\"];\n\nfunction _regeneratorRuntime() {\n  \"use strict\";\n  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n\n  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {\n    return exports;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  var exports = {},\n      Op = Object.prototype,\n      hasOwn = Op.hasOwnProperty,\n      $Symbol = \"function\" == typeof Symbol ? Symbol : {},\n      iteratorSymbol = $Symbol.iterator || \"@@iterator\",\n      asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\",\n      toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    return Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), obj[key];\n  }\n\n  try {\n    define({}, \"\");\n  } catch (err) {\n    define = function define(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,\n        generator = Object.create(protoGenerator.prototype),\n        context = new Context(tryLocsList || []);\n    return generator._invoke = function (innerFn, self, context) {\n      var state = \"suspendedStart\";\n      return function (method, arg) {\n        if (\"executing\" === state) throw new Error(\"Generator is already running\");\n\n        if (\"completed\" === state) {\n          if (\"throw\" === method) throw arg;\n          return doneResult();\n        }\n\n        for (context.method = method, context.arg = arg;;) {\n          var delegate = context.delegate;\n\n          if (delegate) {\n            var delegateResult = maybeInvokeDelegate(delegate, context);\n\n            if (delegateResult) {\n              if (delegateResult === ContinueSentinel) continue;\n              return delegateResult;\n            }\n          }\n\n          if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) {\n            if (\"suspendedStart\" === state) throw state = \"completed\", context.arg;\n            context.dispatchException(context.arg);\n          } else \"return\" === context.method && context.abrupt(\"return\", context.arg);\n          state = \"executing\";\n          var record = tryCatch(innerFn, self, context);\n\n          if (\"normal\" === record.type) {\n            if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue;\n            return {\n              value: record.arg,\n              done: context.done\n            };\n          }\n\n          \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg);\n        }\n      };\n    }(innerFn, self, context), generator;\n  }\n\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n\n  exports.wrap = wrap;\n  var ContinueSentinel = {};\n\n  function Generator() {}\n\n  function GeneratorFunction() {}\n\n  function GeneratorFunctionPrototype() {}\n\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n  var getProto = Object.getPrototypeOf,\n      NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      define(prototype, method, function (arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n\n      if (\"throw\" !== record.type) {\n        var result = record.arg,\n            value = result.value;\n        return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) {\n          invoke(\"next\", value, resolve, reject);\n        }, function (err) {\n          invoke(\"throw\", err, resolve, reject);\n        }) : PromiseImpl.resolve(value).then(function (unwrapped) {\n          result.value = unwrapped, resolve(result);\n        }, function (error) {\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n\n      reject(record.arg);\n    }\n\n    var previousPromise;\n\n    this._invoke = function (method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function (resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n    };\n  }\n\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n\n    if (undefined === method) {\n      if (context.delegate = null, \"throw\" === context.method) {\n        if (delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel;\n        context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n    if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel;\n    var info = record.arg;\n    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel);\n  }\n\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\", delete record.arg, entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);\n  }\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) return iteratorMethod.call(iterable);\n      if (\"function\" == typeof iterable.next) return iterable;\n\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n            next = function next() {\n          for (; ++i < iterable.length;) {\n            if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;\n          }\n\n          return next.value = undefined, next.done = !0, next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    return {\n      next: doneResult\n    };\n  }\n\n  function doneResult() {\n    return {\n      value: undefined,\n      done: !0\n    };\n  }\n\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) {\n    var ctor = \"function\" == typeof genFun && genFun.constructor;\n    return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name));\n  }, exports.mark = function (genFun) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun;\n  }, exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    void 0 === PromiseImpl && (PromiseImpl = Promise);\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () {\n    return this;\n  }), define(Gp, \"toString\", function () {\n    return \"[object Generator]\";\n  }), exports.keys = function (object) {\n    var keys = [];\n\n    for (var key in object) {\n      keys.push(key);\n    }\n\n    return keys.reverse(), function next() {\n      for (; keys.length;) {\n        var key = keys.pop();\n        if (key in object) return next.value = key, next.done = !1, next;\n      }\n\n      return next.done = !0, next;\n    };\n  }, exports.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function reset(skipTempReset) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {\n        \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);\n      }\n    },\n    stop: function stop() {\n      this.done = !0;\n      var rootRecord = this.tryEntries[0].completion;\n      if (\"throw\" === rootRecord.type) throw rootRecord.arg;\n      return this.rval;\n    },\n    dispatchException: function dispatchException(exception) {\n      if (this.done) throw exception;\n      var context = this;\n\n      function handle(loc, caught) {\n        return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i],\n            record = entry.completion;\n        if (\"root\" === entry.tryLoc) return handle(\"end\");\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\"),\n              hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n          } else {\n            if (!hasFinally) throw new Error(\"try statement without catch or finally\");\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);\n      var record = finallyEntry ? finallyEntry.completion : {};\n      return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);\n    },\n    complete: function complete(record, afterLoc) {\n      if (\"throw\" === record.type) throw record.arg;\n      return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;\n    },\n    finish: function finish(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;\n      }\n    },\n    \"catch\": function _catch(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n\n          if (\"throw\" === record.type) {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n\n          return thrown;\n        }\n      }\n\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n      return this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel;\n    }\n  }, exports;\n}\n\nmodule.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "// TODO(Babel 8): Remove this file.\n\nvar runtime = require(\"../helpers/regeneratorRuntime\")();\nmodule.exports = runtime;\n\n// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n", "function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "var setPrototypeOf = require(\"./setPrototypeOf.js\");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "var _typeof = require(\"./typeof.js\")[\"default\"];\n\nvar assertThisInitialized = require(\"./assertThisInitialized.js\");\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "var arrayWithoutHoles = require(\"./arrayWithoutHoles.js\");\n\nvar iterableToArray = require(\"./iterableToArray.js\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread.js\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "var getPrototypeOf = require(\"./getPrototypeOf.js\");\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nmodule.exports = _superPropBase, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "var superPropBase = require(\"./superPropBase.js\");\n\nvar defineProperty = require(\"./defineProperty.js\");\n\nfunction set(target, property, value, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.set) {\n    set = Reflect.set;\n  } else {\n    set = function set(target, property, value, receiver) {\n      var base = superPropBase(target, property);\n      var desc;\n\n      if (base) {\n        desc = Object.getOwnPropertyDescriptor(base, property);\n\n        if (desc.set) {\n          desc.set.call(receiver, value);\n          return true;\n        } else if (!desc.writable) {\n          return false;\n        }\n      }\n\n      desc = Object.getOwnPropertyDescriptor(receiver, property);\n\n      if (desc) {\n        if (!desc.writable) {\n          return false;\n        }\n\n        desc.value = value;\n        Object.defineProperty(receiver, property, desc);\n      } else {\n        defineProperty(receiver, property, value);\n      }\n\n      return true;\n    };\n  }\n\n  return set(target, property, value, receiver);\n}\n\nfunction _set(target, property, value, receiver, isStrict) {\n  var s = set(target, property, value, receiver || target);\n\n  if (!s && isStrict) {\n    throw new Error('failed to set property');\n  }\n\n  return value;\n}\n\nmodule.exports = _set, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "var superPropBase = require(\"./superPropBase.js\");\n\nfunction _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    module.exports = _get = Reflect.get.bind(), module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  } else {\n    module.exports = _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n\n      return desc.value;\n    }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  }\n\n  return _get.apply(this, arguments);\n}\n\nmodule.exports = _get, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nmodule.exports = _isNativeFunction, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nmodule.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "var setPrototypeOf = require(\"./setPrototypeOf.js\");\n\nvar isNativeReflectConstruct = require(\"./isNativeReflectConstruct.js\");\n\nfunction _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    module.exports = _construct = Reflect.construct.bind(), module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  } else {\n    module.exports = _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nmodule.exports = _construct, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "var getPrototypeOf = require(\"./getPrototypeOf.js\");\n\nvar setPrototypeOf = require(\"./setPrototypeOf.js\");\n\nvar isNativeFunction = require(\"./isNativeFunction.js\");\n\nvar construct = require(\"./construct.js\");\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _wrapNativeSuper(Class);\n}\n\nmodule.exports = _wrapNativeSuper, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');\nvar _set = require('@babel/runtime/helpers/set');\nvar _get = require('@babel/runtime/helpers/get');\nvar _assertThisInitialized = require('@babel/runtime/helpers/assertThisInitialized');\nvar _inherits = require('@babel/runtime/helpers/inherits');\nvar _possibleConstructorReturn = require('@babel/runtime/helpers/possibleConstructorReturn');\nvar _getPrototypeOf = require('@babel/runtime/helpers/getPrototypeOf');\nvar _wrapNativeSuper = require('@babel/runtime/helpers/wrapNativeSuper');\nvar _defineProperty = require('@babel/runtime/helpers/defineProperty');\nvar _classCallCheck = require('@babel/runtime/helpers/classCallCheck');\nvar _createClass = require('@babel/runtime/helpers/createClass');\nvar _typeof = require('@babel/runtime/helpers/typeof');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);\nvar _set__default = /*#__PURE__*/_interopDefaultLegacy(_set);\nvar _get__default = /*#__PURE__*/_interopDefaultLegacy(_get);\nvar _assertThisInitialized__default = /*#__PURE__*/_interopDefaultLegacy(_assertThisInitialized);\nvar _inherits__default = /*#__PURE__*/_interopDefaultLegacy(_inherits);\nvar _possibleConstructorReturn__default = /*#__PURE__*/_interopDefaultLegacy(_possibleConstructorReturn);\nvar _getPrototypeOf__default = /*#__PURE__*/_interopDefaultLegacy(_getPrototypeOf);\nvar _wrapNativeSuper__default = /*#__PURE__*/_interopDefaultLegacy(_wrapNativeSuper);\nvar _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);\nvar _classCallCheck__default = /*#__PURE__*/_interopDefaultLegacy(_classCallCheck);\nvar _createClass__default = /*#__PURE__*/_interopDefaultLegacy(_createClass);\nvar _typeof__default = /*#__PURE__*/_interopDefaultLegacy(_typeof);\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf__default['default'](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default['default'](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default['default'](this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n * Assert a condition.\n * @param condition The condition that it should satisfy.\n * @param message The error message.\n * @param args The arguments for replacing placeholders in the message.\n */\nfunction assertType(condition, message) {\n  if (!condition) {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    throw new TypeError(format(message, args));\n  }\n}\n/**\n * Convert a text and arguments to one string.\n * @param message The formating text\n * @param args The arguments.\n */\n\n\nfunction format(message, args) {\n  var i = 0;\n  return message.replace(/%[os]/g, function () {\n    return anyToString(args[i++]);\n  });\n}\n/**\n * Convert a value to a string representation.\n * @param x The value to get the string representation.\n */\n\n\nfunction anyToString(x) {\n  if (_typeof__default['default'](x) !== \"object\" || x === null) {\n    return String(x);\n  }\n\n  return Object.prototype.toString.call(x);\n}\n\nvar currentErrorHandler;\n/**\n * Set the error handler.\n * @param value The error handler to set.\n */\n\nfunction setErrorHandler(value) {\n  assertType(typeof value === \"function\" || value === undefined, \"The error handler must be a function or undefined, but got %o.\", value);\n  currentErrorHandler = value;\n}\n/**\n * Print a error message.\n * @param maybeError The error object.\n */\n\n\nfunction reportError(maybeError) {\n  try {\n    var error = maybeError instanceof Error ? maybeError : new Error(anyToString(maybeError)); // Call the user-defined error handler if exists.\n\n    if (currentErrorHandler) {\n      currentErrorHandler(error);\n      return;\n    } // Dispatch an `error` event if this is on a browser.\n\n\n    if (typeof dispatchEvent === \"function\" && typeof ErrorEvent === \"function\") {\n      dispatchEvent(new ErrorEvent(\"error\", {\n        error: error,\n        message: error.message\n      }));\n    } // Emit an `uncaughtException` event if this is on Node.js.\n    //istanbul ignore else\n    else if (typeof process !== \"undefined\" && typeof process.emit === \"function\") {\n        process.emit(\"uncaughtException\", error);\n        return;\n      } // Otherwise, print the error.\n\n\n    console.error(error);\n  } catch (_a) {// ignore.\n  }\n}\n/**\n * The global object.\n */\n//istanbul ignore next\n\n\nvar Global = typeof window !== \"undefined\" ? window : typeof self !== \"undefined\" ? self : typeof global !== \"undefined\" ? global : typeof globalThis !== \"undefined\" ? globalThis : undefined;\nvar currentWarnHandler;\n/**\n * Set the warning handler.\n * @param value The warning handler to set.\n */\n\nfunction setWarningHandler(value) {\n  assertType(typeof value === \"function\" || value === undefined, \"The warning handler must be a function or undefined, but got %o.\", value);\n  currentWarnHandler = value;\n}\n/**\n * The warning information.\n */\n\n\nvar Warning = /*#__PURE__*/function () {\n  function Warning(code, message) {\n    _classCallCheck__default['default'](this, Warning);\n\n    this.code = code;\n    this.message = message;\n  }\n  /**\n   * Report this warning.\n   * @param args The arguments of the warning.\n   */\n\n\n  _createClass__default['default'](Warning, [{\n    key: \"warn\",\n    value: function warn() {\n      var _a;\n\n      try {\n        var _console;\n\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        // Call the user-defined warning handler if exists.\n        if (currentWarnHandler) {\n          currentWarnHandler(_objectSpread(_objectSpread({}, this), {}, {\n            args: args\n          }));\n          return;\n        } // Otherwise, print the warning.\n\n\n        var stack = ((_a = new Error().stack) !== null && _a !== void 0 ? _a : \"\").replace(/^(?:(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+?\\n){2}/g, \"\\n\");\n\n        (_console = console).warn.apply(_console, [this.message].concat(args, [stack]));\n      } catch (_b) {// Ignore.\n      }\n    }\n  }]);\n\n  return Warning;\n}();\n\nvar InitEventWasCalledWhileDispatching = new Warning(\"W01\", \"Unable to initialize event under dispatching.\");\nvar FalsyWasAssignedToCancelBubble = new Warning(\"W02\", \"Assigning any falsy value to 'cancelBubble' property has no effect.\");\nvar TruthyWasAssignedToReturnValue = new Warning(\"W03\", \"Assigning any truthy value to 'returnValue' property has no effect.\");\nvar NonCancelableEventWasCanceled = new Warning(\"W04\", \"Unable to preventDefault on non-cancelable events.\");\nvar CanceledInPassiveListener = new Warning(\"W05\", \"Unable to preventDefault inside passive event listener invocation.\");\nvar EventListenerWasDuplicated = new Warning(\"W06\", \"An event listener wasn't added because it has been added already: %o, %o\");\nvar OptionWasIgnored = new Warning(\"W07\", \"The %o option value was abandoned because the event listener wasn't added as duplicated.\");\nvar InvalidEventListener = new Warning(\"W08\", \"The 'callback' argument must be a function or an object that has 'handleEvent' method: %o\");\nvar InvalidAttributeHandler = new Warning(\"W09\", \"Event attribute handler must be a function: %o\");\n/*eslint-disable class-methods-use-this */\n\n/**\n * An implementation of `Event` interface, that wraps a given event object.\n * `EventTarget` shim can control the internal state of this `Event` objects.\n * @see https://dom.spec.whatwg.org/#event\n */\n\nvar Event = /*#__PURE__*/function () {\n  _createClass__default['default'](Event, null, [{\n    key: \"NONE\",\n\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-none\n     */\n    get: function get() {\n      return NONE;\n    }\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-capturing_phase\n     */\n\n  }, {\n    key: \"CAPTURING_PHASE\",\n    get: function get() {\n      return CAPTURING_PHASE;\n    }\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-at_target\n     */\n\n  }, {\n    key: \"AT_TARGET\",\n    get: function get() {\n      return AT_TARGET;\n    }\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-bubbling_phase\n     */\n\n  }, {\n    key: \"BUBBLING_PHASE\",\n    get: function get() {\n      return BUBBLING_PHASE;\n    }\n    /**\n     * Initialize this event instance.\n     * @param type The type of this event.\n     * @param eventInitDict Options to initialize.\n     * @see https://dom.spec.whatwg.org/#dom-event-event\n     */\n\n  }]);\n\n  function Event(type, eventInitDict) {\n    _classCallCheck__default['default'](this, Event);\n\n    Object.defineProperty(this, \"isTrusted\", {\n      value: false,\n      enumerable: true\n    });\n    var opts = eventInitDict !== null && eventInitDict !== void 0 ? eventInitDict : {};\n    internalDataMap.set(this, {\n      type: String(type),\n      bubbles: Boolean(opts.bubbles),\n      cancelable: Boolean(opts.cancelable),\n      composed: Boolean(opts.composed),\n      target: null,\n      currentTarget: null,\n      stopPropagationFlag: false,\n      stopImmediatePropagationFlag: false,\n      canceledFlag: false,\n      inPassiveListenerFlag: false,\n      dispatchFlag: false,\n      timeStamp: Date.now()\n    });\n  }\n  /**\n   * The type of this event.\n   * @see https://dom.spec.whatwg.org/#dom-event-type\n   */\n\n\n  _createClass__default['default'](Event, [{\n    key: \"composedPath\",\n\n    /**\n     * The event target of the current dispatching.\n     * This doesn't support node tree.\n     * @see https://dom.spec.whatwg.org/#dom-event-composedpath\n     */\n    value: function composedPath() {\n      var currentTarget = $(this).currentTarget;\n\n      if (currentTarget) {\n        return [currentTarget];\n      }\n\n      return [];\n    }\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-none\n     */\n\n  }, {\n    key: \"stopPropagation\",\n\n    /**\n     * Stop event bubbling.\n     * Because this shim doesn't support node tree, this merely changes the `cancelBubble` property value.\n     * @see https://dom.spec.whatwg.org/#dom-event-stoppropagation\n     */\n    value: function stopPropagation() {\n      $(this).stopPropagationFlag = true;\n    }\n    /**\n     * `true` if event bubbling was stopped.\n     * @deprecated\n     * @see https://dom.spec.whatwg.org/#dom-event-cancelbubble\n     */\n\n  }, {\n    key: \"stopImmediatePropagation\",\n\n    /**\n     * Stop event bubbling and subsequent event listener callings.\n     * @see https://dom.spec.whatwg.org/#dom-event-stopimmediatepropagation\n     */\n    value: function stopImmediatePropagation() {\n      var data = $(this);\n      data.stopPropagationFlag = data.stopImmediatePropagationFlag = true;\n    }\n    /**\n     * `true` if this event will bubble.\n     * @see https://dom.spec.whatwg.org/#dom-event-bubbles\n     */\n\n  }, {\n    key: \"preventDefault\",\n\n    /**\n     * Cancel the default behavior.\n     * @see https://dom.spec.whatwg.org/#dom-event-preventdefault\n     */\n    value: function preventDefault() {\n      setCancelFlag($(this));\n    }\n    /**\n     * `true` if the default behavior was canceled.\n     * @see https://dom.spec.whatwg.org/#dom-event-defaultprevented\n     */\n\n  }, {\n    key: \"initEvent\",\n\n    /**\n     * @deprecated Don't use this method. The constructor did initialization.\n     */\n    value: function initEvent(type) {\n      var bubbles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var cancelable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var data = $(this);\n\n      if (data.dispatchFlag) {\n        InitEventWasCalledWhileDispatching.warn();\n        return;\n      }\n\n      internalDataMap.set(this, _objectSpread(_objectSpread({}, data), {}, {\n        type: String(type),\n        bubbles: Boolean(bubbles),\n        cancelable: Boolean(cancelable),\n        target: null,\n        currentTarget: null,\n        stopPropagationFlag: false,\n        stopImmediatePropagationFlag: false,\n        canceledFlag: false\n      }));\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return $(this).type;\n    }\n    /**\n     * The event target of the current dispatching.\n     * @see https://dom.spec.whatwg.org/#dom-event-target\n     */\n\n  }, {\n    key: \"target\",\n    get: function get() {\n      return $(this).target;\n    }\n    /**\n     * The event target of the current dispatching.\n     * @deprecated Use the `target` property instead.\n     * @see https://dom.spec.whatwg.org/#dom-event-srcelement\n     */\n\n  }, {\n    key: \"srcElement\",\n    get: function get() {\n      return $(this).target;\n    }\n    /**\n     * The event target of the current dispatching.\n     * @see https://dom.spec.whatwg.org/#dom-event-currenttarget\n     */\n\n  }, {\n    key: \"currentTarget\",\n    get: function get() {\n      return $(this).currentTarget;\n    }\n  }, {\n    key: \"NONE\",\n    get: function get() {\n      return NONE;\n    }\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-capturing_phase\n     */\n\n  }, {\n    key: \"CAPTURING_PHASE\",\n    get: function get() {\n      return CAPTURING_PHASE;\n    }\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-at_target\n     */\n\n  }, {\n    key: \"AT_TARGET\",\n    get: function get() {\n      return AT_TARGET;\n    }\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-bubbling_phase\n     */\n\n  }, {\n    key: \"BUBBLING_PHASE\",\n    get: function get() {\n      return BUBBLING_PHASE;\n    }\n    /**\n     * The current event phase.\n     * @see https://dom.spec.whatwg.org/#dom-event-eventphase\n     */\n\n  }, {\n    key: \"eventPhase\",\n    get: function get() {\n      return $(this).dispatchFlag ? 2 : 0;\n    }\n  }, {\n    key: \"cancelBubble\",\n    get: function get() {\n      return $(this).stopPropagationFlag;\n    }\n    /**\n     * Stop event bubbling if `true` is set.\n     * @deprecated Use the `stopPropagation()` method instead.\n     * @see https://dom.spec.whatwg.org/#dom-event-cancelbubble\n     */\n    ,\n    set: function set(value) {\n      if (value) {\n        $(this).stopPropagationFlag = true;\n      } else {\n        FalsyWasAssignedToCancelBubble.warn();\n      }\n    }\n  }, {\n    key: \"bubbles\",\n    get: function get() {\n      return $(this).bubbles;\n    }\n    /**\n     * `true` if this event can be canceled by the `preventDefault()` method.\n     * @see https://dom.spec.whatwg.org/#dom-event-cancelable\n     */\n\n  }, {\n    key: \"cancelable\",\n    get: function get() {\n      return $(this).cancelable;\n    }\n    /**\n     * `true` if the default behavior will act.\n     * @deprecated Use the `defaultPrevented` proeprty instead.\n     * @see https://dom.spec.whatwg.org/#dom-event-returnvalue\n     */\n\n  }, {\n    key: \"returnValue\",\n    get: function get() {\n      return !$(this).canceledFlag;\n    }\n    /**\n     * Cancel the default behavior if `false` is set.\n     * @deprecated Use the `preventDefault()` method instead.\n     * @see https://dom.spec.whatwg.org/#dom-event-returnvalue\n     */\n    ,\n    set: function set(value) {\n      if (!value) {\n        setCancelFlag($(this));\n      } else {\n        TruthyWasAssignedToReturnValue.warn();\n      }\n    }\n  }, {\n    key: \"defaultPrevented\",\n    get: function get() {\n      return $(this).canceledFlag;\n    }\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-composed\n     */\n\n  }, {\n    key: \"composed\",\n    get: function get() {\n      return $(this).composed;\n    }\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-istrusted\n     */\n    //istanbul ignore next\n\n  }, {\n    key: \"isTrusted\",\n    get: function get() {\n      return false;\n    }\n    /**\n     * @see https://dom.spec.whatwg.org/#dom-event-timestamp\n     */\n\n  }, {\n    key: \"timeStamp\",\n    get: function get() {\n      return $(this).timeStamp;\n    }\n  }]);\n\n  return Event;\n}(); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n\nvar NONE = 0;\nvar CAPTURING_PHASE = 1;\nvar AT_TARGET = 2;\nvar BUBBLING_PHASE = 3;\n/**\n * Private data for event wrappers.\n */\n\nvar internalDataMap = new WeakMap();\n/**\n * Get private data.\n * @param event The event object to get private data.\n * @param name The variable name to report.\n * @returns The private data of the event.\n */\n\nfunction $(event) {\n  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"this\";\n  var retv = internalDataMap.get(event);\n  assertType(retv != null, \"'%s' must be an object that Event constructor created, but got another one: %o\", name, event);\n  return retv;\n}\n/**\n * https://dom.spec.whatwg.org/#set-the-canceled-flag\n * @param data private data.\n */\n\n\nfunction setCancelFlag(data) {\n  if (data.inPassiveListenerFlag) {\n    CanceledInPassiveListener.warn();\n    return;\n  }\n\n  if (!data.cancelable) {\n    NonCancelableEventWasCanceled.warn();\n    return;\n  }\n\n  data.canceledFlag = true;\n} // Set enumerable\n\n\nObject.defineProperty(Event, \"NONE\", {\n  enumerable: true\n});\nObject.defineProperty(Event, \"CAPTURING_PHASE\", {\n  enumerable: true\n});\nObject.defineProperty(Event, \"AT_TARGET\", {\n  enumerable: true\n});\nObject.defineProperty(Event, \"BUBBLING_PHASE\", {\n  enumerable: true\n});\nvar keys = Object.getOwnPropertyNames(Event.prototype);\n\nfor (var i = 0; i < keys.length; ++i) {\n  if (keys[i] === \"constructor\") {\n    continue;\n  }\n\n  Object.defineProperty(Event.prototype, keys[i], {\n    enumerable: true\n  });\n} // Ensure `event instanceof window.Event` is `true`.\n\n\nif (typeof Global !== \"undefined\" && typeof Global.Event !== \"undefined\") {\n  Object.setPrototypeOf(Event.prototype, Global.Event.prototype);\n}\n/**\n * Create a new InvalidStateError instance.\n * @param message The error message.\n */\n\n\nfunction createInvalidStateError(message) {\n  if (Global.DOMException) {\n    return new Global.DOMException(message, \"InvalidStateError\");\n  }\n\n  if (DOMException == null) {\n    DOMException = /*#__PURE__*/function (_Error) {\n      _inherits__default['default'](DOMException, _Error);\n\n      var _super = _createSuper(DOMException);\n\n      function DOMException(msg) {\n        var _this;\n\n        _classCallCheck__default['default'](this, DOMException);\n\n        _this = _super.call(this, msg);\n\n        if (Error.captureStackTrace) {\n          Error.captureStackTrace(_assertThisInitialized__default['default'](_this), DOMException);\n        }\n\n        return _this;\n      } // eslint-disable-next-line class-methods-use-this\n\n\n      _createClass__default['default'](DOMException, [{\n        key: \"code\",\n        get: function get() {\n          return 11;\n        } // eslint-disable-next-line class-methods-use-this\n\n      }, {\n        key: \"name\",\n        get: function get() {\n          return \"InvalidStateError\";\n        }\n      }]);\n\n      return DOMException;\n    }( /*#__PURE__*/_wrapNativeSuper__default['default'](Error));\n\n    Object.defineProperties(DOMException.prototype, {\n      code: {\n        enumerable: true\n      },\n      name: {\n        enumerable: true\n      }\n    });\n    defineErrorCodeProperties(DOMException);\n    defineErrorCodeProperties(DOMException.prototype);\n  }\n\n  return new DOMException(message);\n} //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n\nvar DOMException;\nvar ErrorCodeMap = {\n  INDEX_SIZE_ERR: 1,\n  DOMSTRING_SIZE_ERR: 2,\n  HIERARCHY_REQUEST_ERR: 3,\n  WRONG_DOCUMENT_ERR: 4,\n  INVALID_CHARACTER_ERR: 5,\n  NO_DATA_ALLOWED_ERR: 6,\n  NO_MODIFICATION_ALLOWED_ERR: 7,\n  NOT_FOUND_ERR: 8,\n  NOT_SUPPORTED_ERR: 9,\n  INUSE_ATTRIBUTE_ERR: 10,\n  INVALID_STATE_ERR: 11,\n  SYNTAX_ERR: 12,\n  INVALID_MODIFICATION_ERR: 13,\n  NAMESPACE_ERR: 14,\n  INVALID_ACCESS_ERR: 15,\n  VALIDATION_ERR: 16,\n  TYPE_MISMATCH_ERR: 17,\n  SECURITY_ERR: 18,\n  NETWORK_ERR: 19,\n  ABORT_ERR: 20,\n  URL_MISMATCH_ERR: 21,\n  QUOTA_EXCEEDED_ERR: 22,\n  TIMEOUT_ERR: 23,\n  INVALID_NODE_TYPE_ERR: 24,\n  DATA_CLONE_ERR: 25\n};\n\nfunction defineErrorCodeProperties(obj) {\n  var keys = Object.keys(ErrorCodeMap);\n\n  var _loop = function _loop(_i) {\n    var key = keys[_i];\n    var value = ErrorCodeMap[key];\n    Object.defineProperty(obj, key, {\n      get: function get() {\n        return value;\n      },\n      configurable: true,\n      enumerable: true\n    });\n  };\n\n  for (var _i = 0; _i < keys.length; ++_i) {\n    _loop(_i);\n  }\n}\n/**\n * An implementation of `Event` interface, that wraps a given event object.\n * This class controls the internal state of `Event`.\n * @see https://dom.spec.whatwg.org/#interface-event\n */\n\n\nvar EventWrapper = /*#__PURE__*/function (_Event) {\n  _inherits__default['default'](EventWrapper, _Event);\n\n  var _super2 = _createSuper(EventWrapper);\n\n  _createClass__default['default'](EventWrapper, null, [{\n    key: \"wrap\",\n\n    /**\n     * Wrap a given event object to control states.\n     * @param event The event-like object to wrap.\n     */\n    value: function wrap(event) {\n      return new (getWrapperClassOf(event))(event);\n    }\n  }]);\n\n  function EventWrapper(event) {\n    var _thisSuper, _thisSuper2, _this2;\n\n    _classCallCheck__default['default'](this, EventWrapper);\n\n    _this2 = _super2.call(this, event.type, {\n      bubbles: event.bubbles,\n      cancelable: event.cancelable,\n      composed: event.composed\n    });\n\n    if (event.cancelBubble) {\n      _get__default['default']((_thisSuper = _assertThisInitialized__default['default'](_this2), _getPrototypeOf__default['default'](EventWrapper.prototype)), \"stopPropagation\", _thisSuper).call(_thisSuper);\n    }\n\n    if (event.defaultPrevented) {\n      _get__default['default']((_thisSuper2 = _assertThisInitialized__default['default'](_this2), _getPrototypeOf__default['default'](EventWrapper.prototype)), \"preventDefault\", _thisSuper2).call(_thisSuper2);\n    }\n\n    internalDataMap$1.set(_assertThisInitialized__default['default'](_this2), {\n      original: event\n    }); // Define accessors\n\n    var keys = Object.keys(event);\n\n    for (var _i2 = 0; _i2 < keys.length; ++_i2) {\n      var key = keys[_i2];\n\n      if (!(key in _assertThisInitialized__default['default'](_this2))) {\n        Object.defineProperty(_assertThisInitialized__default['default'](_this2), key, defineRedirectDescriptor(event, key));\n      }\n    }\n\n    return _this2;\n  }\n\n  _createClass__default['default'](EventWrapper, [{\n    key: \"stopPropagation\",\n    value: function stopPropagation() {\n      _get__default['default'](_getPrototypeOf__default['default'](EventWrapper.prototype), \"stopPropagation\", this).call(this);\n\n      var _$$ = $$1(this),\n          original = _$$.original;\n\n      if (\"stopPropagation\" in original) {\n        original.stopPropagation();\n      }\n    }\n  }, {\n    key: \"stopImmediatePropagation\",\n    value: function stopImmediatePropagation() {\n      _get__default['default'](_getPrototypeOf__default['default'](EventWrapper.prototype), \"stopImmediatePropagation\", this).call(this);\n\n      var _$$2 = $$1(this),\n          original = _$$2.original;\n\n      if (\"stopImmediatePropagation\" in original) {\n        original.stopImmediatePropagation();\n      }\n    }\n  }, {\n    key: \"preventDefault\",\n    value: function preventDefault() {\n      _get__default['default'](_getPrototypeOf__default['default'](EventWrapper.prototype), \"preventDefault\", this).call(this);\n\n      var _$$3 = $$1(this),\n          original = _$$3.original;\n\n      if (\"preventDefault\" in original) {\n        original.preventDefault();\n      }\n    }\n  }, {\n    key: \"cancelBubble\",\n    get: function get() {\n      return _get__default['default'](_getPrototypeOf__default['default'](EventWrapper.prototype), \"cancelBubble\", this);\n    },\n    set: function set(value) {\n      _set__default['default'](_getPrototypeOf__default['default'](EventWrapper.prototype), \"cancelBubble\", value, this, true);\n\n      var _$$4 = $$1(this),\n          original = _$$4.original;\n\n      if (\"cancelBubble\" in original) {\n        original.cancelBubble = value;\n      }\n    }\n  }, {\n    key: \"returnValue\",\n    get: function get() {\n      return _get__default['default'](_getPrototypeOf__default['default'](EventWrapper.prototype), \"returnValue\", this);\n    },\n    set: function set(value) {\n      _set__default['default'](_getPrototypeOf__default['default'](EventWrapper.prototype), \"returnValue\", value, this, true);\n\n      var _$$5 = $$1(this),\n          original = _$$5.original;\n\n      if (\"returnValue\" in original) {\n        original.returnValue = value;\n      }\n    }\n  }, {\n    key: \"timeStamp\",\n    get: function get() {\n      var _$$6 = $$1(this),\n          original = _$$6.original;\n\n      if (\"timeStamp\" in original) {\n        return original.timeStamp;\n      }\n\n      return _get__default['default'](_getPrototypeOf__default['default'](EventWrapper.prototype), \"timeStamp\", this);\n    }\n  }]);\n\n  return EventWrapper;\n}(Event);\n/**\n * Private data for event wrappers.\n */\n\n\nvar internalDataMap$1 = new WeakMap();\n/**\n * Get private data.\n * @param event The event object to get private data.\n * @returns The private data of the event.\n */\n\nfunction $$1(event) {\n  var retv = internalDataMap$1.get(event);\n  assertType(retv != null, \"'this' is expected an Event object, but got\", event);\n  return retv;\n}\n/**\n * Cache for wrapper classes.\n * @type {WeakMap<Object, Function>}\n * @private\n */\n\n\nvar wrapperClassCache = new WeakMap(); // Make association for wrappers.\n\nwrapperClassCache.set(Object.prototype, EventWrapper);\n\nif (typeof Global !== \"undefined\" && typeof Global.Event !== \"undefined\") {\n  wrapperClassCache.set(Global.Event.prototype, EventWrapper);\n}\n/**\n * Get the wrapper class of a given prototype.\n * @param originalEvent The event object to wrap.\n */\n\n\nfunction getWrapperClassOf(originalEvent) {\n  var prototype = Object.getPrototypeOf(originalEvent);\n\n  if (prototype == null) {\n    return EventWrapper;\n  }\n\n  var wrapper = wrapperClassCache.get(prototype);\n\n  if (wrapper == null) {\n    wrapper = defineWrapper(getWrapperClassOf(prototype), prototype);\n    wrapperClassCache.set(prototype, wrapper);\n  }\n\n  return wrapper;\n}\n/**\n * Define new wrapper class.\n * @param BaseEventWrapper The base wrapper class.\n * @param originalPrototype The prototype of the original event.\n */\n\n\nfunction defineWrapper(BaseEventWrapper, originalPrototype) {\n  var CustomEventWrapper = /*#__PURE__*/function (_BaseEventWrapper) {\n    _inherits__default['default'](CustomEventWrapper, _BaseEventWrapper);\n\n    var _super3 = _createSuper(CustomEventWrapper);\n\n    function CustomEventWrapper() {\n      _classCallCheck__default['default'](this, CustomEventWrapper);\n\n      return _super3.apply(this, arguments);\n    }\n\n    return CustomEventWrapper;\n  }(BaseEventWrapper);\n\n  var keys = Object.keys(originalPrototype);\n\n  for (var _i3 = 0; _i3 < keys.length; ++_i3) {\n    Object.defineProperty(CustomEventWrapper.prototype, keys[_i3], defineRedirectDescriptor(originalPrototype, keys[_i3]));\n  }\n\n  return CustomEventWrapper;\n}\n/**\n * Get the property descriptor to redirect a given property.\n */\n\n\nfunction defineRedirectDescriptor(obj, key) {\n  var d = Object.getOwnPropertyDescriptor(obj, key);\n  return {\n    get: function get() {\n      var original = $$1(this).original;\n      var value = original[key];\n\n      if (typeof value === \"function\") {\n        return value.bind(original);\n      }\n\n      return value;\n    },\n    set: function set(value) {\n      var original = $$1(this).original;\n      original[key] = value;\n    },\n    configurable: d.configurable,\n    enumerable: d.enumerable\n  };\n}\n/**\n * Create a new listener.\n * @param callback The callback function.\n * @param capture The capture flag.\n * @param passive The passive flag.\n * @param once The once flag.\n * @param signal The abort signal.\n * @param signalListener The abort event listener for the abort signal.\n */\n\n\nfunction createListener(callback, capture, passive, once, signal, signalListener) {\n  return {\n    callback: callback,\n    flags: (capture ? 1\n    /* Capture */\n    : 0) | (passive ? 2\n    /* Passive */\n    : 0) | (once ? 4\n    /* Once */\n    : 0),\n    signal: signal,\n    signalListener: signalListener\n  };\n}\n/**\n * Set the `removed` flag to the given listener.\n * @param listener The listener to check.\n */\n\n\nfunction setRemoved(listener) {\n  listener.flags |= 8\n  /* Removed */\n  ;\n}\n/**\n * Check if the given listener has the `capture` flag or not.\n * @param listener The listener to check.\n */\n\n\nfunction isCapture(listener) {\n  return (listener.flags & 1\n  /* Capture */\n  ) === 1\n  /* Capture */\n  ;\n}\n/**\n * Check if the given listener has the `passive` flag or not.\n * @param listener The listener to check.\n */\n\n\nfunction isPassive(listener) {\n  return (listener.flags & 2\n  /* Passive */\n  ) === 2\n  /* Passive */\n  ;\n}\n/**\n * Check if the given listener has the `once` flag or not.\n * @param listener The listener to check.\n */\n\n\nfunction isOnce(listener) {\n  return (listener.flags & 4\n  /* Once */\n  ) === 4\n  /* Once */\n  ;\n}\n/**\n * Check if the given listener has the `removed` flag or not.\n * @param listener The listener to check.\n */\n\n\nfunction isRemoved(listener) {\n  return (listener.flags & 8\n  /* Removed */\n  ) === 8\n  /* Removed */\n  ;\n}\n/**\n * Call an event listener.\n * @param listener The listener to call.\n * @param target The event target object for `thisArg`.\n * @param event The event object for the first argument.\n * @param attribute `true` if this callback is an event attribute handler.\n */\n\n\nfunction invokeCallback(_ref, target, event) {\n  var callback = _ref.callback;\n\n  try {\n    if (typeof callback === \"function\") {\n      callback.call(target, event);\n    } else if (typeof callback.handleEvent === \"function\") {\n      callback.handleEvent(event);\n    }\n  } catch (thrownError) {\n    reportError(thrownError);\n  }\n}\n/**\n * Find the index of given listener.\n * This returns `-1` if not found.\n * @param list The listener list.\n * @param callback The callback function to find.\n * @param capture The capture flag to find.\n */\n\n\nfunction findIndexOfListener(_ref2, callback, capture) {\n  var listeners = _ref2.listeners;\n\n  for (var _i4 = 0; _i4 < listeners.length; ++_i4) {\n    if (listeners[_i4].callback === callback && isCapture(listeners[_i4]) === capture) {\n      return _i4;\n    }\n  }\n\n  return -1;\n}\n/**\n * Add the given listener.\n * Does copy-on-write if needed.\n * @param list The listener list.\n * @param callback The callback function.\n * @param capture The capture flag.\n * @param passive The passive flag.\n * @param once The once flag.\n * @param signal The abort signal.\n */\n\n\nfunction addListener(list, callback, capture, passive, once, signal) {\n  var signalListener;\n\n  if (signal) {\n    signalListener = removeListener.bind(null, list, callback, capture);\n    signal.addEventListener(\"abort\", signalListener);\n  }\n\n  var listener = createListener(callback, capture, passive, once, signal, signalListener);\n\n  if (list.cow) {\n    list.cow = false;\n    list.listeners = [].concat(_toConsumableArray__default['default'](list.listeners), [listener]);\n  } else {\n    list.listeners.push(listener);\n  }\n\n  return listener;\n}\n/**\n * Remove a listener.\n * @param list The listener list.\n * @param callback The callback function to find.\n * @param capture The capture flag to find.\n * @returns `true` if it mutated the list directly.\n */\n\n\nfunction removeListener(list, callback, capture) {\n  var index = findIndexOfListener(list, callback, capture);\n\n  if (index !== -1) {\n    return removeListenerAt(list, index);\n  }\n\n  return false;\n}\n/**\n * Remove a listener.\n * @param list The listener list.\n * @param index The index of the target listener.\n * @param disableCow Disable copy-on-write if true.\n * @returns `true` if it mutated the `listeners` array directly.\n */\n\n\nfunction removeListenerAt(list, index) {\n  var disableCow = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var listener = list.listeners[index]; // Set the removed flag.\n\n  setRemoved(listener); // Dispose the abort signal listener if exists.\n\n  if (listener.signal) {\n    listener.signal.removeEventListener(\"abort\", listener.signalListener);\n  } // Remove it from the array.\n\n\n  if (list.cow && !disableCow) {\n    list.cow = false;\n    list.listeners = list.listeners.filter(function (_, i) {\n      return i !== index;\n    });\n    return false;\n  }\n\n  list.listeners.splice(index, 1);\n  return true;\n}\n/**\n * Create a new `ListenerListMap` object.\n */\n\n\nfunction createListenerListMap() {\n  return Object.create(null);\n}\n/**\n * Get the listener list of the given type.\n * If the listener list has not been initialized, initialize and return it.\n * @param listenerMap The listener list map.\n * @param type The event type to get.\n */\n\n\nfunction ensureListenerList(listenerMap, type) {\n  var _a;\n\n  return (_a = listenerMap[type]) !== null && _a !== void 0 ? _a : listenerMap[type] = {\n    attrCallback: undefined,\n    attrListener: undefined,\n    cow: false,\n    listeners: []\n  };\n}\n/**\n * An implementation of the `EventTarget` interface.\n * @see https://dom.spec.whatwg.org/#eventtarget\n */\n\n\nvar EventTarget = /*#__PURE__*/function () {\n  /**\n   * Initialize this instance.\n   */\n  function EventTarget() {\n    _classCallCheck__default['default'](this, EventTarget);\n\n    internalDataMap$2.set(this, createListenerListMap());\n  } // Implementation\n\n\n  _createClass__default['default'](EventTarget, [{\n    key: \"addEventListener\",\n    value: function addEventListener(type0, callback0, options0) {\n      var listenerMap = $$2(this);\n\n      var _normalizeAddOptions = normalizeAddOptions(type0, callback0, options0),\n          callback = _normalizeAddOptions.callback,\n          capture = _normalizeAddOptions.capture,\n          once = _normalizeAddOptions.once,\n          passive = _normalizeAddOptions.passive,\n          signal = _normalizeAddOptions.signal,\n          type = _normalizeAddOptions.type;\n\n      if (callback == null || (signal === null || signal === void 0 ? void 0 : signal.aborted)) {\n        return;\n      }\n\n      var list = ensureListenerList(listenerMap, type); // Find existing listener.\n\n      var i = findIndexOfListener(list, callback, capture);\n\n      if (i !== -1) {\n        warnDuplicate(list.listeners[i], passive, once, signal);\n        return;\n      } // Add the new listener.\n\n\n      addListener(list, callback, capture, passive, once, signal);\n    } // Implementation\n\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(type0, callback0, options0) {\n      var listenerMap = $$2(this);\n\n      var _normalizeOptions = normalizeOptions(type0, callback0, options0),\n          callback = _normalizeOptions.callback,\n          capture = _normalizeOptions.capture,\n          type = _normalizeOptions.type;\n\n      var list = listenerMap[type];\n\n      if (callback != null && list) {\n        removeListener(list, callback, capture);\n      }\n    } // Implementation\n\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(e) {\n      var list = $$2(this)[String(e.type)];\n\n      if (list == null) {\n        return true;\n      }\n\n      var event = e instanceof Event ? e : EventWrapper.wrap(e);\n      var eventData = $(event, \"event\");\n\n      if (eventData.dispatchFlag) {\n        throw createInvalidStateError(\"This event has been in dispatching.\");\n      }\n\n      eventData.dispatchFlag = true;\n      eventData.target = eventData.currentTarget = this;\n\n      if (!eventData.stopPropagationFlag) {\n        var cow = list.cow,\n            listeners = list.listeners; // Set copy-on-write flag.\n\n        list.cow = true; // Call listeners.\n\n        for (var _i5 = 0; _i5 < listeners.length; ++_i5) {\n          var listener = listeners[_i5]; // Skip if removed.\n\n          if (isRemoved(listener)) {\n            continue;\n          } // Remove this listener if has the `once` flag.\n\n\n          if (isOnce(listener) && removeListenerAt(list, _i5, !cow)) {\n            // Because this listener was removed, the next index is the\n            // same as the current value.\n            _i5 -= 1;\n          } // Call this listener with the `passive` flag.\n\n\n          eventData.inPassiveListenerFlag = isPassive(listener);\n          invokeCallback(listener, this, event);\n          eventData.inPassiveListenerFlag = false; // Stop if the `event.stopImmediatePropagation()` method was called.\n\n          if (eventData.stopImmediatePropagationFlag) {\n            break;\n          }\n        } // Restore copy-on-write flag.\n\n\n        if (!cow) {\n          list.cow = false;\n        }\n      }\n\n      eventData.target = null;\n      eventData.currentTarget = null;\n      eventData.stopImmediatePropagationFlag = false;\n      eventData.stopPropagationFlag = false;\n      eventData.dispatchFlag = false;\n      return !eventData.canceledFlag;\n    }\n  }]);\n\n  return EventTarget;\n}();\n/**\n * Internal data.\n */\n\n\nvar internalDataMap$2 = new WeakMap();\n/**\n * Get private data.\n * @param target The event target object to get private data.\n * @param name The variable name to report.\n * @returns The private data of the event.\n */\n\nfunction $$2(target) {\n  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"this\";\n  var retv = internalDataMap$2.get(target);\n  assertType(retv != null, \"'%s' must be an object that EventTarget constructor created, but got another one: %o\", name, target);\n  return retv;\n}\n/**\n * Normalize options.\n * @param options The options to normalize.\n */\n\n\nfunction normalizeAddOptions(type, callback, options) {\n  var _a;\n\n  assertCallback(callback);\n\n  if (_typeof__default['default'](options) === \"object\" && options !== null) {\n    return {\n      type: String(type),\n      callback: callback !== null && callback !== void 0 ? callback : undefined,\n      capture: Boolean(options.capture),\n      passive: Boolean(options.passive),\n      once: Boolean(options.once),\n      signal: (_a = options.signal) !== null && _a !== void 0 ? _a : undefined\n    };\n  }\n\n  return {\n    type: String(type),\n    callback: callback !== null && callback !== void 0 ? callback : undefined,\n    capture: Boolean(options),\n    passive: false,\n    once: false,\n    signal: undefined\n  };\n}\n/**\n * Normalize options.\n * @param options The options to normalize.\n */\n\n\nfunction normalizeOptions(type, callback, options) {\n  assertCallback(callback);\n\n  if (_typeof__default['default'](options) === \"object\" && options !== null) {\n    return {\n      type: String(type),\n      callback: callback !== null && callback !== void 0 ? callback : undefined,\n      capture: Boolean(options.capture)\n    };\n  }\n\n  return {\n    type: String(type),\n    callback: callback !== null && callback !== void 0 ? callback : undefined,\n    capture: Boolean(options)\n  };\n}\n/**\n * Assert the type of 'callback' argument.\n * @param callback The callback to check.\n */\n\n\nfunction assertCallback(callback) {\n  if (typeof callback === \"function\" || _typeof__default['default'](callback) === \"object\" && callback !== null && typeof callback.handleEvent === \"function\") {\n    return;\n  }\n\n  if (callback == null || _typeof__default['default'](callback) === \"object\") {\n    InvalidEventListener.warn(callback);\n    return;\n  }\n\n  throw new TypeError(format(InvalidEventListener.message, [callback]));\n}\n/**\n * Print warning for duplicated.\n * @param listener The current listener that is duplicated.\n * @param passive The passive flag of the new duplicated listener.\n * @param once The once flag of the new duplicated listener.\n * @param signal The signal object of the new duplicated listener.\n */\n\n\nfunction warnDuplicate(listener, passive, once, signal) {\n  EventListenerWasDuplicated.warn(isCapture(listener) ? \"capture\" : \"bubble\", listener.callback);\n\n  if (isPassive(listener) !== passive) {\n    OptionWasIgnored.warn(\"passive\");\n  }\n\n  if (isOnce(listener) !== once) {\n    OptionWasIgnored.warn(\"once\");\n  }\n\n  if (listener.signal !== signal) {\n    OptionWasIgnored.warn(\"signal\");\n  }\n} // Set enumerable\n\n\nvar keys$1 = Object.getOwnPropertyNames(EventTarget.prototype);\n\nfor (var _i6 = 0; _i6 < keys$1.length; ++_i6) {\n  if (keys$1[_i6] === \"constructor\") {\n    continue;\n  }\n\n  Object.defineProperty(EventTarget.prototype, keys$1[_i6], {\n    enumerable: true\n  });\n} // Ensure `eventTarget instanceof window.EventTarget` is `true`.\n\n\nif (typeof Global !== \"undefined\" && typeof Global.EventTarget !== \"undefined\") {\n  Object.setPrototypeOf(EventTarget.prototype, Global.EventTarget.prototype);\n}\n/**\n * Get the current value of a given event attribute.\n * @param target The `EventTarget` object to get.\n * @param type The event type.\n */\n\n\nfunction getEventAttributeValue(target, type) {\n  var _a, _b;\n\n  var listMap = $$2(target, \"target\");\n  return (_b = (_a = listMap[type]) === null || _a === void 0 ? void 0 : _a.attrCallback) !== null && _b !== void 0 ? _b : null;\n}\n/**\n * Set an event listener to a given event attribute.\n * @param target The `EventTarget` object to set.\n * @param type The event type.\n * @param callback The event listener.\n */\n\n\nfunction setEventAttributeValue(target, type, callback) {\n  if (callback != null && typeof callback !== \"function\") {\n    InvalidAttributeHandler.warn(callback);\n  }\n\n  if (typeof callback === \"function\" || _typeof__default['default'](callback) === \"object\" && callback !== null) {\n    upsertEventAttributeListener(target, type, callback);\n  } else {\n    removeEventAttributeListener(target, type);\n  }\n} //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Update or insert the given event attribute handler.\n * @param target The `EventTarget` object to set.\n * @param type The event type.\n * @param callback The event listener.\n */\n\n\nfunction upsertEventAttributeListener(target, type, callback) {\n  var list = ensureListenerList($$2(target, \"target\"), String(type));\n  list.attrCallback = callback;\n\n  if (list.attrListener == null) {\n    list.attrListener = addListener(list, defineEventAttributeCallback(list), false, false, false, undefined);\n  }\n}\n/**\n * Remove the given event attribute handler.\n * @param target The `EventTarget` object to remove.\n * @param type The event type.\n * @param callback The event listener.\n */\n\n\nfunction removeEventAttributeListener(target, type) {\n  var listMap = $$2(target, \"target\");\n  var list = listMap[String(type)];\n\n  if (list && list.attrListener) {\n    removeListener(list, list.attrListener.callback, false);\n    list.attrCallback = list.attrListener = undefined;\n  }\n}\n/**\n * Define the callback function for the given listener list object.\n * It calls `attrCallback` property if the property value is a function.\n * @param list The `ListenerList` object.\n */\n\n\nfunction defineEventAttributeCallback(list) {\n  return function (event) {\n    var callback = list.attrCallback;\n\n    if (typeof callback === \"function\") {\n      callback.call(this, event);\n    }\n  };\n}\n/**\n * Define an `EventTarget` class that has event attibutes.\n * @param types The types to define event attributes.\n * @deprecated Use `getEventAttributeValue`/`setEventAttributeValue` pair on your derived class instead because of static analysis friendly.\n */\n\n\nfunction defineCustomEventTarget() {\n  var CustomEventTarget = /*#__PURE__*/function (_EventTarget) {\n    _inherits__default['default'](CustomEventTarget, _EventTarget);\n\n    var _super4 = _createSuper(CustomEventTarget);\n\n    function CustomEventTarget() {\n      _classCallCheck__default['default'](this, CustomEventTarget);\n\n      return _super4.apply(this, arguments);\n    }\n\n    return CustomEventTarget;\n  }(EventTarget);\n\n  for (var _i7 = 0; _i7 < arguments.length; ++_i7) {\n    defineEventAttribute(CustomEventTarget.prototype, _i7 < 0 || arguments.length <= _i7 ? undefined : arguments[_i7]);\n  }\n\n  return CustomEventTarget;\n}\n/**\n * Define an event attribute.\n * @param target The `EventTarget` object to define an event attribute.\n * @param type The event type to define.\n * @param _eventClass Unused, but to infer `Event` class type.\n * @deprecated Use `getEventAttributeValue`/`setEventAttributeValue` pair on your derived class instead because of static analysis friendly.\n */\n\n\nfunction defineEventAttribute(target, type, _eventClass) {\n  Object.defineProperty(target, \"on\".concat(type), {\n    get: function get() {\n      return getEventAttributeValue(this, type);\n    },\n    set: function set(value) {\n      setEventAttributeValue(this, type, value);\n    },\n    configurable: true,\n    enumerable: true\n  });\n}\n\nexports.Event = Event;\nexports.EventTarget = EventTarget;\nexports.default = EventTarget;\nexports.defineCustomEventTarget = defineCustomEventTarget;\nexports.defineEventAttribute = defineEventAttribute;\nexports.getEventAttributeValue = getEventAttributeValue;\nexports.setErrorHandler = setErrorHandler;\nexports.setEventAttributeValue = setEventAttributeValue;\nexports.setWarningHandler = setWarningHandler;\n", "function _interopRequireDefault(e) {\n  return e && e.__esModule ? e : {\n    \"default\": e\n  };\n}\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "'use strict';\nvar check = function (it) {\n  return it && it.Math === Math && it;\n};\n\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nmodule.exports =\n  // eslint-disable-next-line es/no-global-this -- safe\n  check(typeof globalThis == 'object' && globalThis) ||\n  check(typeof window == 'object' && window) ||\n  // eslint-disable-next-line no-restricted-globals -- safe\n  check(typeof self == 'object' && self) ||\n  check(typeof global == 'object' && global) ||\n  check(typeof this == 'object' && this) ||\n  // eslint-disable-next-line no-new-func -- fallback\n  (function () { return this; })() || Function('return this')();\n", "'use strict';\nmodule.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (error) {\n    return true;\n  }\n};\n", "'use strict';\nvar fails = require('../internals/fails');\n\nmodule.exports = !fails(function () {\n  // eslint-disable-next-line es/no-function-prototype-bind -- safe\n  var test = (function () { /* empty */ }).bind();\n  // eslint-disable-next-line no-prototype-builtins -- safe\n  return typeof test != 'function' || test.hasOwnProperty('prototype');\n});\n", "'use strict';\nvar NATIVE_BIND = require('../internals/function-bind-native');\n\nvar FunctionPrototype = Function.prototype;\nvar apply = FunctionPrototype.apply;\nvar call = FunctionPrototype.call;\n\n// eslint-disable-next-line es/no-reflect -- safe\nmodule.exports = typeof Reflect == 'object' && Reflect.apply || (NATIVE_BIND ? call.bind(apply) : function () {\n  return call.apply(apply, arguments);\n});\n", "'use strict';\nvar NATIVE_BIND = require('../internals/function-bind-native');\n\nvar FunctionPrototype = Function.prototype;\nvar call = FunctionPrototype.call;\nvar uncurryThisWithBind = NATIVE_BIND && FunctionPrototype.bind.bind(call, call);\n\nmodule.exports = NATIVE_BIND ? uncurryThisWithBind : function (fn) {\n  return function () {\n    return call.apply(fn, arguments);\n  };\n};\n", "'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nvar toString = uncurryThis({}.toString);\nvar stringSlice = uncurryThis(''.slice);\n\nmodule.exports = function (it) {\n  return stringSlice(toString(it), 8, -1);\n};\n", "'use strict';\nvar classofRaw = require('../internals/classof-raw');\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nmodule.exports = function (fn) {\n  // Nashorn bug:\n  //   https://github.com/zloirock/core-js/issues/1128\n  //   https://github.com/zloirock/core-js/issues/1130\n  if (classofRaw(fn) === 'Function') return uncurryThis(fn);\n};\n", "'use strict';\n// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot\nvar documentAll = typeof document == 'object' && document.all;\n\n// `IsCallable` abstract operation\n// https://tc39.es/ecma262/#sec-iscallable\n// eslint-disable-next-line unicorn/no-typeof-undefined -- required for testing\nmodule.exports = typeof documentAll == 'undefined' && documentAll !== undefined ? function (argument) {\n  return typeof argument == 'function' || argument === documentAll;\n} : function (argument) {\n  return typeof argument == 'function';\n};\n", "'use strict';\nvar fails = require('../internals/fails');\n\n// Detect IE8's incomplete defineProperty implementation\nmodule.exports = !fails(function () {\n  // eslint-disable-next-line es/no-object-defineproperty -- required for testing\n  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] !== 7;\n});\n", "'use strict';\nvar NATIVE_BIND = require('../internals/function-bind-native');\n\nvar call = Function.prototype.call;\n\nmodule.exports = NATIVE_BIND ? call.bind(call) : function () {\n  return call.apply(call, arguments);\n};\n", "'use strict';\nvar $propertyIsEnumerable = {}.propertyIsEnumerable;\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n// Nashorn ~ JDK8 bug\nvar NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);\n\n// `Object.prototype.propertyIsEnumerable` method implementation\n// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable\nexports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {\n  var descriptor = getOwnPropertyDescriptor(this, V);\n  return !!descriptor && descriptor.enumerable;\n} : $propertyIsEnumerable;\n", "'use strict';\nmodule.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n", "'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar fails = require('../internals/fails');\nvar classof = require('../internals/classof-raw');\n\nvar $Object = Object;\nvar split = uncurryThis(''.split);\n\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\nmodule.exports = fails(function () {\n  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346\n  // eslint-disable-next-line no-prototype-builtins -- safe\n  return !$Object('z').propertyIsEnumerable(0);\n}) ? function (it) {\n  return classof(it) === 'String' ? split(it, '') : $Object(it);\n} : $Object;\n", "'use strict';\n// we can't use just `it == null` since of `document.all` special case\n// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot-aec\nmodule.exports = function (it) {\n  return it === null || it === undefined;\n};\n", "'use strict';\nvar isNullOrUndefined = require('../internals/is-null-or-undefined');\n\nvar $TypeError = TypeError;\n\n// `RequireObjectCoercible` abstract operation\n// https://tc39.es/ecma262/#sec-requireobjectcoercible\nmodule.exports = function (it) {\n  if (isNullOrUndefined(it)) throw new $TypeError(\"Can't call method on \" + it);\n  return it;\n};\n", "'use strict';\n// toObject with fallback for non-array-like ES3 strings\nvar IndexedObject = require('../internals/indexed-object');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nmodule.exports = function (it) {\n  return IndexedObject(requireObjectCoercible(it));\n};\n", "'use strict';\nvar isCallable = require('../internals/is-callable');\n\nmodule.exports = function (it) {\n  return typeof it == 'object' ? it !== null : isCallable(it);\n};\n", "'use strict';\nmodule.exports = {};\n", "'use strict';\nvar path = require('../internals/path');\nvar globalThis = require('../internals/global-this');\nvar isCallable = require('../internals/is-callable');\n\nvar aFunction = function (variable) {\n  return isCallable(variable) ? variable : undefined;\n};\n\nmodule.exports = function (namespace, method) {\n  return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(globalThis[namespace])\n    : path[namespace] && path[namespace][method] || globalThis[namespace] && globalThis[namespace][method];\n};\n", "'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nmodule.exports = uncurryThis({}.isPrototypeOf);\n", "'use strict';\nvar globalThis = require('../internals/global-this');\n\nvar navigator = globalThis.navigator;\nvar userAgent = navigator && navigator.userAgent;\n\nmodule.exports = userAgent ? String(userAgent) : '';\n", "'use strict';\nvar globalThis = require('../internals/global-this');\nvar userAgent = require('../internals/environment-user-agent');\n\nvar process = globalThis.process;\nvar Deno = globalThis.Deno;\nvar versions = process && process.versions || Deno && Deno.version;\nvar v8 = versions && versions.v8;\nvar match, version;\n\nif (v8) {\n  match = v8.split('.');\n  // in old Chrome, versions of V8 isn't V8 = Chrome / 10\n  // but their correct versions are not interesting for us\n  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);\n}\n\n// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`\n// so check `userAgent` even if `.v8` exists, but 0\nif (!version && userAgent) {\n  match = userAgent.match(/Edge\\/(\\d+)/);\n  if (!match || match[1] >= 74) {\n    match = userAgent.match(/Chrome\\/(\\d+)/);\n    if (match) version = +match[1];\n  }\n}\n\nmodule.exports = version;\n", "'use strict';\n/* eslint-disable es/no-symbol -- required for testing */\nvar V8_VERSION = require('../internals/environment-v8-version');\nvar fails = require('../internals/fails');\nvar globalThis = require('../internals/global-this');\n\nvar $String = globalThis.String;\n\n// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing\nmodule.exports = !!Object.getOwnPropertySymbols && !fails(function () {\n  var symbol = Symbol('symbol detection');\n  // Chrome 38 Symbol has incorrect toString conversion\n  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances\n  // nb: Do not call `String` directly to avoid this being optimized out to `symbol+''` which will,\n  // of course, fail.\n  return !$String(symbol) || !(Object(symbol) instanceof Symbol) ||\n    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances\n    !Symbol.sham && V8_VERSION && V8_VERSION < 41;\n});\n", "'use strict';\n/* eslint-disable es/no-symbol -- required for testing */\nvar NATIVE_SYMBOL = require('../internals/symbol-constructor-detection');\n\nmodule.exports = NATIVE_SYMBOL\n  && !Symbol.sham\n  && typeof Symbol.iterator == 'symbol';\n", "'use strict';\nvar getBuiltIn = require('../internals/get-built-in');\nvar isCallable = require('../internals/is-callable');\nvar isPrototypeOf = require('../internals/object-is-prototype-of');\nvar USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');\n\nvar $Object = Object;\n\nmodule.exports = USE_SYMBOL_AS_UID ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  var $Symbol = getBuiltIn('Symbol');\n  return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, $Object(it));\n};\n", "'use strict';\nvar $String = String;\n\nmodule.exports = function (argument) {\n  try {\n    return $String(argument);\n  } catch (error) {\n    return 'Object';\n  }\n};\n", "'use strict';\nvar isCallable = require('../internals/is-callable');\nvar tryToString = require('../internals/try-to-string');\n\nvar $TypeError = TypeError;\n\n// `Assert: IsCallable(argument) is true`\nmodule.exports = function (argument) {\n  if (isCallable(argument)) return argument;\n  throw new $TypeError(tryToString(argument) + ' is not a function');\n};\n", "'use strict';\nvar aCallable = require('../internals/a-callable');\nvar isNullOrUndefined = require('../internals/is-null-or-undefined');\n\n// `GetMethod` abstract operation\n// https://tc39.es/ecma262/#sec-getmethod\nmodule.exports = function (V, P) {\n  var func = V[P];\n  return isNullOrUndefined(func) ? undefined : aCallable(func);\n};\n", "'use strict';\nvar call = require('../internals/function-call');\nvar isCallable = require('../internals/is-callable');\nvar isObject = require('../internals/is-object');\n\nvar $TypeError = TypeError;\n\n// `OrdinaryToPrimitive` abstract operation\n// https://tc39.es/ecma262/#sec-ordinarytoprimitive\nmodule.exports = function (input, pref) {\n  var fn, val;\n  if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;\n  if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input))) return val;\n  if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;\n  throw new $TypeError(\"Can't convert object to primitive value\");\n};\n", "'use strict';\nmodule.exports = true;\n", "'use strict';\nvar globalThis = require('../internals/global-this');\n\n// eslint-disable-next-line es/no-object-defineproperty -- safe\nvar defineProperty = Object.defineProperty;\n\nmodule.exports = function (key, value) {\n  try {\n    defineProperty(globalThis, key, { value: value, configurable: true, writable: true });\n  } catch (error) {\n    globalThis[key] = value;\n  } return value;\n};\n", "'use strict';\nvar IS_PURE = require('../internals/is-pure');\nvar globalThis = require('../internals/global-this');\nvar defineGlobalProperty = require('../internals/define-global-property');\n\nvar SHARED = '__core-js_shared__';\nvar store = module.exports = globalThis[SHARED] || defineGlobalProperty(SHARED, {});\n\n(store.versions || (store.versions = [])).push({\n  version: '3.38.1',\n  mode: IS_PURE ? 'pure' : 'global',\n  copyright: '© 2014-2024 Denis Pushkarev (zloirock.ru)',\n  license: 'https://github.com/zloirock/core-js/blob/v3.38.1/LICENSE',\n  source: 'https://github.com/zloirock/core-js'\n});\n", "'use strict';\nvar store = require('../internals/shared-store');\n\nmodule.exports = function (key, value) {\n  return store[key] || (store[key] = value || {});\n};\n", "'use strict';\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nvar $Object = Object;\n\n// `ToObject` abstract operation\n// https://tc39.es/ecma262/#sec-toobject\nmodule.exports = function (argument) {\n  return $Object(requireObjectCoercible(argument));\n};\n", "'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar toObject = require('../internals/to-object');\n\nvar hasOwnProperty = uncurryThis({}.hasOwnProperty);\n\n// `HasOwnProperty` abstract operation\n// https://tc39.es/ecma262/#sec-hasownproperty\n// eslint-disable-next-line es/no-object-hasown -- safe\nmodule.exports = Object.hasOwn || function hasOwn(it, key) {\n  return hasOwnProperty(toObject(it), key);\n};\n", "'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nvar id = 0;\nvar postfix = Math.random();\nvar toString = uncurryThis(1.0.toString);\n\nmodule.exports = function (key) {\n  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString(++id + postfix, 36);\n};\n", "'use strict';\nvar globalThis = require('../internals/global-this');\nvar shared = require('../internals/shared');\nvar hasOwn = require('../internals/has-own-property');\nvar uid = require('../internals/uid');\nvar NATIVE_SYMBOL = require('../internals/symbol-constructor-detection');\nvar USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');\n\nvar Symbol = globalThis.Symbol;\nvar WellKnownSymbolsStore = shared('wks');\nvar createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol['for'] || Symbol : Symbol && Symbol.withoutSetter || uid;\n\nmodule.exports = function (name) {\n  if (!hasOwn(WellKnownSymbolsStore, name)) {\n    WellKnownSymbolsStore[name] = NATIVE_SYMBOL && hasOwn(Symbol, name)\n      ? Symbol[name]\n      : createWellKnownSymbol('Symbol.' + name);\n  } return WellKnownSymbolsStore[name];\n};\n", "'use strict';\nvar call = require('../internals/function-call');\nvar isObject = require('../internals/is-object');\nvar isSymbol = require('../internals/is-symbol');\nvar getMethod = require('../internals/get-method');\nvar ordinaryToPrimitive = require('../internals/ordinary-to-primitive');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar $TypeError = TypeError;\nvar TO_PRIMITIVE = wellKnownSymbol('toPrimitive');\n\n// `ToPrimitive` abstract operation\n// https://tc39.es/ecma262/#sec-toprimitive\nmodule.exports = function (input, pref) {\n  if (!isObject(input) || isSymbol(input)) return input;\n  var exoticToPrim = getMethod(input, TO_PRIMITIVE);\n  var result;\n  if (exoticToPrim) {\n    if (pref === undefined) pref = 'default';\n    result = call(exoticToPrim, input, pref);\n    if (!isObject(result) || isSymbol(result)) return result;\n    throw new $TypeError(\"Can't convert object to primitive value\");\n  }\n  if (pref === undefined) pref = 'number';\n  return ordinaryToPrimitive(input, pref);\n};\n", "'use strict';\nvar toPrimitive = require('../internals/to-primitive');\nvar isSymbol = require('../internals/is-symbol');\n\n// `ToPropertyKey` abstract operation\n// https://tc39.es/ecma262/#sec-topropertykey\nmodule.exports = function (argument) {\n  var key = toPrimitive(argument, 'string');\n  return isSymbol(key) ? key : key + '';\n};\n", "'use strict';\nvar globalThis = require('../internals/global-this');\nvar isObject = require('../internals/is-object');\n\nvar document = globalThis.document;\n// typeof document.createElement is 'object' in old IE\nvar EXISTS = isObject(document) && isObject(document.createElement);\n\nmodule.exports = function (it) {\n  return EXISTS ? document.createElement(it) : {};\n};\n", "'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar fails = require('../internals/fails');\nvar createElement = require('../internals/document-create-element');\n\n// Thanks to IE8 for its funny defineProperty\nmodule.exports = !DESCRIPTORS && !fails(function () {\n  // eslint-disable-next-line es/no-object-defineproperty -- required for testing\n  return Object.defineProperty(createElement('div'), 'a', {\n    get: function () { return 7; }\n  }).a !== 7;\n});\n", "'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar call = require('../internals/function-call');\nvar propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar toPropertyKey = require('../internals/to-property-key');\nvar hasOwn = require('../internals/has-own-property');\nvar IE8_DOM_DEFINE = require('../internals/ie8-dom-define');\n\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n// `Object.getOwnPropertyDescriptor` method\n// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor\nexports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {\n  O = toIndexedObject(O);\n  P = toPropertyKey(P);\n  if (IE8_DOM_DEFINE) try {\n    return $getOwnPropertyDescriptor(O, P);\n  } catch (error) { /* empty */ }\n  if (hasOwn(O, P)) return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);\n};\n", "'use strict';\nvar fails = require('../internals/fails');\nvar isCallable = require('../internals/is-callable');\n\nvar replacement = /#|\\.prototype\\./;\n\nvar isForced = function (feature, detection) {\n  var value = data[normalize(feature)];\n  return value === POLYFILL ? true\n    : value === NATIVE ? false\n    : isCallable(detection) ? fails(detection)\n    : !!detection;\n};\n\nvar normalize = isForced.normalize = function (string) {\n  return String(string).replace(replacement, '.').toLowerCase();\n};\n\nvar data = isForced.data = {};\nvar NATIVE = isForced.NATIVE = 'N';\nvar POLYFILL = isForced.POLYFILL = 'P';\n\nmodule.exports = isForced;\n", "'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this-clause');\nvar aCallable = require('../internals/a-callable');\nvar NATIVE_BIND = require('../internals/function-bind-native');\n\nvar bind = uncurryThis(uncurryThis.bind);\n\n// optional / simple context binding\nmodule.exports = function (fn, that) {\n  aCallable(fn);\n  return that === undefined ? fn : NATIVE_BIND ? bind(fn, that) : function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n", "'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar fails = require('../internals/fails');\n\n// V8 ~ Chrome 36-\n// https://bugs.chromium.org/p/v8/issues/detail?id=3334\nmodule.exports = DESCRIPTORS && fails(function () {\n  // eslint-disable-next-line es/no-object-defineproperty -- required for testing\n  return Object.defineProperty(function () { /* empty */ }, 'prototype', {\n    value: 42,\n    writable: false\n  }).prototype !== 42;\n});\n", "'use strict';\nvar isObject = require('../internals/is-object');\n\nvar $String = String;\nvar $TypeError = TypeError;\n\n// `Assert: Type(argument) is Object`\nmodule.exports = function (argument) {\n  if (isObject(argument)) return argument;\n  throw new $TypeError($String(argument) + ' is not an object');\n};\n", "'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar IE8_DOM_DEFINE = require('../internals/ie8-dom-define');\nvar V8_PROTOTYPE_DEFINE_BUG = require('../internals/v8-prototype-define-bug');\nvar anObject = require('../internals/an-object');\nvar toPropertyKey = require('../internals/to-property-key');\n\nvar $TypeError = TypeError;\n// eslint-disable-next-line es/no-object-defineproperty -- safe\nvar $defineProperty = Object.defineProperty;\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar ENUMERABLE = 'enumerable';\nvar CONFIGURABLE = 'configurable';\nvar WRITABLE = 'writable';\n\n// `Object.defineProperty` method\n// https://tc39.es/ecma262/#sec-object.defineproperty\nexports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPropertyKey(P);\n  anObject(Attributes);\n  if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {\n    var current = $getOwnPropertyDescriptor(O, P);\n    if (current && current[WRITABLE]) {\n      O[P] = Attributes.value;\n      Attributes = {\n        configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],\n        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],\n        writable: false\n      };\n    }\n  } return $defineProperty(O, P, Attributes);\n} : $defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPropertyKey(P);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return $defineProperty(O, P, Attributes);\n  } catch (error) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw new $TypeError('Accessors not supported');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n", "'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar definePropertyModule = require('../internals/object-define-property');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\n\nmodule.exports = DESCRIPTORS ? function (object, key, value) {\n  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n", "'use strict';\nvar globalThis = require('../internals/global-this');\nvar apply = require('../internals/function-apply');\nvar uncurryThis = require('../internals/function-uncurry-this-clause');\nvar isCallable = require('../internals/is-callable');\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar isForced = require('../internals/is-forced');\nvar path = require('../internals/path');\nvar bind = require('../internals/function-bind-context');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar hasOwn = require('../internals/has-own-property');\n// add debugging info\nrequire('../internals/shared-store');\n\nvar wrapConstructor = function (NativeConstructor) {\n  var Wrapper = function (a, b, c) {\n    if (this instanceof Wrapper) {\n      switch (arguments.length) {\n        case 0: return new NativeConstructor();\n        case 1: return new NativeConstructor(a);\n        case 2: return new NativeConstructor(a, b);\n      } return new NativeConstructor(a, b, c);\n    } return apply(NativeConstructor, this, arguments);\n  };\n  Wrapper.prototype = NativeConstructor.prototype;\n  return Wrapper;\n};\n\n/*\n  options.target         - name of the target object\n  options.global         - target is the global object\n  options.stat           - export as static methods of target\n  options.proto          - export as prototype methods of target\n  options.real           - real prototype method for the `pure` version\n  options.forced         - export even if the native feature is available\n  options.bind           - bind methods to the target, required for the `pure` version\n  options.wrap           - wrap constructors to preventing global pollution, required for the `pure` version\n  options.unsafe         - use the simple assignment of property instead of delete + defineProperty\n  options.sham           - add a flag to not completely full polyfills\n  options.enumerable     - export as enumerable property\n  options.dontCallGetSet - prevent calling a getter on target\n  options.name           - the .name of the function if it does not match the key\n*/\nmodule.exports = function (options, source) {\n  var TARGET = options.target;\n  var GLOBAL = options.global;\n  var STATIC = options.stat;\n  var PROTO = options.proto;\n\n  var nativeSource = GLOBAL ? globalThis : STATIC ? globalThis[TARGET] : globalThis[TARGET] && globalThis[TARGET].prototype;\n\n  var target = GLOBAL ? path : path[TARGET] || createNonEnumerableProperty(path, TARGET, {})[TARGET];\n  var targetPrototype = target.prototype;\n\n  var FORCED, USE_NATIVE, VIRTUAL_PROTOTYPE;\n  var key, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;\n\n  for (key in source) {\n    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);\n    // contains in native\n    USE_NATIVE = !FORCED && nativeSource && hasOwn(nativeSource, key);\n\n    targetProperty = target[key];\n\n    if (USE_NATIVE) if (options.dontCallGetSet) {\n      descriptor = getOwnPropertyDescriptor(nativeSource, key);\n      nativeProperty = descriptor && descriptor.value;\n    } else nativeProperty = nativeSource[key];\n\n    // export native or implementation\n    sourceProperty = (USE_NATIVE && nativeProperty) ? nativeProperty : source[key];\n\n    if (!FORCED && !PROTO && typeof targetProperty == typeof sourceProperty) continue;\n\n    // bind methods to global for calling from export context\n    if (options.bind && USE_NATIVE) resultProperty = bind(sourceProperty, globalThis);\n    // wrap global constructors for prevent changes in this version\n    else if (options.wrap && USE_NATIVE) resultProperty = wrapConstructor(sourceProperty);\n    // make static versions for prototype methods\n    else if (PROTO && isCallable(sourceProperty)) resultProperty = uncurryThis(sourceProperty);\n    // default case\n    else resultProperty = sourceProperty;\n\n    // add a flag to not completely full polyfills\n    if (options.sham || (sourceProperty && sourceProperty.sham) || (targetProperty && targetProperty.sham)) {\n      createNonEnumerableProperty(resultProperty, 'sham', true);\n    }\n\n    createNonEnumerableProperty(target, key, resultProperty);\n\n    if (PROTO) {\n      VIRTUAL_PROTOTYPE = TARGET + 'Prototype';\n      if (!hasOwn(path, VIRTUAL_PROTOTYPE)) {\n        createNonEnumerableProperty(path, VIRTUAL_PROTOTYPE, {});\n      }\n      // export virtual prototype methods\n      createNonEnumerableProperty(path[VIRTUAL_PROTOTYPE], key, sourceProperty);\n      // export real prototype methods\n      if (options.real && targetPrototype && (FORCED || !targetPrototype[key])) {\n        createNonEnumerableProperty(targetPrototype, key, sourceProperty);\n      }\n    }\n  }\n};\n", "'use strict';\nvar shared = require('../internals/shared');\nvar uid = require('../internals/uid');\n\nvar keys = shared('keys');\n\nmodule.exports = function (key) {\n  return keys[key] || (keys[key] = uid(key));\n};\n", "'use strict';\nvar fails = require('../internals/fails');\n\nmodule.exports = !fails(function () {\n  function F() { /* empty */ }\n  F.prototype.constructor = null;\n  // eslint-disable-next-line es/no-object-getprototypeof -- required for testing\n  return Object.getPrototypeOf(new F()) !== F.prototype;\n});\n", "'use strict';\nvar hasOwn = require('../internals/has-own-property');\nvar isCallable = require('../internals/is-callable');\nvar toObject = require('../internals/to-object');\nvar sharedKey = require('../internals/shared-key');\nvar CORRECT_PROTOTYPE_GETTER = require('../internals/correct-prototype-getter');\n\nvar IE_PROTO = sharedKey('IE_PROTO');\nvar $Object = Object;\nvar ObjectPrototype = $Object.prototype;\n\n// `Object.getPrototypeOf` method\n// https://tc39.es/ecma262/#sec-object.getprototypeof\n// eslint-disable-next-line es/no-object-getprototypeof -- safe\nmodule.exports = CORRECT_PROTOTYPE_GETTER ? $Object.getPrototypeOf : function (O) {\n  var object = toObject(O);\n  if (hasOwn(object, IE_PROTO)) return object[IE_PROTO];\n  var constructor = object.constructor;\n  if (isCallable(constructor) && object instanceof constructor) {\n    return constructor.prototype;\n  } return object instanceof $Object ? ObjectPrototype : null;\n};\n", "'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar aCallable = require('../internals/a-callable');\n\nmodule.exports = function (object, key, method) {\n  try {\n    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\n    return uncurryThis(aCallable(Object.getOwnPropertyDescriptor(object, key)[method]));\n  } catch (error) { /* empty */ }\n};\n", "'use strict';\nvar isObject = require('../internals/is-object');\n\nmodule.exports = function (argument) {\n  return isObject(argument) || argument === null;\n};\n", "'use strict';\nvar isPossiblePrototype = require('../internals/is-possible-prototype');\n\nvar $String = String;\nvar $TypeError = TypeError;\n\nmodule.exports = function (argument) {\n  if (isPossiblePrototype(argument)) return argument;\n  throw new $TypeError(\"Can't set \" + $String(argument) + ' as a prototype');\n};\n", "'use strict';\n/* eslint-disable no-proto -- safe */\nvar uncurryThisAccessor = require('../internals/function-uncurry-this-accessor');\nvar isObject = require('../internals/is-object');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar aPossiblePrototype = require('../internals/a-possible-prototype');\n\n// `Object.setPrototypeOf` method\n// https://tc39.es/ecma262/#sec-object.setprototypeof\n// Works with __proto__ only. Old v8 can't work with null proto objects.\n// eslint-disable-next-line es/no-object-setprototypeof -- safe\nmodule.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {\n  var CORRECT_SETTER = false;\n  var test = {};\n  var setter;\n  try {\n    setter = uncurryThisAccessor(Object.prototype, '__proto__', 'set');\n    setter(test, []);\n    CORRECT_SETTER = test instanceof Array;\n  } catch (error) { /* empty */ }\n  return function setPrototypeOf(O, proto) {\n    requireObjectCoercible(O);\n    aPossiblePrototype(proto);\n    if (!isObject(O)) return O;\n    if (CORRECT_SETTER) setter(O, proto);\n    else O.__proto__ = proto;\n    return O;\n  };\n}() : undefined);\n", "'use strict';\nvar ceil = Math.ceil;\nvar floor = Math.floor;\n\n// `Math.trunc` method\n// https://tc39.es/ecma262/#sec-math.trunc\n// eslint-disable-next-line es/no-math-trunc -- safe\nmodule.exports = Math.trunc || function trunc(x) {\n  var n = +x;\n  return (n > 0 ? floor : ceil)(n);\n};\n", "'use strict';\nvar trunc = require('../internals/math-trunc');\n\n// `ToIntegerOrInfinity` abstract operation\n// https://tc39.es/ecma262/#sec-tointegerorinfinity\nmodule.exports = function (argument) {\n  var number = +argument;\n  // eslint-disable-next-line no-self-compare -- NaN check\n  return number !== number || number === 0 ? 0 : trunc(number);\n};\n", "'use strict';\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\n\nvar max = Math.max;\nvar min = Math.min;\n\n// Helper for a popular repeating case of the spec:\n// Let integer be ? ToInteger(index).\n// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).\nmodule.exports = function (index, length) {\n  var integer = toIntegerOrInfinity(index);\n  return integer < 0 ? max(integer + length, 0) : min(integer, length);\n};\n", "'use strict';\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\n\nvar min = Math.min;\n\n// `ToLength` abstract operation\n// https://tc39.es/ecma262/#sec-tolength\nmodule.exports = function (argument) {\n  var len = toIntegerOrInfinity(argument);\n  return len > 0 ? min(len, 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991\n};\n", "'use strict';\nvar toLength = require('../internals/to-length');\n\n// `LengthOfArrayLike` abstract operation\n// https://tc39.es/ecma262/#sec-lengthofarraylike\nmodule.exports = function (obj) {\n  return toLength(obj.length);\n};\n", "'use strict';\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\n\n// `Array.prototype.{ indexOf, includes }` methods implementation\nvar createMethod = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIndexedObject($this);\n    var length = lengthOfArrayLike(O);\n    if (length === 0) return !IS_INCLUDES && -1;\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare -- NaN check\n    if (IS_INCLUDES && el !== el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare -- NaN check\n      if (value !== value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) {\n      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.includes` method\n  // https://tc39.es/ecma262/#sec-array.prototype.includes\n  includes: createMethod(true),\n  // `Array.prototype.indexOf` method\n  // https://tc39.es/ecma262/#sec-array.prototype.indexof\n  indexOf: createMethod(false)\n};\n", "'use strict';\nmodule.exports = {};\n", "'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar hasOwn = require('../internals/has-own-property');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar indexOf = require('../internals/array-includes').indexOf;\nvar hiddenKeys = require('../internals/hidden-keys');\n\nvar push = uncurryThis([].push);\n\nmodule.exports = function (object, names) {\n  var O = toIndexedObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (hasOwn(O, key = names[i++])) {\n    ~indexOf(result, key) || push(result, key);\n  }\n  return result;\n};\n", "'use strict';\n// IE8- don't enum bug keys\nmodule.exports = [\n  'constructor',\n  'hasOwnProperty',\n  'isPrototypeOf',\n  'propertyIsEnumerable',\n  'toLocaleString',\n  'toString',\n  'valueOf'\n];\n", "'use strict';\nvar internalObjectKeys = require('../internals/object-keys-internal');\nvar enumBugKeys = require('../internals/enum-bug-keys');\n\nvar hiddenKeys = enumBugKeys.concat('length', 'prototype');\n\n// `Object.getOwnPropertyNames` method\n// https://tc39.es/ecma262/#sec-object.getownpropertynames\n// eslint-disable-next-line es/no-object-getownpropertynames -- safe\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return internalObjectKeys(O, hiddenKeys);\n};\n", "'use strict';\n// eslint-disable-next-line es/no-object-getownpropertysymbols -- safe\nexports.f = Object.getOwnPropertySymbols;\n", "'use strict';\nvar getBuiltIn = require('../internals/get-built-in');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar getOwnPropertyNamesModule = require('../internals/object-get-own-property-names');\nvar getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');\nvar anObject = require('../internals/an-object');\n\nvar concat = uncurryThis([].concat);\n\n// all object keys, includes non-enumerable and symbols\nmodule.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {\n  var keys = getOwnPropertyNamesModule.f(anObject(it));\n  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;\n  return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;\n};\n", "'use strict';\nvar hasOwn = require('../internals/has-own-property');\nvar ownKeys = require('../internals/own-keys');\nvar getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');\nvar definePropertyModule = require('../internals/object-define-property');\n\nmodule.exports = function (target, source, exceptions) {\n  var keys = ownKeys(source);\n  var defineProperty = definePropertyModule.f;\n  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    if (!hasOwn(target, key) && !(exceptions && hasOwn(exceptions, key))) {\n      defineProperty(target, key, getOwnPropertyDescriptor(source, key));\n    }\n  }\n};\n", "'use strict';\nvar internalObjectKeys = require('../internals/object-keys-internal');\nvar enumBugKeys = require('../internals/enum-bug-keys');\n\n// `Object.keys` method\n// https://tc39.es/ecma262/#sec-object.keys\n// eslint-disable-next-line es/no-object-keys -- safe\nmodule.exports = Object.keys || function keys(O) {\n  return internalObjectKeys(O, enumBugKeys);\n};\n", "'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar V8_PROTOTYPE_DEFINE_BUG = require('../internals/v8-prototype-define-bug');\nvar definePropertyModule = require('../internals/object-define-property');\nvar anObject = require('../internals/an-object');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar objectKeys = require('../internals/object-keys');\n\n// `Object.defineProperties` method\n// https://tc39.es/ecma262/#sec-object.defineproperties\n// eslint-disable-next-line es/no-object-defineproperties -- safe\nexports.f = DESCRIPTORS && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var props = toIndexedObject(Properties);\n  var keys = objectKeys(Properties);\n  var length = keys.length;\n  var index = 0;\n  var key;\n  while (length > index) definePropertyModule.f(O, key = keys[index++], props[key]);\n  return O;\n};\n", "'use strict';\nvar getBuiltIn = require('../internals/get-built-in');\n\nmodule.exports = getBuiltIn('document', 'documentElement');\n", "'use strict';\n/* global ActiveXObject -- old IE, WSH */\nvar anObject = require('../internals/an-object');\nvar definePropertiesModule = require('../internals/object-define-properties');\nvar enumBugKeys = require('../internals/enum-bug-keys');\nvar hiddenKeys = require('../internals/hidden-keys');\nvar html = require('../internals/html');\nvar documentCreateElement = require('../internals/document-create-element');\nvar sharedKey = require('../internals/shared-key');\n\nvar GT = '>';\nvar LT = '<';\nvar PROTOTYPE = 'prototype';\nvar SCRIPT = 'script';\nvar IE_PROTO = sharedKey('IE_PROTO');\n\nvar EmptyConstructor = function () { /* empty */ };\n\nvar scriptTag = function (content) {\n  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;\n};\n\n// Create object with fake `null` prototype: use ActiveX Object with cleared prototype\nvar NullProtoObjectViaActiveX = function (activeXDocument) {\n  activeXDocument.write(scriptTag(''));\n  activeXDocument.close();\n  var temp = activeXDocument.parentWindow.Object;\n  // eslint-disable-next-line no-useless-assignment -- avoid memory leak\n  activeXDocument = null;\n  return temp;\n};\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar NullProtoObjectViaIFrame = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = documentCreateElement('iframe');\n  var JS = 'java' + SCRIPT + ':';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  html.appendChild(iframe);\n  // https://github.com/zloirock/core-js/issues/475\n  iframe.src = String(JS);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(scriptTag('document.F=Object'));\n  iframeDocument.close();\n  return iframeDocument.F;\n};\n\n// Check for document.domain and active x support\n// No need to use active x approach when document.domain is not set\n// see https://github.com/es-shims/es5-shim/issues/150\n// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346\n// avoid IE GC bug\nvar activeXDocument;\nvar NullProtoObject = function () {\n  try {\n    activeXDocument = new ActiveXObject('htmlfile');\n  } catch (error) { /* ignore */ }\n  NullProtoObject = typeof document != 'undefined'\n    ? document.domain && activeXDocument\n      ? NullProtoObjectViaActiveX(activeXDocument) // old IE\n      : NullProtoObjectViaIFrame()\n    : NullProtoObjectViaActiveX(activeXDocument); // WSH\n  var length = enumBugKeys.length;\n  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];\n  return NullProtoObject();\n};\n\nhiddenKeys[IE_PROTO] = true;\n\n// `Object.create` method\n// https://tc39.es/ecma262/#sec-object.create\n// eslint-disable-next-line es/no-object-create -- safe\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    EmptyConstructor[PROTOTYPE] = anObject(O);\n    result = new EmptyConstructor();\n    EmptyConstructor[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = NullProtoObject();\n  return Properties === undefined ? result : definePropertiesModule.f(result, Properties);\n};\n", "'use strict';\nvar isObject = require('../internals/is-object');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\n\n// `InstallErrorCause` abstract operation\n// https://tc39.es/proposal-error-cause/#sec-errorobjects-install-error-cause\nmodule.exports = function (O, options) {\n  if (isObject(options) && 'cause' in options) {\n    createNonEnumerableProperty(O, 'cause', options.cause);\n  }\n};\n", "'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nvar $Error = Error;\nvar replace = uncurryThis(''.replace);\n\nvar TEST = (function (arg) { return String(new $Error(arg).stack); })('zxcasd');\n// eslint-disable-next-line redos/no-vulnerable -- safe\nvar V8_OR_CHAKRA_STACK_ENTRY = /\\n\\s*at [^:]*:[^\\n]*/;\nvar IS_V8_OR_CHAKRA_STACK = V8_OR_CHAKRA_STACK_ENTRY.test(TEST);\n\nmodule.exports = function (stack, dropEntries) {\n  if (IS_V8_OR_CHAKRA_STACK && typeof stack == 'string' && !$Error.prepareStackTrace) {\n    while (dropEntries--) stack = replace(stack, V8_OR_CHAKRA_STACK_ENTRY, '');\n  } return stack;\n};\n", "'use strict';\nvar fails = require('../internals/fails');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\n\nmodule.exports = !fails(function () {\n  var error = new Error('a');\n  if (!('stack' in error)) return true;\n  // eslint-disable-next-line es/no-object-defineproperty -- safe\n  Object.defineProperty(error, 'stack', createPropertyDescriptor(1, 7));\n  return error.stack !== 7;\n});\n", "'use strict';\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar clearErrorStack = require('../internals/error-stack-clear');\nvar ERROR_STACK_INSTALLABLE = require('../internals/error-stack-installable');\n\n// non-standard V8\nvar captureStackTrace = Error.captureStackTrace;\n\nmodule.exports = function (error, C, stack, dropEntries) {\n  if (ERROR_STACK_INSTALLABLE) {\n    if (captureStackTrace) captureStackTrace(error, C);\n    else createNonEnumerableProperty(error, 'stack', clearErrorStack(stack, dropEntries));\n  }\n};\n", "'use strict';\nmodule.exports = {};\n", "'use strict';\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar Iterators = require('../internals/iterators');\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar ArrayPrototype = Array.prototype;\n\n// check on default Array iterator\nmodule.exports = function (it) {\n  return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);\n};\n", "'use strict';\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar test = {};\n\ntest[TO_STRING_TAG] = 'z';\n\nmodule.exports = String(test) === '[object z]';\n", "'use strict';\nvar TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');\nvar isCallable = require('../internals/is-callable');\nvar classofRaw = require('../internals/classof-raw');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar $Object = Object;\n\n// ES3 wrong here\nvar CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) === 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (error) { /* empty */ }\n};\n\n// getting tag from ES6+ `Object.prototype.toString`\nmodule.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {\n  var O, tag, result;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (tag = tryGet(O = $Object(it), TO_STRING_TAG)) == 'string' ? tag\n    // builtinTag case\n    : CORRECT_ARGUMENTS ? classofRaw(O)\n    // ES3 arguments fallback\n    : (result = classofRaw(O)) === 'Object' && isCallable(O.callee) ? 'Arguments' : result;\n};\n", "'use strict';\nvar classof = require('../internals/classof');\nvar getMethod = require('../internals/get-method');\nvar isNullOrUndefined = require('../internals/is-null-or-undefined');\nvar Iterators = require('../internals/iterators');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar ITERATOR = wellKnownSymbol('iterator');\n\nmodule.exports = function (it) {\n  if (!isNullOrUndefined(it)) return getMethod(it, ITERATOR)\n    || getMethod(it, '@@iterator')\n    || Iterators[classof(it)];\n};\n", "'use strict';\nvar call = require('../internals/function-call');\nvar aCallable = require('../internals/a-callable');\nvar anObject = require('../internals/an-object');\nvar tryToString = require('../internals/try-to-string');\nvar getIteratorMethod = require('../internals/get-iterator-method');\n\nvar $TypeError = TypeError;\n\nmodule.exports = function (argument, usingIterator) {\n  var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;\n  if (aCallable(iteratorMethod)) return anObject(call(iteratorMethod, argument));\n  throw new $TypeError(tryToString(argument) + ' is not iterable');\n};\n", "'use strict';\nvar call = require('../internals/function-call');\nvar anObject = require('../internals/an-object');\nvar getMethod = require('../internals/get-method');\n\nmodule.exports = function (iterator, kind, value) {\n  var innerResult, innerError;\n  anObject(iterator);\n  try {\n    innerResult = getMethod(iterator, 'return');\n    if (!innerResult) {\n      if (kind === 'throw') throw value;\n      return value;\n    }\n    innerResult = call(innerResult, iterator);\n  } catch (error) {\n    innerError = true;\n    innerResult = error;\n  }\n  if (kind === 'throw') throw value;\n  if (innerError) throw innerResult;\n  anObject(innerResult);\n  return value;\n};\n", "'use strict';\nvar bind = require('../internals/function-bind-context');\nvar call = require('../internals/function-call');\nvar anObject = require('../internals/an-object');\nvar tryToString = require('../internals/try-to-string');\nvar isArrayIteratorMethod = require('../internals/is-array-iterator-method');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar isPrototypeOf = require('../internals/object-is-prototype-of');\nvar getIterator = require('../internals/get-iterator');\nvar getIteratorMethod = require('../internals/get-iterator-method');\nvar iteratorClose = require('../internals/iterator-close');\n\nvar $TypeError = TypeError;\n\nvar Result = function (stopped, result) {\n  this.stopped = stopped;\n  this.result = result;\n};\n\nvar ResultPrototype = Result.prototype;\n\nmodule.exports = function (iterable, unboundFunction, options) {\n  var that = options && options.that;\n  var AS_ENTRIES = !!(options && options.AS_ENTRIES);\n  var IS_RECORD = !!(options && options.IS_RECORD);\n  var IS_ITERATOR = !!(options && options.IS_ITERATOR);\n  var INTERRUPTED = !!(options && options.INTERRUPTED);\n  var fn = bind(unboundFunction, that);\n  var iterator, iterFn, index, length, result, next, step;\n\n  var stop = function (condition) {\n    if (iterator) iteratorClose(iterator, 'normal', condition);\n    return new Result(true, condition);\n  };\n\n  var callFn = function (value) {\n    if (AS_ENTRIES) {\n      anObject(value);\n      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);\n    } return INTERRUPTED ? fn(value, stop) : fn(value);\n  };\n\n  if (IS_RECORD) {\n    iterator = iterable.iterator;\n  } else if (IS_ITERATOR) {\n    iterator = iterable;\n  } else {\n    iterFn = getIteratorMethod(iterable);\n    if (!iterFn) throw new $TypeError(tryToString(iterable) + ' is not iterable');\n    // optimisation for array iterators\n    if (isArrayIteratorMethod(iterFn)) {\n      for (index = 0, length = lengthOfArrayLike(iterable); length > index; index++) {\n        result = callFn(iterable[index]);\n        if (result && isPrototypeOf(ResultPrototype, result)) return result;\n      } return new Result(false);\n    }\n    iterator = getIterator(iterable, iterFn);\n  }\n\n  next = IS_RECORD ? iterable.next : iterator.next;\n  while (!(step = call(next, iterator)).done) {\n    try {\n      result = callFn(step.value);\n    } catch (error) {\n      iteratorClose(iterator, 'throw', error);\n    }\n    if (typeof result == 'object' && result && isPrototypeOf(ResultPrototype, result)) return result;\n  } return new Result(false);\n};\n", "'use strict';\nvar classof = require('../internals/classof');\n\nvar $String = String;\n\nmodule.exports = function (argument) {\n  if (classof(argument) === 'Symbol') throw new TypeError('Cannot convert a Symbol value to a string');\n  return $String(argument);\n};\n", "'use strict';\nvar toString = require('../internals/to-string');\n\nmodule.exports = function (argument, $default) {\n  return argument === undefined ? arguments.length < 2 ? '' : $default : toString(argument);\n};\n", "'use strict';\nvar $ = require('../internals/export');\nvar isPrototypeOf = require('../internals/object-is-prototype-of');\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\nvar copyConstructorProperties = require('../internals/copy-constructor-properties');\nvar create = require('../internals/object-create');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar installErrorCause = require('../internals/install-error-cause');\nvar installErrorStack = require('../internals/error-stack-install');\nvar iterate = require('../internals/iterate');\nvar normalizeStringArgument = require('../internals/normalize-string-argument');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar $Error = Error;\nvar push = [].push;\n\nvar $AggregateError = function AggregateError(errors, message /* , options */) {\n  var isInstance = isPrototypeOf(AggregateErrorPrototype, this);\n  var that;\n  if (setPrototypeOf) {\n    that = setPrototypeOf(new $Error(), isInstance ? getPrototypeOf(this) : AggregateErrorPrototype);\n  } else {\n    that = isInstance ? this : create(AggregateErrorPrototype);\n    createNonEnumerableProperty(that, TO_STRING_TAG, 'Error');\n  }\n  if (message !== undefined) createNonEnumerableProperty(that, 'message', normalizeStringArgument(message));\n  installErrorStack(that, $AggregateError, that.stack, 1);\n  if (arguments.length > 2) installErrorCause(that, arguments[2]);\n  var errorsArray = [];\n  iterate(errors, push, { that: errorsArray });\n  createNonEnumerableProperty(that, 'errors', errorsArray);\n  return that;\n};\n\nif (setPrototypeOf) setPrototypeOf($AggregateError, $Error);\nelse copyConstructorProperties($AggregateError, $Error, { name: true });\n\nvar AggregateErrorPrototype = $AggregateError.prototype = create($Error.prototype, {\n  constructor: createPropertyDescriptor(1, $AggregateError),\n  message: createPropertyDescriptor(1, ''),\n  name: createPropertyDescriptor(1, 'AggregateError')\n});\n\n// `AggregateError` constructor\n// https://tc39.es/ecma262/#sec-aggregate-error-constructor\n$({ global: true, constructor: true, arity: 2 }, {\n  AggregateError: $AggregateError\n});\n", "'use strict';\n// TODO: Remove this module from `core-js@4` since it's replaced to module below\nrequire('../modules/es.aggregate-error.constructor');\n", "'use strict';\nmodule.exports = function () { /* empty */ };\n", "'use strict';\nvar globalThis = require('../internals/global-this');\nvar isCallable = require('../internals/is-callable');\n\nvar WeakMap = globalThis.WeakMap;\n\nmodule.exports = isCallable(WeakMap) && /native code/.test(String(WeakMap));\n", "'use strict';\nvar NATIVE_WEAK_MAP = require('../internals/weak-map-basic-detection');\nvar globalThis = require('../internals/global-this');\nvar isObject = require('../internals/is-object');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar hasOwn = require('../internals/has-own-property');\nvar shared = require('../internals/shared-store');\nvar sharedKey = require('../internals/shared-key');\nvar hiddenKeys = require('../internals/hidden-keys');\n\nvar OBJECT_ALREADY_INITIALIZED = 'Object already initialized';\nvar TypeError = globalThis.TypeError;\nvar WeakMap = globalThis.WeakMap;\nvar set, get, has;\n\nvar enforce = function (it) {\n  return has(it) ? get(it) : set(it, {});\n};\n\nvar getterFor = function (TYPE) {\n  return function (it) {\n    var state;\n    if (!isObject(it) || (state = get(it)).type !== TYPE) {\n      throw new TypeError('Incompatible receiver, ' + TYPE + ' required');\n    } return state;\n  };\n};\n\nif (NATIVE_WEAK_MAP || shared.state) {\n  var store = shared.state || (shared.state = new WeakMap());\n  /* eslint-disable no-self-assign -- prototype methods protection */\n  store.get = store.get;\n  store.has = store.has;\n  store.set = store.set;\n  /* eslint-enable no-self-assign -- prototype methods protection */\n  set = function (it, metadata) {\n    if (store.has(it)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);\n    metadata.facade = it;\n    store.set(it, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return store.get(it) || {};\n  };\n  has = function (it) {\n    return store.has(it);\n  };\n} else {\n  var STATE = sharedKey('state');\n  hiddenKeys[STATE] = true;\n  set = function (it, metadata) {\n    if (hasOwn(it, STATE)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);\n    metadata.facade = it;\n    createNonEnumerableProperty(it, STATE, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return hasOwn(it, STATE) ? it[STATE] : {};\n  };\n  has = function (it) {\n    return hasOwn(it, STATE);\n  };\n}\n\nmodule.exports = {\n  set: set,\n  get: get,\n  has: has,\n  enforce: enforce,\n  getterFor: getterFor\n};\n", "'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar hasOwn = require('../internals/has-own-property');\n\nvar FunctionPrototype = Function.prototype;\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;\n\nvar EXISTS = hasOwn(FunctionPrototype, 'name');\n// additional protection from minified / mangled / dropped function names\nvar PROPER = EXISTS && (function something() { /* empty */ }).name === 'something';\nvar CONFIGURABLE = EXISTS && (!DESCRIPTORS || (DESCRIPTORS && getDescriptor(FunctionPrototype, 'name').configurable));\n\nmodule.exports = {\n  EXISTS: EXISTS,\n  PROPER: PROPER,\n  CONFIGURABLE: CONFIGURABLE\n};\n", "'use strict';\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\n\nmodule.exports = function (target, key, value, options) {\n  if (options && options.enumerable) target[key] = value;\n  else createNonEnumerableProperty(target, key, value);\n  return target;\n};\n", "'use strict';\nvar fails = require('../internals/fails');\nvar isCallable = require('../internals/is-callable');\nvar isObject = require('../internals/is-object');\nvar create = require('../internals/object-create');\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\nvar defineBuiltIn = require('../internals/define-built-in');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar IS_PURE = require('../internals/is-pure');\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar BUGGY_SAFARI_ITERATORS = false;\n\n// `%IteratorPrototype%` object\n// https://tc39.es/ecma262/#sec-%iteratorprototype%-object\nvar IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;\n\n/* eslint-disable es/no-array-prototype-keys -- safe */\nif ([].keys) {\n  arrayIterator = [].keys();\n  // Safari 8 has buggy iterators w/o `next`\n  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;\n  else {\n    PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));\n    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;\n  }\n}\n\nvar NEW_ITERATOR_PROTOTYPE = !isObject(IteratorPrototype) || fails(function () {\n  var test = {};\n  // FF44- legacy iterators case\n  return IteratorPrototype[ITERATOR].call(test) !== test;\n});\n\nif (NEW_ITERATOR_PROTOTYPE) IteratorPrototype = {};\nelse if (IS_PURE) IteratorPrototype = create(IteratorPrototype);\n\n// `%IteratorPrototype%[@@iterator]()` method\n// https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator\nif (!isCallable(IteratorPrototype[ITERATOR])) {\n  defineBuiltIn(IteratorPrototype, ITERATOR, function () {\n    return this;\n  });\n}\n\nmodule.exports = {\n  IteratorPrototype: IteratorPrototype,\n  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS\n};\n", "'use strict';\nvar TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');\nvar classof = require('../internals/classof');\n\n// `Object.prototype.toString` method implementation\n// https://tc39.es/ecma262/#sec-object.prototype.tostring\nmodule.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {\n  return '[object ' + classof(this) + ']';\n};\n", "'use strict';\nvar TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');\nvar defineProperty = require('../internals/object-define-property').f;\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar hasOwn = require('../internals/has-own-property');\nvar toString = require('../internals/object-to-string');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\n\nmodule.exports = function (it, TAG, STATIC, SET_METHOD) {\n  var target = STATIC ? it : it && it.prototype;\n  if (target) {\n    if (!hasOwn(target, TO_STRING_TAG)) {\n      defineProperty(target, TO_STRING_TAG, { configurable: true, value: TAG });\n    }\n    if (SET_METHOD && !TO_STRING_TAG_SUPPORT) {\n      createNonEnumerableProperty(target, 'toString', toString);\n    }\n  }\n};\n", "'use strict';\nvar IteratorPrototype = require('../internals/iterators-core').IteratorPrototype;\nvar create = require('../internals/object-create');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar setToStringTag = require('../internals/set-to-string-tag');\nvar Iterators = require('../internals/iterators');\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {\n  var TO_STRING_TAG = NAME + ' Iterator';\n  IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next) });\n  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);\n  Iterators[TO_STRING_TAG] = returnThis;\n  return IteratorConstructor;\n};\n", "'use strict';\nvar $ = require('../internals/export');\nvar call = require('../internals/function-call');\nvar IS_PURE = require('../internals/is-pure');\nvar FunctionName = require('../internals/function-name');\nvar isCallable = require('../internals/is-callable');\nvar createIteratorConstructor = require('../internals/iterator-create-constructor');\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\nvar setToStringTag = require('../internals/set-to-string-tag');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar defineBuiltIn = require('../internals/define-built-in');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar Iterators = require('../internals/iterators');\nvar IteratorsCore = require('../internals/iterators-core');\n\nvar PROPER_FUNCTION_NAME = FunctionName.PROPER;\nvar CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;\nvar IteratorPrototype = IteratorsCore.IteratorPrototype;\nvar BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;\nvar ITERATOR = wellKnownSymbol('iterator');\nvar KEYS = 'keys';\nvar VALUES = 'values';\nvar ENTRIES = 'entries';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {\n  createIteratorConstructor(IteratorConstructor, NAME, next);\n\n  var getIterationMethod = function (KIND) {\n    if (KIND === DEFAULT && defaultIterator) return defaultIterator;\n    if (!BUGGY_SAFARI_ITERATORS && KIND && KIND in IterablePrototype) return IterablePrototype[KIND];\n\n    switch (KIND) {\n      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };\n      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };\n      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };\n    }\n\n    return function () { return new IteratorConstructor(this); };\n  };\n\n  var TO_STRING_TAG = NAME + ' Iterator';\n  var INCORRECT_VALUES_NAME = false;\n  var IterablePrototype = Iterable.prototype;\n  var nativeIterator = IterablePrototype[ITERATOR]\n    || IterablePrototype['@@iterator']\n    || DEFAULT && IterablePrototype[DEFAULT];\n  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);\n  var anyNativeIterator = NAME === 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;\n  var CurrentIteratorPrototype, methods, KEY;\n\n  // fix native\n  if (anyNativeIterator) {\n    CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));\n    if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {\n      if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {\n        if (setPrototypeOf) {\n          setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);\n        } else if (!isCallable(CurrentIteratorPrototype[ITERATOR])) {\n          defineBuiltIn(CurrentIteratorPrototype, ITERATOR, returnThis);\n        }\n      }\n      // Set @@toStringTag to native iterators\n      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);\n      if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;\n    }\n  }\n\n  // fix Array.prototype.{ values, @@iterator }.name in V8 / FF\n  if (PROPER_FUNCTION_NAME && DEFAULT === VALUES && nativeIterator && nativeIterator.name !== VALUES) {\n    if (!IS_PURE && CONFIGURABLE_FUNCTION_NAME) {\n      createNonEnumerableProperty(IterablePrototype, 'name', VALUES);\n    } else {\n      INCORRECT_VALUES_NAME = true;\n      defaultIterator = function values() { return call(nativeIterator, this); };\n    }\n  }\n\n  // export additional methods\n  if (DEFAULT) {\n    methods = {\n      values: getIterationMethod(VALUES),\n      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),\n      entries: getIterationMethod(ENTRIES)\n    };\n    if (FORCED) for (KEY in methods) {\n      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {\n        defineBuiltIn(IterablePrototype, KEY, methods[KEY]);\n      }\n    } else $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);\n  }\n\n  // define iterator\n  if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {\n    defineBuiltIn(IterablePrototype, ITERATOR, defaultIterator, { name: DEFAULT });\n  }\n  Iterators[NAME] = defaultIterator;\n\n  return methods;\n};\n", "'use strict';\n// `CreateIterResultObject` abstract operation\n// https://tc39.es/ecma262/#sec-createiterresultobject\nmodule.exports = function (value, done) {\n  return { value: value, done: done };\n};\n", "'use strict';\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar addToUnscopables = require('../internals/add-to-unscopables');\nvar Iterators = require('../internals/iterators');\nvar InternalStateModule = require('../internals/internal-state');\nvar defineProperty = require('../internals/object-define-property').f;\nvar defineIterator = require('../internals/iterator-define');\nvar createIterResultObject = require('../internals/create-iter-result-object');\nvar IS_PURE = require('../internals/is-pure');\nvar DESCRIPTORS = require('../internals/descriptors');\n\nvar ARRAY_ITERATOR = 'Array Iterator';\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);\n\n// `Array.prototype.entries` method\n// https://tc39.es/ecma262/#sec-array.prototype.entries\n// `Array.prototype.keys` method\n// https://tc39.es/ecma262/#sec-array.prototype.keys\n// `Array.prototype.values` method\n// https://tc39.es/ecma262/#sec-array.prototype.values\n// `Array.prototype[@@iterator]` method\n// https://tc39.es/ecma262/#sec-array.prototype-@@iterator\n// `CreateArrayIterator` internal method\n// https://tc39.es/ecma262/#sec-createarrayiterator\nmodule.exports = defineIterator(Array, 'Array', function (iterated, kind) {\n  setInternalState(this, {\n    type: ARRAY_ITERATOR,\n    target: toIndexedObject(iterated), // target\n    index: 0,                          // next index\n    kind: kind                         // kind\n  });\n// `%ArrayIteratorPrototype%.next` method\n// https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next\n}, function () {\n  var state = getInternalState(this);\n  var target = state.target;\n  var index = state.index++;\n  if (!target || index >= target.length) {\n    state.target = null;\n    return createIterResultObject(undefined, true);\n  }\n  switch (state.kind) {\n    case 'keys': return createIterResultObject(index, false);\n    case 'values': return createIterResultObject(target[index], false);\n  } return createIterResultObject([index, target[index]], false);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values%\n// https://tc39.es/ecma262/#sec-createunmappedargumentsobject\n// https://tc39.es/ecma262/#sec-createmappedargumentsobject\nvar values = Iterators.Arguments = Iterators.Array;\n\n// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n\n// V8 ~ Chrome 45- bug\nif (!IS_PURE && DESCRIPTORS && values.name !== 'values') try {\n  defineProperty(values, 'name', { value: 'values' });\n} catch (error) { /* empty */ }\n", "// empty\n", "'use strict';\n/* global Bun, Deno -- detection */\nvar globalThis = require('../internals/global-this');\nvar userAgent = require('../internals/environment-user-agent');\nvar classof = require('../internals/classof-raw');\n\nvar userAgentStartsWith = function (string) {\n  return userAgent.slice(0, string.length) === string;\n};\n\nmodule.exports = (function () {\n  if (userAgentStartsWith('Bun/')) return 'BUN';\n  if (userAgentStartsWith('Cloudflare-Workers')) return 'CLOUDFLARE';\n  if (userAgentStartsWith('Deno/')) return 'DENO';\n  if (userAgentStartsWith('Node.js/')) return 'NODE';\n  if (globalThis.Bun && typeof Bun.version == 'string') return 'BUN';\n  if (globalThis.Deno && typeof Deno.version == 'object') return 'DENO';\n  if (classof(globalThis.process) === 'process') return 'NODE';\n  if (globalThis.window && globalThis.document) return 'BROWSER';\n  return 'REST';\n})();\n", "'use strict';\nvar ENVIRONMENT = require('../internals/environment');\n\nmodule.exports = ENVIRONMENT === 'NODE';\n", "'use strict';\nvar defineProperty = require('../internals/object-define-property');\n\nmodule.exports = function (target, name, descriptor) {\n  return defineProperty.f(target, name, descriptor);\n};\n", "'use strict';\nvar getBuiltIn = require('../internals/get-built-in');\nvar defineBuiltInAccessor = require('../internals/define-built-in-accessor');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar DESCRIPTORS = require('../internals/descriptors');\n\nvar SPECIES = wellKnownSymbol('species');\n\nmodule.exports = function (CONSTRUCTOR_NAME) {\n  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);\n\n  if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {\n    defineBuiltInAccessor(Constructor, SPECIES, {\n      configurable: true,\n      get: function () { return this; }\n    });\n  }\n};\n", "'use strict';\nvar isPrototypeOf = require('../internals/object-is-prototype-of');\n\nvar $TypeError = TypeError;\n\nmodule.exports = function (it, Prototype) {\n  if (isPrototypeOf(Prototype, it)) return it;\n  throw new $TypeError('Incorrect invocation');\n};\n", "'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar isCallable = require('../internals/is-callable');\nvar store = require('../internals/shared-store');\n\nvar functionToString = uncurryThis(Function.toString);\n\n// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper\nif (!isCallable(store.inspectSource)) {\n  store.inspectSource = function (it) {\n    return functionToString(it);\n  };\n}\n\nmodule.exports = store.inspectSource;\n", "'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar fails = require('../internals/fails');\nvar isCallable = require('../internals/is-callable');\nvar classof = require('../internals/classof');\nvar getBuiltIn = require('../internals/get-built-in');\nvar inspectSource = require('../internals/inspect-source');\n\nvar noop = function () { /* empty */ };\nvar construct = getBuiltIn('Reflect', 'construct');\nvar constructorRegExp = /^\\s*(?:class|function)\\b/;\nvar exec = uncurryThis(constructorRegExp.exec);\nvar INCORRECT_TO_STRING = !constructorRegExp.test(noop);\n\nvar isConstructorModern = function isConstructor(argument) {\n  if (!isCallable(argument)) return false;\n  try {\n    construct(noop, [], argument);\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nvar isConstructorLegacy = function isConstructor(argument) {\n  if (!isCallable(argument)) return false;\n  switch (classof(argument)) {\n    case 'AsyncFunction':\n    case 'GeneratorFunction':\n    case 'AsyncGeneratorFunction': return false;\n  }\n  try {\n    // we can't check .prototype since constructors produced by .bind haven't it\n    // `Function#toString` throws on some built-it function in some legacy engines\n    // (for example, `DOMQuad` and similar in FF41-)\n    return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource(argument));\n  } catch (error) {\n    return true;\n  }\n};\n\nisConstructorLegacy.sham = true;\n\n// `IsConstructor` abstract operation\n// https://tc39.es/ecma262/#sec-isconstructor\nmodule.exports = !construct || fails(function () {\n  var called;\n  return isConstructorModern(isConstructorModern.call)\n    || !isConstructorModern(Object)\n    || !isConstructorModern(function () { called = true; })\n    || called;\n}) ? isConstructorLegacy : isConstructorModern;\n", "'use strict';\nvar isConstructor = require('../internals/is-constructor');\nvar tryToString = require('../internals/try-to-string');\n\nvar $TypeError = TypeError;\n\n// `Assert: IsConstructor(argument) is true`\nmodule.exports = function (argument) {\n  if (isConstructor(argument)) return argument;\n  throw new $TypeError(tryToString(argument) + ' is not a constructor');\n};\n", "'use strict';\nvar anObject = require('../internals/an-object');\nvar aConstructor = require('../internals/a-constructor');\nvar isNullOrUndefined = require('../internals/is-null-or-undefined');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar SPECIES = wellKnownSymbol('species');\n\n// `SpeciesConstructor` abstract operation\n// https://tc39.es/ecma262/#sec-speciesconstructor\nmodule.exports = function (O, defaultConstructor) {\n  var C = anObject(O).constructor;\n  var S;\n  return C === undefined || isNullOrUndefined(S = anObject(C)[SPECIES]) ? defaultConstructor : aConstructor(S);\n};\n", "'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nmodule.exports = uncurryThis([].slice);\n", "'use strict';\nvar $TypeError = TypeError;\n\nmodule.exports = function (passed, required) {\n  if (passed < required) throw new $TypeError('Not enough arguments');\n  return passed;\n};\n", "'use strict';\nvar userAgent = require('../internals/environment-user-agent');\n\n// eslint-disable-next-line redos/no-vulnerable -- safe\nmodule.exports = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent);\n", "'use strict';\nvar globalThis = require('../internals/global-this');\nvar apply = require('../internals/function-apply');\nvar bind = require('../internals/function-bind-context');\nvar isCallable = require('../internals/is-callable');\nvar hasOwn = require('../internals/has-own-property');\nvar fails = require('../internals/fails');\nvar html = require('../internals/html');\nvar arraySlice = require('../internals/array-slice');\nvar createElement = require('../internals/document-create-element');\nvar validateArgumentsLength = require('../internals/validate-arguments-length');\nvar IS_IOS = require('../internals/environment-is-ios');\nvar IS_NODE = require('../internals/environment-is-node');\n\nvar set = globalThis.setImmediate;\nvar clear = globalThis.clearImmediate;\nvar process = globalThis.process;\nvar Dispatch = globalThis.Dispatch;\nvar Function = globalThis.Function;\nvar MessageChannel = globalThis.MessageChannel;\nvar String = globalThis.String;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar $location, defer, channel, port;\n\nfails(function () {\n  // Deno throws a ReferenceError on `location` access without `--location` flag\n  $location = globalThis.location;\n});\n\nvar run = function (id) {\n  if (hasOwn(queue, id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\n\nvar runner = function (id) {\n  return function () {\n    run(id);\n  };\n};\n\nvar eventListener = function (event) {\n  run(event.data);\n};\n\nvar globalPostMessageDefer = function (id) {\n  // old engines have not location.origin\n  globalThis.postMessage(String(id), $location.protocol + '//' + $location.host);\n};\n\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!set || !clear) {\n  set = function setImmediate(handler) {\n    validateArgumentsLength(arguments.length, 1);\n    var fn = isCallable(handler) ? handler : Function(handler);\n    var args = arraySlice(arguments, 1);\n    queue[++counter] = function () {\n      apply(fn, undefined, args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clear = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (IS_NODE) {\n    defer = function (id) {\n      process.nextTick(runner(id));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(runner(id));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  // except iOS - https://github.com/zloirock/core-js/issues/624\n  } else if (MessageChannel && !IS_IOS) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = eventListener;\n    defer = bind(port.postMessage, port);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (\n    globalThis.addEventListener &&\n    isCallable(globalThis.postMessage) &&\n    !globalThis.importScripts &&\n    $location && $location.protocol !== 'file:' &&\n    !fails(globalPostMessageDefer)\n  ) {\n    defer = globalPostMessageDefer;\n    globalThis.addEventListener('message', eventListener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in createElement('script')) {\n    defer = function (id) {\n      html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(runner(id), 0);\n    };\n  }\n}\n\nmodule.exports = {\n  set: set,\n  clear: clear\n};\n", "'use strict';\nvar globalThis = require('../internals/global-this');\nvar DESCRIPTORS = require('../internals/descriptors');\n\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n// Avoid NodeJS experimental warning\nmodule.exports = function (name) {\n  if (!DESCRIPTORS) return globalThis[name];\n  var descriptor = getOwnPropertyDescriptor(globalThis, name);\n  return descriptor && descriptor.value;\n};\n", "'use strict';\nvar Queue = function () {\n  this.head = null;\n  this.tail = null;\n};\n\nQueue.prototype = {\n  add: function (item) {\n    var entry = { item: item, next: null };\n    var tail = this.tail;\n    if (tail) tail.next = entry;\n    else this.head = entry;\n    this.tail = entry;\n  },\n  get: function () {\n    var entry = this.head;\n    if (entry) {\n      var next = this.head = entry.next;\n      if (next === null) this.tail = null;\n      return entry.item;\n    }\n  }\n};\n\nmodule.exports = Queue;\n", "'use strict';\nvar userAgent = require('../internals/environment-user-agent');\n\nmodule.exports = /ipad|iphone|ipod/i.test(userAgent) && typeof Pebble != 'undefined';\n", "'use strict';\nvar userAgent = require('../internals/environment-user-agent');\n\nmodule.exports = /web0s(?!.*chrome)/i.test(userAgent);\n", "'use strict';\nvar globalThis = require('../internals/global-this');\nvar safeGetBuiltIn = require('../internals/safe-get-built-in');\nvar bind = require('../internals/function-bind-context');\nvar macrotask = require('../internals/task').set;\nvar Queue = require('../internals/queue');\nvar IS_IOS = require('../internals/environment-is-ios');\nvar IS_IOS_PEBBLE = require('../internals/environment-is-ios-pebble');\nvar IS_WEBOS_WEBKIT = require('../internals/environment-is-webos-webkit');\nvar IS_NODE = require('../internals/environment-is-node');\n\nvar MutationObserver = globalThis.MutationObserver || globalThis.WebKitMutationObserver;\nvar document = globalThis.document;\nvar process = globalThis.process;\nvar Promise = globalThis.Promise;\nvar microtask = safeGetBuiltIn('queueMicrotask');\nvar notify, toggle, node, promise, then;\n\n// modern engines have queueMicrotask method\nif (!microtask) {\n  var queue = new Queue();\n\n  var flush = function () {\n    var parent, fn;\n    if (IS_NODE && (parent = process.domain)) parent.exit();\n    while (fn = queue.get()) try {\n      fn();\n    } catch (error) {\n      if (queue.head) notify();\n      throw error;\n    }\n    if (parent) parent.enter();\n  };\n\n  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339\n  // also except WebOS Webkit https://github.com/zloirock/core-js/issues/898\n  if (!IS_IOS && !IS_NODE && !IS_WEBOS_WEBKIT && MutationObserver && document) {\n    toggle = true;\n    node = document.createTextNode('');\n    new MutationObserver(flush).observe(node, { characterData: true });\n    notify = function () {\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if (!IS_IOS_PEBBLE && Promise && Promise.resolve) {\n    // Promise.resolve without an argument throws an error in LG WebOS 2\n    promise = Promise.resolve(undefined);\n    // workaround of WebKit ~ iOS Safari 10.1 bug\n    promise.constructor = Promise;\n    then = bind(promise.then, promise);\n    notify = function () {\n      then(flush);\n    };\n  // Node.js without promises\n  } else if (IS_NODE) {\n    notify = function () {\n      process.nextTick(flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessage\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    // `webpack` dev server bug on IE global methods - use bind(fn, global)\n    macrotask = bind(macrotask, globalThis);\n    notify = function () {\n      macrotask(flush);\n    };\n  }\n\n  microtask = function (fn) {\n    if (!queue.head) notify();\n    queue.add(fn);\n  };\n}\n\nmodule.exports = microtask;\n", "'use strict';\nmodule.exports = function (a, b) {\n  try {\n    // eslint-disable-next-line no-console -- safe\n    arguments.length === 1 ? console.error(a) : console.error(a, b);\n  } catch (error) { /* empty */ }\n};\n", "'use strict';\nmodule.exports = function (exec) {\n  try {\n    return { error: false, value: exec() };\n  } catch (error) {\n    return { error: true, value: error };\n  }\n};\n", "'use strict';\nvar globalThis = require('../internals/global-this');\n\nmodule.exports = globalThis.Promise;\n", "'use strict';\nvar globalThis = require('../internals/global-this');\nvar NativePromiseConstructor = require('../internals/promise-native-constructor');\nvar isCallable = require('../internals/is-callable');\nvar isForced = require('../internals/is-forced');\nvar inspectSource = require('../internals/inspect-source');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar ENVIRONMENT = require('../internals/environment');\nvar IS_PURE = require('../internals/is-pure');\nvar V8_VERSION = require('../internals/environment-v8-version');\n\nvar NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;\nvar SPECIES = wellKnownSymbol('species');\nvar SUBCLASSING = false;\nvar NATIVE_PROMISE_REJECTION_EVENT = isCallable(globalThis.PromiseRejectionEvent);\n\nvar FORCED_PROMISE_CONSTRUCTOR = isForced('Promise', function () {\n  var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(NativePromiseConstructor);\n  var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(NativePromiseConstructor);\n  // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=830565\n  // We can't detect it synchronously, so just check versions\n  if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION === 66) return true;\n  // We need Promise#{ catch, finally } in the pure version for preventing prototype pollution\n  if (IS_PURE && !(NativePromisePrototype['catch'] && NativePromisePrototype['finally'])) return true;\n  // We can't use @@species feature detection in V8 since it causes\n  // deoptimization and performance degradation\n  // https://github.com/zloirock/core-js/issues/679\n  if (!V8_VERSION || V8_VERSION < 51 || !/native code/.test(PROMISE_CONSTRUCTOR_SOURCE)) {\n    // Detect correctness of subclassing with @@species support\n    var promise = new NativePromiseConstructor(function (resolve) { resolve(1); });\n    var FakePromise = function (exec) {\n      exec(function () { /* empty */ }, function () { /* empty */ });\n    };\n    var constructor = promise.constructor = {};\n    constructor[SPECIES] = FakePromise;\n    SUBCLASSING = promise.then(function () { /* empty */ }) instanceof FakePromise;\n    if (!SUBCLASSING) return true;\n  // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n  } return !GLOBAL_CORE_JS_PROMISE && (ENVIRONMENT === 'BROWSER' || ENVIRONMENT === 'DENO') && !NATIVE_PROMISE_REJECTION_EVENT;\n});\n\nmodule.exports = {\n  CONSTRUCTOR: FORCED_PROMISE_CONSTRUCTOR,\n  REJECTION_EVENT: NATIVE_PROMISE_REJECTION_EVENT,\n  SUBCLASSING: SUBCLASSING\n};\n", "'use strict';\nvar aCallable = require('../internals/a-callable');\n\nvar $TypeError = TypeError;\n\nvar PromiseCapability = function (C) {\n  var resolve, reject;\n  this.promise = new C(function ($$resolve, $$reject) {\n    if (resolve !== undefined || reject !== undefined) throw new $TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject = $$reject;\n  });\n  this.resolve = aCallable(resolve);\n  this.reject = aCallable(reject);\n};\n\n// `NewPromiseCapability` abstract operation\n// https://tc39.es/ecma262/#sec-newpromisecapability\nmodule.exports.f = function (C) {\n  return new PromiseCapability(C);\n};\n", "'use strict';\nvar $ = require('../internals/export');\nvar IS_PURE = require('../internals/is-pure');\nvar IS_NODE = require('../internals/environment-is-node');\nvar globalThis = require('../internals/global-this');\nvar call = require('../internals/function-call');\nvar defineBuiltIn = require('../internals/define-built-in');\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\nvar setToStringTag = require('../internals/set-to-string-tag');\nvar setSpecies = require('../internals/set-species');\nvar aCallable = require('../internals/a-callable');\nvar isCallable = require('../internals/is-callable');\nvar isObject = require('../internals/is-object');\nvar anInstance = require('../internals/an-instance');\nvar speciesConstructor = require('../internals/species-constructor');\nvar task = require('../internals/task').set;\nvar microtask = require('../internals/microtask');\nvar hostReportErrors = require('../internals/host-report-errors');\nvar perform = require('../internals/perform');\nvar Queue = require('../internals/queue');\nvar InternalStateModule = require('../internals/internal-state');\nvar NativePromiseConstructor = require('../internals/promise-native-constructor');\nvar PromiseConstructorDetection = require('../internals/promise-constructor-detection');\nvar newPromiseCapabilityModule = require('../internals/new-promise-capability');\n\nvar PROMISE = 'Promise';\nvar FORCED_PROMISE_CONSTRUCTOR = PromiseConstructorDetection.CONSTRUCTOR;\nvar NATIVE_PROMISE_REJECTION_EVENT = PromiseConstructorDetection.REJECTION_EVENT;\nvar NATIVE_PROMISE_SUBCLASSING = PromiseConstructorDetection.SUBCLASSING;\nvar getInternalPromiseState = InternalStateModule.getterFor(PROMISE);\nvar setInternalState = InternalStateModule.set;\nvar NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;\nvar PromiseConstructor = NativePromiseConstructor;\nvar PromisePrototype = NativePromisePrototype;\nvar TypeError = globalThis.TypeError;\nvar document = globalThis.document;\nvar process = globalThis.process;\nvar newPromiseCapability = newPromiseCapabilityModule.f;\nvar newGenericPromiseCapability = newPromiseCapability;\n\nvar DISPATCH_EVENT = !!(document && document.createEvent && globalThis.dispatchEvent);\nvar UNHANDLED_REJECTION = 'unhandledrejection';\nvar REJECTION_HANDLED = 'rejectionhandled';\nvar PENDING = 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\nvar HANDLED = 1;\nvar UNHANDLED = 2;\n\nvar Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;\n\n// helpers\nvar isThenable = function (it) {\n  var then;\n  return isObject(it) && isCallable(then = it.then) ? then : false;\n};\n\nvar callReaction = function (reaction, state) {\n  var value = state.value;\n  var ok = state.state === FULFILLED;\n  var handler = ok ? reaction.ok : reaction.fail;\n  var resolve = reaction.resolve;\n  var reject = reaction.reject;\n  var domain = reaction.domain;\n  var result, then, exited;\n  try {\n    if (handler) {\n      if (!ok) {\n        if (state.rejection === UNHANDLED) onHandleUnhandled(state);\n        state.rejection = HANDLED;\n      }\n      if (handler === true) result = value;\n      else {\n        if (domain) domain.enter();\n        result = handler(value); // can throw\n        if (domain) {\n          domain.exit();\n          exited = true;\n        }\n      }\n      if (result === reaction.promise) {\n        reject(new TypeError('Promise-chain cycle'));\n      } else if (then = isThenable(result)) {\n        call(then, result, resolve, reject);\n      } else resolve(result);\n    } else reject(value);\n  } catch (error) {\n    if (domain && !exited) domain.exit();\n    reject(error);\n  }\n};\n\nvar notify = function (state, isReject) {\n  if (state.notified) return;\n  state.notified = true;\n  microtask(function () {\n    var reactions = state.reactions;\n    var reaction;\n    while (reaction = reactions.get()) {\n      callReaction(reaction, state);\n    }\n    state.notified = false;\n    if (isReject && !state.rejection) onUnhandled(state);\n  });\n};\n\nvar dispatchEvent = function (name, promise, reason) {\n  var event, handler;\n  if (DISPATCH_EVENT) {\n    event = document.createEvent('Event');\n    event.promise = promise;\n    event.reason = reason;\n    event.initEvent(name, false, true);\n    globalThis.dispatchEvent(event);\n  } else event = { promise: promise, reason: reason };\n  if (!NATIVE_PROMISE_REJECTION_EVENT && (handler = globalThis['on' + name])) handler(event);\n  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);\n};\n\nvar onUnhandled = function (state) {\n  call(task, globalThis, function () {\n    var promise = state.facade;\n    var value = state.value;\n    var IS_UNHANDLED = isUnhandled(state);\n    var result;\n    if (IS_UNHANDLED) {\n      result = perform(function () {\n        if (IS_NODE) {\n          process.emit('unhandledRejection', value, promise);\n        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;\n      if (result.error) throw result.value;\n    }\n  });\n};\n\nvar isUnhandled = function (state) {\n  return state.rejection !== HANDLED && !state.parent;\n};\n\nvar onHandleUnhandled = function (state) {\n  call(task, globalThis, function () {\n    var promise = state.facade;\n    if (IS_NODE) {\n      process.emit('rejectionHandled', promise);\n    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);\n  });\n};\n\nvar bind = function (fn, state, unwrap) {\n  return function (value) {\n    fn(state, value, unwrap);\n  };\n};\n\nvar internalReject = function (state, value, unwrap) {\n  if (state.done) return;\n  state.done = true;\n  if (unwrap) state = unwrap;\n  state.value = value;\n  state.state = REJECTED;\n  notify(state, true);\n};\n\nvar internalResolve = function (state, value, unwrap) {\n  if (state.done) return;\n  state.done = true;\n  if (unwrap) state = unwrap;\n  try {\n    if (state.facade === value) throw new TypeError(\"Promise can't be resolved itself\");\n    var then = isThenable(value);\n    if (then) {\n      microtask(function () {\n        var wrapper = { done: false };\n        try {\n          call(then, value,\n            bind(internalResolve, wrapper, state),\n            bind(internalReject, wrapper, state)\n          );\n        } catch (error) {\n          internalReject(wrapper, error, state);\n        }\n      });\n    } else {\n      state.value = value;\n      state.state = FULFILLED;\n      notify(state, false);\n    }\n  } catch (error) {\n    internalReject({ done: false }, error, state);\n  }\n};\n\n// constructor polyfill\nif (FORCED_PROMISE_CONSTRUCTOR) {\n  // 25.4.3.1 Promise(executor)\n  PromiseConstructor = function Promise(executor) {\n    anInstance(this, PromisePrototype);\n    aCallable(executor);\n    call(Internal, this);\n    var state = getInternalPromiseState(this);\n    try {\n      executor(bind(internalResolve, state), bind(internalReject, state));\n    } catch (error) {\n      internalReject(state, error);\n    }\n  };\n\n  PromisePrototype = PromiseConstructor.prototype;\n\n  // eslint-disable-next-line no-unused-vars -- required for `.length`\n  Internal = function Promise(executor) {\n    setInternalState(this, {\n      type: PROMISE,\n      done: false,\n      notified: false,\n      parent: false,\n      reactions: new Queue(),\n      rejection: false,\n      state: PENDING,\n      value: null\n    });\n  };\n\n  // `Promise.prototype.then` method\n  // https://tc39.es/ecma262/#sec-promise.prototype.then\n  Internal.prototype = defineBuiltIn(PromisePrototype, 'then', function then(onFulfilled, onRejected) {\n    var state = getInternalPromiseState(this);\n    var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));\n    state.parent = true;\n    reaction.ok = isCallable(onFulfilled) ? onFulfilled : true;\n    reaction.fail = isCallable(onRejected) && onRejected;\n    reaction.domain = IS_NODE ? process.domain : undefined;\n    if (state.state === PENDING) state.reactions.add(reaction);\n    else microtask(function () {\n      callReaction(reaction, state);\n    });\n    return reaction.promise;\n  });\n\n  OwnPromiseCapability = function () {\n    var promise = new Internal();\n    var state = getInternalPromiseState(promise);\n    this.promise = promise;\n    this.resolve = bind(internalResolve, state);\n    this.reject = bind(internalReject, state);\n  };\n\n  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {\n    return C === PromiseConstructor || C === PromiseWrapper\n      ? new OwnPromiseCapability(C)\n      : newGenericPromiseCapability(C);\n  };\n\n  if (!IS_PURE && isCallable(NativePromiseConstructor) && NativePromisePrototype !== Object.prototype) {\n    nativeThen = NativePromisePrototype.then;\n\n    if (!NATIVE_PROMISE_SUBCLASSING) {\n      // make `Promise#then` return a polyfilled `Promise` for native promise-based APIs\n      defineBuiltIn(NativePromisePrototype, 'then', function then(onFulfilled, onRejected) {\n        var that = this;\n        return new PromiseConstructor(function (resolve, reject) {\n          call(nativeThen, that, resolve, reject);\n        }).then(onFulfilled, onRejected);\n      // https://github.com/zloirock/core-js/issues/640\n      }, { unsafe: true });\n    }\n\n    // make `.constructor === Promise` work for native promise-based APIs\n    try {\n      delete NativePromisePrototype.constructor;\n    } catch (error) { /* empty */ }\n\n    // make `instanceof Promise` work for native promise-based APIs\n    if (setPrototypeOf) {\n      setPrototypeOf(NativePromisePrototype, PromisePrototype);\n    }\n  }\n}\n\n$({ global: true, constructor: true, wrap: true, forced: FORCED_PROMISE_CONSTRUCTOR }, {\n  Promise: PromiseConstructor\n});\n\nsetToStringTag(PromiseConstructor, PROMISE, false, true);\nsetSpecies(PROMISE);\n", "'use strict';\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var called = 0;\n  var iteratorWithReturn = {\n    next: function () {\n      return { done: !!called++ };\n    },\n    'return': function () {\n      SAFE_CLOSING = true;\n    }\n  };\n  iteratorWithReturn[ITERATOR] = function () {\n    return this;\n  };\n  // eslint-disable-next-line es/no-array-from, no-throw-literal -- required for testing\n  Array.from(iteratorWithReturn, function () { throw 2; });\n} catch (error) { /* empty */ }\n\nmodule.exports = function (exec, SKIP_CLOSING) {\n  try {\n    if (!SKIP_CLOSING && !SAFE_CLOSING) return false;\n  } catch (error) { return false; } // workaround of old WebKit + `eval` bug\n  var ITERATION_SUPPORT = false;\n  try {\n    var object = {};\n    object[ITERATOR] = function () {\n      return {\n        next: function () {\n          return { done: ITERATION_SUPPORT = true };\n        }\n      };\n    };\n    exec(object);\n  } catch (error) { /* empty */ }\n  return ITERATION_SUPPORT;\n};\n", "'use strict';\nvar NativePromiseConstructor = require('../internals/promise-native-constructor');\nvar checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');\nvar FORCED_PROMISE_CONSTRUCTOR = require('../internals/promise-constructor-detection').CONSTRUCTOR;\n\nmodule.exports = FORCED_PROMISE_CONSTRUCTOR || !checkCorrectnessOfIteration(function (iterable) {\n  NativePromiseConstructor.all(iterable).then(undefined, function () { /* empty */ });\n});\n", "'use strict';\nvar $ = require('../internals/export');\nvar call = require('../internals/function-call');\nvar aCallable = require('../internals/a-callable');\nvar newPromiseCapabilityModule = require('../internals/new-promise-capability');\nvar perform = require('../internals/perform');\nvar iterate = require('../internals/iterate');\nvar PROMISE_STATICS_INCORRECT_ITERATION = require('../internals/promise-statics-incorrect-iteration');\n\n// `Promise.all` method\n// https://tc39.es/ecma262/#sec-promise.all\n$({ target: 'Promise', stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {\n  all: function all(iterable) {\n    var C = this;\n    var capability = newPromiseCapabilityModule.f(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var $promiseResolve = aCallable(C.resolve);\n      var values = [];\n      var counter = 0;\n      var remaining = 1;\n      iterate(iterable, function (promise) {\n        var index = counter++;\n        var alreadyCalled = false;\n        remaining++;\n        call($promiseResolve, C, promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if (result.error) reject(result.value);\n    return capability.promise;\n  }\n});\n", "'use strict';\nvar $ = require('../internals/export');\nvar IS_PURE = require('../internals/is-pure');\nvar FORCED_PROMISE_CONSTRUCTOR = require('../internals/promise-constructor-detection').CONSTRUCTOR;\nvar NativePromiseConstructor = require('../internals/promise-native-constructor');\nvar getBuiltIn = require('../internals/get-built-in');\nvar isCallable = require('../internals/is-callable');\nvar defineBuiltIn = require('../internals/define-built-in');\n\nvar NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;\n\n// `Promise.prototype.catch` method\n// https://tc39.es/ecma262/#sec-promise.prototype.catch\n$({ target: 'Promise', proto: true, forced: FORCED_PROMISE_CONSTRUCTOR, real: true }, {\n  'catch': function (onRejected) {\n    return this.then(undefined, onRejected);\n  }\n});\n\n// makes sure that native promise-based APIs `Promise#catch` properly works with patched `Promise#then`\nif (!IS_PURE && isCallable(NativePromiseConstructor)) {\n  var method = getBuiltIn('Promise').prototype['catch'];\n  if (NativePromisePrototype['catch'] !== method) {\n    defineBuiltIn(NativePromisePrototype, 'catch', method, { unsafe: true });\n  }\n}\n", "'use strict';\nvar $ = require('../internals/export');\nvar call = require('../internals/function-call');\nvar aCallable = require('../internals/a-callable');\nvar newPromiseCapabilityModule = require('../internals/new-promise-capability');\nvar perform = require('../internals/perform');\nvar iterate = require('../internals/iterate');\nvar PROMISE_STATICS_INCORRECT_ITERATION = require('../internals/promise-statics-incorrect-iteration');\n\n// `Promise.race` method\n// https://tc39.es/ecma262/#sec-promise.race\n$({ target: 'Promise', stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {\n  race: function race(iterable) {\n    var C = this;\n    var capability = newPromiseCapabilityModule.f(C);\n    var reject = capability.reject;\n    var result = perform(function () {\n      var $promiseResolve = aCallable(C.resolve);\n      iterate(iterable, function (promise) {\n        call($promiseResolve, C, promise).then(capability.resolve, reject);\n      });\n    });\n    if (result.error) reject(result.value);\n    return capability.promise;\n  }\n});\n", "'use strict';\nvar $ = require('../internals/export');\nvar newPromiseCapabilityModule = require('../internals/new-promise-capability');\nvar FORCED_PROMISE_CONSTRUCTOR = require('../internals/promise-constructor-detection').CONSTRUCTOR;\n\n// `Promise.reject` method\n// https://tc39.es/ecma262/#sec-promise.reject\n$({ target: 'Promise', stat: true, forced: FORCED_PROMISE_CONSTRUCTOR }, {\n  reject: function reject(r) {\n    var capability = newPromiseCapabilityModule.f(this);\n    var capabilityReject = capability.reject;\n    capabilityReject(r);\n    return capability.promise;\n  }\n});\n", "'use strict';\nvar anObject = require('../internals/an-object');\nvar isObject = require('../internals/is-object');\nvar newPromiseCapability = require('../internals/new-promise-capability');\n\nmodule.exports = function (C, x) {\n  anObject(C);\n  if (isObject(x) && x.constructor === C) return x;\n  var promiseCapability = newPromiseCapability.f(C);\n  var resolve = promiseCapability.resolve;\n  resolve(x);\n  return promiseCapability.promise;\n};\n", "'use strict';\nvar $ = require('../internals/export');\nvar getBuiltIn = require('../internals/get-built-in');\nvar IS_PURE = require('../internals/is-pure');\nvar NativePromiseConstructor = require('../internals/promise-native-constructor');\nvar FORCED_PROMISE_CONSTRUCTOR = require('../internals/promise-constructor-detection').CONSTRUCTOR;\nvar promiseResolve = require('../internals/promise-resolve');\n\nvar PromiseConstructorWrapper = getBuiltIn('Promise');\nvar CHECK_WRAPPER = IS_PURE && !FORCED_PROMISE_CONSTRUCTOR;\n\n// `Promise.resolve` method\n// https://tc39.es/ecma262/#sec-promise.resolve\n$({ target: 'Promise', stat: true, forced: IS_PURE || FORCED_PROMISE_CONSTRUCTOR }, {\n  resolve: function resolve(x) {\n    return promiseResolve(CHECK_WRAPPER && this === PromiseConstructorWrapper ? NativePromiseConstructor : this, x);\n  }\n});\n", "'use strict';\n// TODO: Remove this module from `core-js@4` since it's split to modules listed below\nrequire('../modules/es.promise.constructor');\nrequire('../modules/es.promise.all');\nrequire('../modules/es.promise.catch');\nrequire('../modules/es.promise.race');\nrequire('../modules/es.promise.reject');\nrequire('../modules/es.promise.resolve');\n", "'use strict';\nvar $ = require('../internals/export');\nvar call = require('../internals/function-call');\nvar aCallable = require('../internals/a-callable');\nvar newPromiseCapabilityModule = require('../internals/new-promise-capability');\nvar perform = require('../internals/perform');\nvar iterate = require('../internals/iterate');\nvar PROMISE_STATICS_INCORRECT_ITERATION = require('../internals/promise-statics-incorrect-iteration');\n\n// `Promise.allSettled` method\n// https://tc39.es/ecma262/#sec-promise.allsettled\n$({ target: 'Promise', stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {\n  allSettled: function allSettled(iterable) {\n    var C = this;\n    var capability = newPromiseCapabilityModule.f(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var promiseResolve = aCallable(C.resolve);\n      var values = [];\n      var counter = 0;\n      var remaining = 1;\n      iterate(iterable, function (promise) {\n        var index = counter++;\n        var alreadyCalled = false;\n        remaining++;\n        call(promiseResolve, C, promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[index] = { status: 'fulfilled', value: value };\n          --remaining || resolve(values);\n        }, function (error) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[index] = { status: 'rejected', reason: error };\n          --remaining || resolve(values);\n        });\n      });\n      --remaining || resolve(values);\n    });\n    if (result.error) reject(result.value);\n    return capability.promise;\n  }\n});\n", "'use strict';\nvar $ = require('../internals/export');\nvar call = require('../internals/function-call');\nvar aCallable = require('../internals/a-callable');\nvar getBuiltIn = require('../internals/get-built-in');\nvar newPromiseCapabilityModule = require('../internals/new-promise-capability');\nvar perform = require('../internals/perform');\nvar iterate = require('../internals/iterate');\nvar PROMISE_STATICS_INCORRECT_ITERATION = require('../internals/promise-statics-incorrect-iteration');\n\nvar PROMISE_ANY_ERROR = 'No one promise resolved';\n\n// `Promise.any` method\n// https://tc39.es/ecma262/#sec-promise.any\n$({ target: 'Promise', stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {\n  any: function any(iterable) {\n    var C = this;\n    var AggregateError = getBuiltIn('AggregateError');\n    var capability = newPromiseCapabilityModule.f(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var promiseResolve = aCallable(C.resolve);\n      var errors = [];\n      var counter = 0;\n      var remaining = 1;\n      var alreadyResolved = false;\n      iterate(iterable, function (promise) {\n        var index = counter++;\n        var alreadyRejected = false;\n        remaining++;\n        call(promiseResolve, C, promise).then(function (value) {\n          if (alreadyRejected || alreadyResolved) return;\n          alreadyResolved = true;\n          resolve(value);\n        }, function (error) {\n          if (alreadyRejected || alreadyResolved) return;\n          alreadyRejected = true;\n          errors[index] = error;\n          --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));\n        });\n      });\n      --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));\n    });\n    if (result.error) reject(result.value);\n    return capability.promise;\n  }\n});\n", "'use strict';\nvar $ = require('../internals/export');\nvar newPromiseCapabilityModule = require('../internals/new-promise-capability');\n\n// `Promise.withResolvers` method\n// https://github.com/tc39/proposal-promise-with-resolvers\n$({ target: 'Promise', stat: true }, {\n  withResolvers: function withResolvers() {\n    var promiseCapability = newPromiseCapabilityModule.f(this);\n    return {\n      promise: promiseCapability.promise,\n      resolve: promiseCapability.resolve,\n      reject: promiseCapability.reject\n    };\n  }\n});\n", "'use strict';\nvar $ = require('../internals/export');\nvar IS_PURE = require('../internals/is-pure');\nvar NativePromiseConstructor = require('../internals/promise-native-constructor');\nvar fails = require('../internals/fails');\nvar getBuiltIn = require('../internals/get-built-in');\nvar isCallable = require('../internals/is-callable');\nvar speciesConstructor = require('../internals/species-constructor');\nvar promiseResolve = require('../internals/promise-resolve');\nvar defineBuiltIn = require('../internals/define-built-in');\n\nvar NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;\n\n// Safari bug https://bugs.webkit.org/show_bug.cgi?id=200829\nvar NON_GENERIC = !!NativePromiseConstructor && fails(function () {\n  // eslint-disable-next-line unicorn/no-thenable -- required for testing\n  NativePromisePrototype['finally'].call({ then: function () { /* empty */ } }, function () { /* empty */ });\n});\n\n// `Promise.prototype.finally` method\n// https://tc39.es/ecma262/#sec-promise.prototype.finally\n$({ target: 'Promise', proto: true, real: true, forced: NON_GENERIC }, {\n  'finally': function (onFinally) {\n    var C = speciesConstructor(this, getBuiltIn('Promise'));\n    var isFunction = isCallable(onFinally);\n    return this.then(\n      isFunction ? function (x) {\n        return promiseResolve(C, onFinally()).then(function () { return x; });\n      } : onFinally,\n      isFunction ? function (e) {\n        return promiseResolve(C, onFinally()).then(function () { throw e; });\n      } : onFinally\n    );\n  }\n});\n\n// makes sure that native promise-based APIs `Promise#finally` properly works with patched `Promise#then`\nif (!IS_PURE && isCallable(NativePromiseConstructor)) {\n  var method = getBuiltIn('Promise').prototype['finally'];\n  if (NativePromisePrototype['finally'] !== method) {\n    defineBuiltIn(NativePromisePrototype, 'finally', method, { unsafe: true });\n  }\n}\n", "'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\nvar toString = require('../internals/to-string');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nvar charAt = uncurryThis(''.charAt);\nvar charCodeAt = uncurryThis(''.charCodeAt);\nvar stringSlice = uncurryThis(''.slice);\n\nvar createMethod = function (CONVERT_TO_STRING) {\n  return function ($this, pos) {\n    var S = toString(requireObjectCoercible($this));\n    var position = toIntegerOrInfinity(pos);\n    var size = S.length;\n    var first, second;\n    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;\n    first = charCodeAt(S, position);\n    return first < 0xD800 || first > 0xDBFF || position + 1 === size\n      || (second = charCodeAt(S, position + 1)) < 0xDC00 || second > 0xDFFF\n        ? CONVERT_TO_STRING\n          ? charAt(S, position)\n          : first\n        : CONVERT_TO_STRING\n          ? stringSlice(S, position, position + 2)\n          : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;\n  };\n};\n\nmodule.exports = {\n  // `String.prototype.codePointAt` method\n  // https://tc39.es/ecma262/#sec-string.prototype.codepointat\n  codeAt: createMethod(false),\n  // `String.prototype.at` method\n  // https://github.com/mathiasbynens/String.prototype.at\n  charAt: createMethod(true)\n};\n", "'use strict';\nvar charAt = require('../internals/string-multibyte').charAt;\nvar toString = require('../internals/to-string');\nvar InternalStateModule = require('../internals/internal-state');\nvar defineIterator = require('../internals/iterator-define');\nvar createIterResultObject = require('../internals/create-iter-result-object');\n\nvar STRING_ITERATOR = 'String Iterator';\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);\n\n// `String.prototype[@@iterator]` method\n// https://tc39.es/ecma262/#sec-string.prototype-@@iterator\ndefineIterator(String, 'String', function (iterated) {\n  setInternalState(this, {\n    type: STRING_ITERATOR,\n    string: toString(iterated),\n    index: 0\n  });\n// `%StringIteratorPrototype%.next` method\n// https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next\n}, function next() {\n  var state = getInternalState(this);\n  var string = state.string;\n  var index = state.index;\n  var point;\n  if (index >= string.length) return createIterResultObject(undefined, true);\n  point = charAt(string, index);\n  state.index += point.length;\n  return createIterResultObject(point, false);\n});\n", "'use strict';\nrequire('../../modules/es.aggregate-error');\nrequire('../../modules/es.array.iterator');\nrequire('../../modules/es.object.to-string');\nrequire('../../modules/es.promise');\nrequire('../../modules/es.promise.all-settled');\nrequire('../../modules/es.promise.any');\nrequire('../../modules/es.promise.with-resolvers');\nrequire('../../modules/es.promise.finally');\nrequire('../../modules/es.string.iterator');\nvar path = require('../../internals/path');\n\nmodule.exports = path.Promise;\n", "'use strict';\n// iterable DOM collections\n// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods\nmodule.exports = {\n  CSSRuleList: 0,\n  CSSStyleDeclaration: 0,\n  CSSValueList: 0,\n  ClientRectList: 0,\n  DOMRectList: 0,\n  DOMStringList: 0,\n  DOMTokenList: 1,\n  DataTransferItemList: 0,\n  FileList: 0,\n  HTMLAllCollection: 0,\n  HTMLCollection: 0,\n  HTMLFormElement: 0,\n  HTMLSelectElement: 0,\n  MediaList: 0,\n  MimeTypeArray: 0,\n  NamedNodeMap: 0,\n  NodeList: 1,\n  PaintRequestList: 0,\n  Plugin: 0,\n  PluginArray: 0,\n  SVGLengthList: 0,\n  SVGNumberList: 0,\n  SVGPathSegList: 0,\n  SVGPointList: 0,\n  SVGStringList: 0,\n  SVGTransformList: 0,\n  SourceBufferList: 0,\n  StyleSheetList: 0,\n  TextTrackCueList: 0,\n  TextTrackList: 0,\n  TouchList: 0\n};\n", "'use strict';\nrequire('../modules/es.array.iterator');\nvar DOMIterables = require('../internals/dom-iterables');\nvar globalThis = require('../internals/global-this');\nvar setToStringTag = require('../internals/set-to-string-tag');\nvar Iterators = require('../internals/iterators');\n\nfor (var COLLECTION_NAME in DOMIterables) {\n  setToStringTag(globalThis[COLLECTION_NAME], COLLECTION_NAME);\n  Iterators[COLLECTION_NAME] = Iterators.Array;\n}\n", "'use strict';\nvar parent = require('../../es/promise');\nrequire('../../modules/web.dom-collections.iterator');\n\nmodule.exports = parent;\n", "module.exports = require(\"core-js-pure/stable/promise\");", "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\")[\"default\"];\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n// ../p-defer/index.js\nfunction pDefer() {\n  var deferred = {};\n  deferred.promise = new _promise[\"default\"](function (resolve, reject) {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  });\n  return deferred;\n}\n\n// src/index.js\nmodule.exports = pDefer;\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = onErrorResumeNext;\n\nfunction onErrorResumeNext(fn) {\n  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n  try {\n    var result = fn.call(context);\n\n    if (typeof result.then === 'function') {\n      return new Promise(function (resolve) {\n        result.then(resolve, function () {\n          return resolve();\n        });\n      });\n    } else {\n      return result;\n    }\n  } catch (err) {}\n}\n\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "var safeIsNaN = Number.isNaN ||\n    function ponyfill(value) {\n        return typeof value === 'number' && value !== value;\n    };\nfunction isEqual(first, second) {\n    if (first === second) {\n        return true;\n    }\n    if (safeIsNaN(first) && safeIsNaN(second)) {\n        return true;\n    }\n    return false;\n}\nfunction areInputsEqual(newInputs, lastInputs) {\n    if (newInputs.length !== lastInputs.length) {\n        return false;\n    }\n    for (var i = 0; i < newInputs.length; i++) {\n        if (!isEqual(newInputs[i], lastInputs[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction memoizeOne(resultFn, isEqual) {\n    if (isEqual === void 0) { isEqual = areInputsEqual; }\n    var cache = null;\n    function memoized() {\n        var newArgs = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            newArgs[_i] = arguments[_i];\n        }\n        if (cache && cache.lastThis === this && isEqual(newArgs, cache.lastArgs)) {\n            return cache.lastResult;\n        }\n        var lastResult = resultFn.apply(this, newArgs);\n        cache = {\n            lastResult: lastResult,\n            lastArgs: newArgs,\n            lastThis: this,\n        };\n        return lastResult;\n    }\n    memoized.clear = function clear() {\n        cache = null;\n    };\n    return memoized;\n}\n\nexport { memoizeOne as default };\n", "/* eslint no-await-in-loop: \"off\" */\n\nexport default class {\n  constructor(audioContext) {\n    this.audioContext = audioContext;\n  }\n\n  pause() {\n    this.audioContext && this.audioContext.suspend();\n    this.playingUtterance && this.playingUtterance.dispatchEvent(new CustomEvent('pause'));\n  }\n\n  resume() {\n    this.audioContext && this.audioContext.resume();\n    this.playingUtterance && this.playingUtterance.dispatchEvent(new CustomEvent('resume'));\n  }\n\n  async start(queue) {\n    let utterance;\n\n    while ((utterance = queue.shift())) {\n      this.playingUtterance = utterance;\n\n      await utterance.play(this.audioContext);\n\n      this.playingUtterance = null;\n    }\n  }\n\n  stop() {\n    this.playingUtterance && this.playingUtterance.stop();\n\n    if (this.audioContext.state === 'suspended') {\n      // Play -> Pause -> Cancel (stop)\n      // This would generate these events: \"start\", \"pause\", \"end\"\n\n      // Without this code, the \"end\" event will not emit until resume() is called\n      // Cancelling an unstarted utterance will not emit any \"start\" or \"end\" event\n      this.audioContext.resume();\n    }\n  }\n}\n", "/* eslint no-await-in-loop: \"off\" */\n\nimport memoize from 'memoize-one';\n\nimport AudioContextConsumer from './AudioContextConsumer';\n\nexport default class {\n  constructor({ audioContext, ponyfill }) {\n    this.consumer = null;\n    this.paused = false;\n    this.queue = [];\n\n    this.getAudioContext = memoize(() => audioContext || new ponyfill.AudioContext());\n  }\n\n  pause() {\n    this.paused = true;\n    this.consumer && this.consumer.pause();\n  }\n\n  push(utterance) {\n    this.queue.push(utterance);\n    this.startConsumer();\n  }\n\n  resume() {\n    this.paused = false;\n\n    if (this.consumer) {\n      this.consumer.resume();\n    } else {\n      this.startConsumer();\n    }\n  }\n\n  get speaking() {\n    return !!this.consumer;\n  }\n\n  async startConsumer() {\n    while (!this.paused && this.queue.length && !this.consumer) {\n      this.consumer = new AudioContextConsumer(this.getAudioContext());\n\n      await this.consumer.start(this.queue);\n\n      this.consumer = null;\n    }\n  }\n\n  stop() {\n    this.queue.splice(0);\n    this.consumer && this.consumer.stop();\n  }\n}\n", "export default class {\n  constructor({ gender, lang, voiceURI }) {\n    this._default = false;\n    this._gender = gender;\n    this._lang = lang;\n    this._localService = false;\n    this._name = voiceURI;\n    this._voiceURI = voiceURI;\n  }\n\n  get default() {\n    return this._default;\n  }\n\n  get gender() {\n    return this._gender;\n  }\n\n  get lang() {\n    return this._lang;\n  }\n\n  get localService() {\n    return this._localService;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get voiceURI() {\n    return this._voiceURI;\n  }\n}\n", "/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 1, -1] }] */\n\nimport SpeechSynthesisVoice from './SpeechSynthesisVoice';\n\nasync function fetchCustomVoices({ customVoiceHostname, deploymentId, region, subscriptionKey }) {\n  const hostname = customVoiceHostname || `${ region }.customvoice.api.speech.microsoft.com`;\n\n  // Although encodeURI on a hostname doesn't work as expected for hostname, at least, it will fail peacefully.\n  const res = await fetch(\n    `https://${ encodeURI(hostname) }/api/texttospeech/v2.0/endpoints/${ encodeURIComponent(deploymentId) }`,\n    {\n      headers: {\n        accept: 'application/json',\n        'ocp-apim-subscription-key': subscriptionKey\n      }\n    }\n  );\n\n  if (!res.ok) {\n    throw new Error('Failed to fetch custom voices');\n  }\n\n  return res.json();\n}\n\nexport default async function({ customVoiceHostname, deploymentId, region, subscriptionKey }) {\n  const { models } = await fetchCustomVoices({ customVoiceHostname, deploymentId, region, subscriptionKey });\n\n  return models\n    .map(\n      ({ properties: { Gender: gender }, locale: lang, name: voiceURI }) =>\n        new SpeechSynthesisVoice({ gender, lang, voiceURI })\n    )\n    .sort(({ name: x }, { name: y }) => (x > y ? 1 : x < y ? -1 : 0));\n}\n", "/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 1, -1] }] */\n\nimport SpeechSynthesisVoice from './SpeechSynthesisVoice';\n\nexport default async function fetchVoices({ authorizationToken, region, speechSynthesisHostname, subscriptionKey }) {\n  // Although encodeURI on a hostname doesn't work as expected for hostname, at least, it will fail peacefully.\n  const hostname = speechSynthesisHostname || `${ encodeURI(region) }.tts.speech.microsoft.com`;\n  const res = await fetch(`https://${ hostname }/cognitiveservices/voices/list`, {\n    headers: {\n      'content-type': 'application/json',\n      ...(authorizationToken\n        ? {\n            authorization: `Bearer ${ authorizationToken }`\n          }\n        : {\n            'Ocp-Apim-Subscription-Key': subscriptionKey\n          })\n    }\n  });\n\n  if (!res.ok) {\n    throw new Error('Failed to fetch voices');\n  }\n\n  const voices = await res.json();\n\n  return voices\n    .map(({ Gender: gender, Locale: lang, Name: voiceURI }) => new SpeechSynthesisVoice({ gender, lang, voiceURI }))\n    .sort(({ name: x }, { name: y }) => (x > y ? 1 : x < y ? -1 : 0));\n}\n", "function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "var objectWithoutPropertiesLoose = require(\"./objectWithoutPropertiesLoose.js\");\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutProperties, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "export default function resolveFunctionOrReturnValue(fnOrValue) {\n  return typeof fnOrValue === 'function' ? fnOrValue() : fnOrValue;\n}\n", "import resolveFunctionOrReturnValue from './resolveFunctionOrReturnValue';\n\nlet shouldWarnOnSubscriptionKey = true;\n\nexport default function patchOptions({\n  authorizationToken,\n  credentials,\n  looseEvent,\n  looseEvents,\n  region = 'westus',\n  subscriptionKey,\n  ...otherOptions\n} = {}) {\n  if (typeof looseEvent !== 'undefined') {\n    console.warn('web-speech-cognitive-services: The option \"looseEvent\" should be named as \"looseEvents\".');\n\n    looseEvents = looseEvent;\n  }\n\n  if (!credentials) {\n    if (!authorizationToken && !subscriptionKey) {\n      throw new Error('web-speech-cognitive-services: Credentials must be specified.');\n    } else {\n      console.warn(\n        'web-speech-cognitive-services: We are deprecating authorizationToken, region, and subscriptionKey. Please use credentials instead. The deprecated option will be removed on or after 2020-11-14.'\n      );\n\n      credentials = async () =>\n        authorizationToken\n          ? { authorizationToken: await resolveFunctionOrReturnValue(authorizationToken), region }\n          : { region, subscriptionKey: await resolveFunctionOrReturnValue(subscriptionKey) };\n    }\n  }\n\n  return {\n    ...otherOptions,\n    fetchCredentials: async () => {\n      const {\n        authorizationToken,\n        customVoiceHostname,\n        region,\n        speechRecognitionHostname,\n        speechSynthesisHostname,\n        subscriptionKey\n      } = await resolveFunctionOrReturnValue(credentials);\n\n      if ((!authorizationToken && !subscriptionKey) || (authorizationToken && subscriptionKey)) {\n        throw new Error(\n          'web-speech-cognitive-services: Either \"authorizationToken\" or \"subscriptionKey\" must be provided.'\n        );\n      } else if (!region && !(speechRecognitionHostname && speechSynthesisHostname)) {\n        throw new Error(\n          'web-speech-cognitive-services: Either \"region\" or \"speechRecognitionHostname\" and \"speechSynthesisHostname\" must be set.'\n        );\n      } else if (region && (customVoiceHostname || speechRecognitionHostname || speechSynthesisHostname)) {\n        throw new Error(\n          'web-speech-cognitive-services: Only either \"region\" or \"customVoiceHostname\", \"speechRecognitionHostname\" and \"speechSynthesisHostname\" can be set.'\n        );\n      } else if (authorizationToken) {\n        if (typeof authorizationToken !== 'string') {\n          throw new Error('web-speech-cognitive-services: \"authorizationToken\" must be a string.');\n        }\n      } else if (typeof subscriptionKey !== 'string') {\n        throw new Error('web-speech-cognitive-services: \"subscriptionKey\" must be a string.');\n      }\n\n      if (shouldWarnOnSubscriptionKey && subscriptionKey) {\n        console.warn(\n          'web-speech-cognitive-services: In production environment, subscription key should not be used, authorization token should be used instead.'\n        );\n\n        shouldWarnOnSubscriptionKey = false;\n      }\n\n      const resolvedCredentials = authorizationToken ? { authorizationToken } : { subscriptionKey };\n\n      if (region) {\n        resolvedCredentials.region = region;\n      } else {\n        resolvedCredentials.customVoiceHostname = customVoiceHostname;\n        resolvedCredentials.speechRecognitionHostname = speechRecognitionHostname;\n        resolvedCredentials.speechSynthesisHostname = speechSynthesisHostname;\n      }\n\n      return resolvedCredentials;\n    },\n    looseEvents\n  };\n}\n", "import { Event } from 'event-target-shim/es5';\n\nexport default class SpeechSynthesisEvent extends Event {\n  constructor(type) {\n    super(type);\n  }\n}\n", "// The MIT License (MIT)\n//\n// Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// This piece of code is adopted from https://github.com/sindresorhus/p-defer\n\n// The reason why we need to fork it is because:\n// - The original package published to NPM is not ES5-compliant\n//    - Due to the use of arrow functions\n// - create-react-app@1 does not play nice with packages that are not ES5-compliant\n//    - create-react-app@2 do play nice, but it was so new that most of the people are still on @1\n\n// Criteria to remove this package:\n// - When create-react-app@2 become mainstream, or,\n// - When p-defer start publishing a ES5-compliant version on NPM\n\n'use strict';\n\nmodule.exports = function () {\n  const ret = {};\n\n  ret.promise = new Promise(function (resolve, reject) {\n    ret.resolve = resolve;\n    ret.reject = reject;\n  });\n\n  return ret;\n};\n", "import createDeferred from './external/p-defer';\n\nexport default class EventAsPromise {\n  constructor(options = {}) {\n    this.defers = [];\n    this.upcomingDeferred = null;\n    this.eventListener = this.eventListener.bind(this);\n    this.options = options;\n\n    this.one = this.one.bind(this);\n    this.upcoming = this.upcoming.bind(this);\n\n    this[Symbol.iterator] = () => ({\n      next: () => ({\n        done: false,\n        value: this.upcoming()\n      })\n    });\n  }\n\n  eventListener(event) {\n    const deferred = this.defers.shift();\n    const args = this.options.array ? [].slice.call(arguments) : event;\n\n    deferred && deferred.resolve(args);\n\n    if (this.upcomingDeferred) {\n      this.upcomingDeferred.resolve(args);\n      this.upcomingDeferred = null;\n    }\n  }\n\n  one() {\n    const deferred = createDeferred();\n\n    this.defers.push(deferred);\n\n    return deferred.promise;\n  }\n\n  upcoming() {\n    if (!this.upcomingDeferred) {\n      this.upcomingDeferred = createDeferred();\n    }\n\n    return this.upcomingDeferred.promise;\n  }\n}\n", "const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n// Use a lookup table to find the index.\nconst lookup = typeof Uint8Array === 'undefined' ? [] : new Uint8Array(256);\nfor (let i = 0; i < chars.length; i++) {\n    lookup[chars.charCodeAt(i)] = i;\n}\n\nexport const encode = (arraybuffer: ArrayBuffer): string => {\n    let bytes = new Uint8Array(arraybuffer),\n        i,\n        len = bytes.length,\n        base64 = '';\n\n    for (i = 0; i < len; i += 3) {\n        base64 += chars[bytes[i] >> 2];\n        base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n        base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n        base64 += chars[bytes[i + 2] & 63];\n    }\n\n    if (len % 3 === 2) {\n        base64 = base64.substring(0, base64.length - 1) + '=';\n    } else if (len % 3 === 1) {\n        base64 = base64.substring(0, base64.length - 2) + '==';\n    }\n\n    return base64;\n};\n\nexport const decode = (base64: string): ArrayBuffer => {\n    let bufferLength = base64.length * 0.75,\n        len = base64.length,\n        i,\n        p = 0,\n        encoded1,\n        encoded2,\n        encoded3,\n        encoded4;\n\n    if (base64[base64.length - 1] === '=') {\n        bufferLength--;\n        if (base64[base64.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n\n    const arraybuffer = new ArrayBuffer(bufferLength),\n        bytes = new Uint8Array(arraybuffer);\n\n    for (i = 0; i < len; i += 4) {\n        encoded1 = lookup[base64.charCodeAt(i)];\n        encoded2 = lookup[base64.charCodeAt(i + 1)];\n        encoded3 = lookup[base64.charCodeAt(i + 2)];\n        encoded4 = lookup[base64.charCodeAt(i + 3)];\n\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n\n    return arraybuffer;\n};\n", "/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 1, 100] }] */\n\n// Cognitive Services does not support unsigned percentage\n// It must be converted into +/- first.\nfunction relativePercentage(value) {\n  let relative = Math.round((value - 1) * 100);\n\n  if (relative >= 0) {\n    relative = '+' + relative;\n  }\n\n  return relative + '%';\n}\n\nexport default function buildSSML({ lang, pitch = 1, rate = 1, text, voice, volume }) {\n  return `<speak version=\"1.0\" xml:lang=\"${ lang }\">\n  <voice xml:lang=\"${ lang }\" name=\"${ voice }\">\n    <prosody pitch=\"${ relativePercentage(pitch) }\" rate=\"${ relativePercentage(rate) }\" volume=\"${ relativePercentage(\n    volume\n  ) }\">\n      ${ text }\n    </prosody>\n  </voice>\n</speak>`;\n}\n", "const SPEAK_TAG_PATTERN = /^\\s*<speak(\\s|\\/?>)/u;\nconst XML_PROLOG_PATTERN = /^\\s*<\\?xml\\s/u;\n\nexport default function isSSML(text) {\n  return SPEAK_TAG_PATTERN.test(text) || XML_PROLOG_PATTERN.test(text);\n}\n", "import { decode } from 'base64-arraybuffer';\nimport buildSSML from './buildSSML';\nimport isSSML from './isSSML';\n\nconst DEFAULT_LANGUAGE = 'en-US';\nconst DEFAULT_OUTPUT_FORMAT = 'riff-16khz-16bit-mono-pcm';\nconst DEFAULT_VOICE = 'Microsoft Server Speech Text to Speech Voice (en-US, AriaNeural)';\nconst EMPTY_MP3_BASE64 =\n  'SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU3LjU2LjEwMQAAAAAAAAAAAAAA//tAwAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAACAAABhgC7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7//////////////////////////////////////////////////////////////////8AAAAATGF2YzU3LjY0AAAAAAAAAAAAAAAAJAUHAAAAAAAAAYYoRBqpAAAAAAD/+xDEAAPAAAGkAAAAIAAANIAAAARMQU1FMy45OS41VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7EMQpg8AAAaQAAAAgAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nexport default async function({\n  deploymentId,\n  fetchCredentials,\n  lang = DEFAULT_LANGUAGE,\n  outputFormat = DEFAULT_OUTPUT_FORMAT,\n  pitch,\n  rate,\n  text,\n  voice = DEFAULT_VOICE,\n  volume\n}) {\n  if (!text) {\n    // If text is empty, play a short audio clip. This allows developers to easily prime the AudioContext object by playing an empty string.\n    return decode(EMPTY_MP3_BASE64);\n  }\n\n  const { authorizationToken, region, speechSynthesisHostname, subscriptionKey } = await fetchCredentials();\n\n  if ((authorizationToken && subscriptionKey) || (!authorizationToken && !subscriptionKey)) {\n    throw new Error('Only \"authorizationToken\" or \"subscriptionKey\" should be set.');\n  } else if ((region && speechSynthesisHostname) || (!region && !speechSynthesisHostname)) {\n    throw new Error('Only \"region\" or \"speechSynthesisHostnamename\" should be set.');\n  }\n\n  const ssml = isSSML(text) ? text : buildSSML({ lang, pitch, rate, text, voice, volume });\n\n  // Although calling encodeURI on hostname does not actually works, it fails faster and safer.\n  const hostname =\n    speechSynthesisHostname ||\n    (deploymentId\n      ? `${ encodeURI(region) }.voice.speech.microsoft.com`\n      : `${ encodeURI(region) }.tts.speech.microsoft.com`);\n  const search = deploymentId ? `?deploymentId=${ encodeURI(deploymentId) }` : '';\n  const url = `https://${ hostname }/cognitiveservices/v1${ search }`;\n\n  const res = await fetch(url, {\n    headers: {\n      'Content-Type': 'application/ssml+xml',\n      'X-Microsoft-OutputFormat': outputFormat,\n      ...(authorizationToken\n        ? {\n            Authorization: `Bearer ${ authorizationToken }`\n          }\n        : {\n            'Ocp-Apim-Subscription-Key': subscriptionKey\n          })\n    },\n    method: 'POST',\n    body: ssml\n  });\n\n  if (!res.ok) {\n    throw new Error(`web-speech-cognitive-services: Failed to syntheis speech, server returned ${ res.status }`);\n  }\n\n  return res.arrayBuffer();\n}\n", "export default function subscribeEvent(target, name, handler) {\n  target.addEventListener(name, handler);\n\n  return () => target.removeEventListener(name, handler);\n}\n", "/* eslint no-empty: [\"error\", { \"allowEmptyCatch\": true }] */\n\nimport { EventTarget, getEventAttributeValue, setEventAttributeValue } from 'event-target-shim/es5';\nimport EventAsPromise from 'event-as-promise';\n\nimport fetchSpeechData from './fetchSpeechData';\nimport SpeechSynthesisEvent from './SpeechSynthesisEvent';\nimport subscribeEvent from './subscribeEvent';\n\nfunction asyncDecodeAudioData(audioContext, arrayBuffer) {\n  return new Promise((resolve, reject) => {\n    const promise = audioContext.decodeAudioData(arrayBuffer, resolve, reject);\n\n    // Newer implementation of \"decodeAudioData\" will return a Promise\n    promise && typeof promise.then === 'function' && resolve(promise);\n  });\n}\n\nfunction playDecoded(audioContext, audioBuffer, source) {\n  return new Promise((resolve, reject) => {\n    const audioContextClosed = new EventAsPromise();\n    const sourceEnded = new EventAsPromise();\n    const unsubscribe = subscribeEvent(\n      audioContext,\n      'statechange',\n      ({ target: { state } }) => state === 'closed' && audioContextClosed.eventListener()\n    );\n\n    try {\n      source.buffer = audioBuffer;\n      // \"ended\" may not fire if the underlying AudioContext is closed prematurely\n      source.onended = sourceEnded.eventListener;\n\n      source.connect(audioContext.destination);\n      source.start(0);\n\n      Promise.race([audioContextClosed.upcoming(), sourceEnded.upcoming()]).then(resolve);\n    } catch (err) {\n      reject(err);\n    } finally {\n      unsubscribe();\n    }\n  });\n}\n\nclass SpeechSynthesisUtterance extends EventTarget {\n  constructor(text) {\n    super();\n\n    this._lang = null;\n    this._pitch = 1;\n    this._rate = 1;\n    this._voice = null;\n    this._volume = 1;\n\n    this.text = text;\n\n    this.onboundary = null;\n    this.onend = null;\n    this.onerror = null;\n    this.onmark = null;\n    this.onpause = null;\n    this.onresume = null;\n    this.onstart = null;\n  }\n\n  get lang() {\n    return this._lang;\n  }\n\n  set lang(value) {\n    this._lang = value;\n  }\n\n  get onboundary() {\n    return getEventAttributeValue(this, 'boundary');\n  }\n\n  set onboundary(value) {\n    setEventAttributeValue(this, 'boundary', value);\n  }\n\n  get onend() {\n    return getEventAttributeValue(this, 'end');\n  }\n\n  set onend(value) {\n    setEventAttributeValue(this, 'end', value);\n  }\n\n  get onerror() {\n    return getEventAttributeValue(this, 'error');\n  }\n\n  set onerror(value) {\n    setEventAttributeValue(this, 'error', value);\n  }\n\n  get onmark() {\n    return getEventAttributeValue(this, 'mark');\n  }\n\n  set onmark(value) {\n    setEventAttributeValue(this, 'mark', value);\n  }\n\n  get onpause() {\n    return getEventAttributeValue(this, 'pause');\n  }\n\n  set onpause(value) {\n    setEventAttributeValue(this, 'pause', value);\n  }\n\n  get onresume() {\n    return getEventAttributeValue(this, 'resume');\n  }\n\n  set onresume(value) {\n    setEventAttributeValue(this, 'resume', value);\n  }\n\n  get onstart() {\n    return getEventAttributeValue(this, 'start');\n  }\n\n  set onstart(value) {\n    setEventAttributeValue(this, 'start', value);\n  }\n\n  get pitch() {\n    return this._pitch;\n  }\n\n  set pitch(value) {\n    this._pitch = value;\n  }\n\n  get rate() {\n    return this._rate;\n  }\n\n  set rate(value) {\n    this._rate = value;\n  }\n\n  get voice() {\n    return this._voice;\n  }\n\n  set voice(value) {\n    this._voice = value;\n  }\n\n  get volume() {\n    return this._volume;\n  }\n\n  set volume(value) {\n    this._volume = value;\n  }\n\n  preload({ deploymentId, fetchCredentials, outputFormat }) {\n    this.arrayBufferPromise = fetchSpeechData({\n      fetchCredentials,\n      deploymentId,\n      lang: this.lang || window.navigator.language,\n      outputFormat,\n      pitch: this.pitch,\n      rate: this.rate,\n      text: this.text,\n      voice: this.voice && this.voice.voiceURI,\n      volume: this.volume\n    });\n\n    // We need to call \"catch\" to make sure the Promise is running.\n    // We will ignore the reject result and handled in play() later.\n    this.arrayBufferPromise.catch();\n  }\n\n  async play(audioContext) {\n    try {\n      // We should emit \"start\" event even if preload() failed.\n      this.dispatchEvent(new SpeechSynthesisEvent('start'));\n\n      // HACK: iOS requires bufferSourceNode to be constructed before decoding data.\n      const source = audioContext.createBufferSource();\n      const audioBuffer = await asyncDecodeAudioData(audioContext, await this.arrayBufferPromise);\n\n      this._playingSource = source;\n\n      await playDecoded(audioContext, audioBuffer, source);\n\n      this._playingSource = null;\n      this.dispatchEvent(new SpeechSynthesisEvent('end'));\n    } catch (error) {\n      // \"message\" is not in spec but to provide a friendly message.\n      this.dispatchEvent(new ErrorEvent('error', { error: 'synthesis-failed', message: error.stack }));\n    }\n  }\n\n  stop() {\n    this._playingSource && this._playingSource.stop();\n  }\n}\n\nexport default SpeechSynthesisUtterance;\n", "/* eslint class-methods-use-this: 0 */\n\nimport { EventTarget, getEventAttributeValue, setEventAttributeValue } from 'event-target-shim/es5';\nimport createDeferred from 'p-defer-es5';\nimport onErrorResumeNext from 'on-error-resume-next';\n\nimport AudioContextQueue from './AudioContextQueue';\nimport fetchCustomVoices from './fetchCustomVoices';\nimport fetchVoices from './fetchVoices';\nimport patchOptions from '../patchOptions';\nimport SpeechSynthesisEvent from './SpeechSynthesisEvent';\nimport SpeechSynthesisUtterance from './SpeechSynthesisUtterance';\n\n// Supported output format can be found at https://docs.microsoft.com/en-us/azure/cognitive-services/speech-service/rest-text-to-speech#audio-outputs\nconst DEFAULT_OUTPUT_FORMAT = 'audio-24khz-160kbitrate-mono-mp3';\nconst EMPTY_ARRAY = [];\n\nexport default options => {\n  const {\n    audioContext,\n    fetchCredentials,\n    ponyfill = {\n      AudioContext: window.AudioContext || window.webkitAudioContext\n    },\n    speechSynthesisDeploymentId,\n    speechSynthesisOutputFormat = DEFAULT_OUTPUT_FORMAT\n  } = patchOptions(options);\n\n  if (!audioContext && !ponyfill.AudioContext) {\n    console.warn(\n      'web-speech-cognitive-services: This browser does not support Web Audio and it will not work with Cognitive Services Speech Services.'\n    );\n\n    return {};\n  }\n\n  class SpeechSynthesis extends EventTarget {\n    constructor() {\n      super();\n\n      this.queue = new AudioContextQueue({ audioContext, ponyfill });\n\n      this.updateVoices();\n    }\n\n    cancel() {\n      this.queue.stop();\n    }\n\n    getVoices() {\n      return EMPTY_ARRAY;\n    }\n\n    get onvoiceschanged() {\n      return getEventAttributeValue(this, 'voiceschanged');\n    }\n\n    set onvoiceschanged(value) {\n      setEventAttributeValue(this, 'voiceschanged', value);\n    }\n\n    pause() {\n      this.queue.pause();\n    }\n\n    resume() {\n      this.queue.resume();\n    }\n\n    speak(utterance) {\n      if (!(utterance instanceof SpeechSynthesisUtterance)) {\n        throw new Error('invalid utterance');\n      }\n\n      const { reject, resolve, promise } = createDeferred();\n      const handleError = ({ error: errorCode, message }) => {\n        const error = new Error(errorCode);\n\n        error.stack = message;\n\n        reject(error);\n      };\n\n      utterance.addEventListener('end', resolve);\n      utterance.addEventListener('error', handleError);\n\n      utterance.preload({\n        deploymentId: speechSynthesisDeploymentId,\n        fetchCredentials,\n        outputFormat: speechSynthesisOutputFormat\n      });\n\n      this.queue.push(utterance);\n\n      return promise.finally(() => {\n        utterance.removeEventListener('end', resolve);\n        utterance.removeEventListener('error', handleError);\n      });\n    }\n\n    get speaking() {\n      return this.queue.speaking;\n    }\n\n    async updateVoices() {\n      const { customVoiceHostname, region, speechSynthesisHostname, subscriptionKey } = await fetchCredentials();\n\n      if (speechSynthesisDeploymentId) {\n        if (subscriptionKey) {\n          console.warn(\n            'web-speech-cognitive-services: Listing of custom voice models are only available when using subscription key.'\n          );\n\n          await onErrorResumeNext(async () => {\n            const voices = await fetchCustomVoices({\n              customVoiceHostname,\n              deploymentId: speechSynthesisDeploymentId,\n              region,\n              speechSynthesisHostname,\n              subscriptionKey\n            });\n\n            this.getVoices = () => voices;\n          });\n        }\n      } else {\n        // If fetch voice list failed, we will not emit \"voiceschanged\" event.\n        // In the spec, there is no \"error\" event.\n\n        await onErrorResumeNext(async () => {\n          const voices = await fetchVoices(await fetchCredentials());\n\n          this.getVoices = () => voices;\n        });\n      }\n\n      this.dispatchEvent(new SpeechSynthesisEvent('voiceschanged'));\n    }\n  }\n\n  return {\n    speechSynthesis: new SpeechSynthesis(),\n    SpeechSynthesisEvent,\n    SpeechSynthesisUtterance\n  };\n};\n", "import createSpeechSynthesisPonyfill from './TextToSpeech/createSpeechSynthesisPonyfill';\n\nexport default createSpeechSynthesisPonyfill;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ttsMachine = void 0;\nconst xstate_1 = require(\"xstate\");\nconst getToken_1 = require(\"./getToken\");\nconst TextToSpeech_1 = require(\"web-speech-cognitive-services/lib/SpeechServices/TextToSpeech\");\nconst UTTERANCE_CHUNK_REGEX = /(^.*([!?]+|([.,]+\\s)))/;\nexports.ttsMachine = (0, xstate_1.setup)({\n    types: {},\n    actions: {\n        ttsStop: ({ context }) => {\n            context.wsaTTS.cancel();\n        },\n        addFiller: (0, xstate_1.assign)(({ context }) => {\n            const spaceIndex = context.buffer.lastIndexOf(\" \");\n            return {\n                buffer: context.buffer.substring(0, spaceIndex) +\n                    \" um,\" +\n                    context.buffer.substring(spaceIndex),\n            };\n        }),\n        assignCurrentVoice: (0, xstate_1.assign)(({ event, }) => {\n            return {\n                currentVoice: event.value,\n            };\n        }),\n        sendParentCurrentPersona: (0, xstate_1.sendParent)(({ event, }) => ({\n            type: \"STREAMING_SET_PERSONA\",\n            value: event.value,\n        })),\n    },\n    actors: {\n        getToken: getToken_1.getToken,\n        createEventsFromStream: (0, xstate_1.fromCallback)(({ sendBack, input }) => {\n            const eventSource = new EventSource(input.stream);\n            eventSource.addEventListener(\"STREAMING_DONE\", (_event) => {\n                console.debug(\"[TTS] received streaming done - closing event stream\");\n                sendBack({ type: \"STREAMING_DONE\" });\n                eventSource.close();\n            });\n            eventSource.addEventListener(\"STREAMING_RESET\", (_event) => {\n                console.debug(\"[TTS] received streaming reset\");\n            });\n            eventSource.addEventListener(\"STREAMING_CHUNK\", (event) => {\n                console.debug(\"[TTS] received streaming chunk:\", event);\n                sendBack({ type: \"STREAMING_CHUNK\", value: event.data });\n            });\n            eventSource.addEventListener(\"STREAMING_SET_VOICE\", (event) => {\n                console.debug(\"[TTS] received streaming voice set command:\", event);\n                sendBack({ type: \"STREAMING_SET_VOICE\", value: event.data });\n            });\n            eventSource.addEventListener(\"STREAMING_SET_PERSONA\", (event) => {\n                console.debug(\"[TTS] received streaming persona set command:\", event);\n                sendBack({ type: \"STREAMING_SET_PERSONA\", value: event.data });\n            });\n        }),\n        ponyfill: (0, xstate_1.fromCallback)(({ sendBack, input }) => {\n            const ponyfill = (0, TextToSpeech_1.default)({\n                audioContext: input.audioContext,\n                credentials: {\n                    region: input.azureRegion,\n                    authorizationToken: input.azureAuthorizationToken,\n                },\n            });\n            const { speechSynthesis, SpeechSynthesisUtterance } = ponyfill;\n            const tts = speechSynthesis;\n            const ttsUtterance = SpeechSynthesisUtterance;\n            tts.addEventListener(\"voiceschanged\", () => {\n                const voices = tts.getVoices();\n                if (voices.length > 0) {\n                    console.debug(\"[TTS] READY\");\n                    sendBack({\n                        type: \"READY\",\n                        value: { wsaTTS: tts, wsaUtt: ttsUtterance },\n                    });\n                }\n                else {\n                    console.error(\"[TTS] No voices available\");\n                    sendBack({ type: \"ERROR\" });\n                }\n            });\n        }),\n        start: (0, xstate_1.fromCallback)(({ sendBack, input }) => {\n            if ([\"\", \" \"].includes(input.utterance)) {\n                console.debug(\"[TTS] SPEAK: (empty utterance)\");\n                sendBack({ type: \"SPEAK_COMPLETE\" });\n            }\n            else {\n                console.debug(\"[TTS] SPEAK: \", input.utterance);\n                const content = wrapSSML(input.utterance, input.voice, input.ttsLexicon, 1); // todo speech rate;\n                const utterance = new input.wsaUtt(content);\n                utterance.addEventListener(\"start\", () => {\n                    sendBack({ type: \"TTS_STARTED\" });\n                    console.debug(\"[TTS] TTS_STARTED\");\n                });\n                utterance.addEventListener(\"end\", () => {\n                    sendBack({ type: \"SPEAK_COMPLETE\" });\n                    console.debug(\"[TTS] SPEAK_COMPLETE\");\n                });\n                input.wsaTTS.speak(utterance);\n            }\n        }),\n    },\n    guards: {\n        bufferContainsUtterancePartReadyToBeSpoken: ({ context }) => {\n            const m = context.buffer.match(UTTERANCE_CHUNK_REGEX);\n            return !!m;\n        },\n        bufferIsNonEmpty: ({ context }) => {\n            return !!context.buffer;\n        },\n    },\n    delays: {\n        FILLER_DELAY: ({ context }) => {\n            return context.agenda.fillerDelay;\n        },\n    },\n}).createMachine({\n    id: \"tts\",\n    context: ({ input }) => ({\n        ttsDefaultVoice: input.ttsDefaultVoice || \"en-US-DavisNeural\",\n        ttsLexicon: input.ttsLexicon,\n        audioContext: input.audioContext,\n        azureCredentials: input.azureCredentials,\n        azureRegion: input.azureRegion,\n        buffer: \"\",\n    }),\n    initial: \"GetToken\",\n    on: {\n        READY: {\n            target: \".Ready\",\n            actions: [\n                (0, xstate_1.assign)({\n                    wsaTTS: ({ event }) => event.value.wsaTTS,\n                    wsaUtt: ({ event }) => event.value.wsaUtt,\n                }),\n                (0, xstate_1.sendParent)({ type: \"TTS_READY\" }),\n            ],\n        },\n        ERROR: { actions: (0, xstate_1.sendParent)({ type: \"TTS_ERROR\" }) },\n    },\n    states: {\n        Ready: {\n            initial: \"Idle\",\n            states: {\n                Idle: {\n                    on: {\n                        SPEAK: [\n                            {\n                                target: \"BufferedSpeaker\",\n                                guard: ({ event }) => !!event.value.stream,\n                                actions: (0, xstate_1.assign)({\n                                    agenda: ({ event }) => event.value.fillerDelay\n                                        ? event.value\n                                        : Object.assign(Object.assign({}, event.value), { fillerDelay: 500 }),\n                                }),\n                            },\n                            {\n                                target: \"Speaking\",\n                                actions: (0, xstate_1.assign)({ agenda: ({ event }) => event.value }),\n                            },\n                        ],\n                    },\n                },\n                BufferedSpeaker: {\n                    type: \"parallel\",\n                    invoke: {\n                        id: \"createEventsFromStream\",\n                        src: \"createEventsFromStream\",\n                        input: ({ context }) => context.agenda,\n                    },\n                    on: {\n                        STOP: {\n                            target: \"Idle\",\n                        },\n                        SPEAK_COMPLETE: [\n                            {\n                                guard: (0, xstate_1.stateIn)(\"#BufferingDone\"),\n                                target: \"Idle\",\n                                actions: [(0, xstate_1.sendParent)({ type: \"SPEAK_COMPLETE\" })],\n                            },\n                        ],\n                    },\n                    states: {\n                        Buffer: {\n                            initial: \"BufferIdle\",\n                            on: {\n                                STREAMING_SET_VOICE: {\n                                    actions: \"assignCurrentVoice\",\n                                },\n                                STREAMING_SET_PERSONA: {\n                                    actions: \"sendParentCurrentPersona\",\n                                },\n                            },\n                            states: {\n                                BufferIdle: {\n                                    id: \"BufferIdle\",\n                                    entry: [\n                                        ({ event }) => console.debug(\"=== Entry BufferIdle\", event),\n                                    ],\n                                    on: {\n                                        STREAMING_CHUNK: {\n                                            actions: [\n                                                ({ event }) => console.debug(\"=================STREAMING_CHUNK: BufferIdle => Buffering\", event),\n                                            ],\n                                            target: \"Buffering\",\n                                        },\n                                    },\n                                },\n                                Buffering: {\n                                    id: \"Buffering\",\n                                    on: {\n                                        STREAMING_CHUNK: [\n                                            {\n                                                actions: [\n                                                    ({ event }) => console.debug(\"=================STREAMING_CHUNK: Buffering => Buffering\", event),\n                                                ],\n                                                target: \"Buffering\",\n                                                reenter: true,\n                                            },\n                                        ],\n                                        STREAMING_DONE: [\n                                            {\n                                                target: \"BufferingDone\",\n                                                actions: [\n                                                    ({ event }) => console.debug(\"=================STREAMING_DONE: Buffering => BufferingDone\", event),\n                                                ],\n                                            },\n                                        ],\n                                    },\n                                    entry: [\n                                        ({ event }) => console.debug(\"=== Entry Buffering\", event),\n                                        (0, xstate_1.assign)({\n                                            buffer: ({ context, event }) => context.buffer + event.value,\n                                        }),\n                                    ],\n                                },\n                                BufferingDone: {\n                                    entry: [\n                                        ({ event }) => console.debug(\"=== Entry BufferingDone\", event),\n                                    ],\n                                    id: \"BufferingDone\",\n                                },\n                            },\n                        },\n                        Speaker: {\n                            initial: \"SpeakingIdle\",\n                            states: {\n                                SpeakingIdle: {\n                                    entry: [\n                                        ({ event }) => console.debug(\"=== Entry SpeakingIdle\", event),\n                                    ],\n                                    always: [\n                                        {\n                                            target: \"Speak\",\n                                            guard: (0, xstate_1.stateIn)(\"#BufferingDone\"),\n                                            actions: [\n                                                ({ event }) => console.debug(\"========== in BufferingDone: SpeakingIdle => Speak\", event),\n                                                (0, xstate_1.assign)({\n                                                    utteranceFromStream: ({ context }) => context.buffer,\n                                                }),\n                                                (0, xstate_1.assign)({\n                                                    buffer: \"\",\n                                                }),\n                                            ],\n                                        },\n                                        {\n                                            target: \"PrepareSpeech\",\n                                            guard: \"bufferContainsUtterancePartReadyToBeSpoken\",\n                                        },\n                                    ],\n                                    after: {\n                                        FILLER_DELAY: {\n                                            target: \"SpeakingIdle\",\n                                            reenter: true,\n                                            actions: \"addFiller\",\n                                            guard: ({ context }) => context.buffer.includes(\" \"),\n                                        },\n                                    },\n                                },\n                                PrepareSpeech: {\n                                    entry: [\n                                        ({ event }) => console.debug(\"=== Entry PrepareSpeech\", event),\n                                        (0, xstate_1.assign)(({ context }) => {\n                                            let utterancePart;\n                                            let restOfBuffer;\n                                            const match = context.buffer.match(UTTERANCE_CHUNK_REGEX);\n                                            utterancePart = match[0];\n                                            restOfBuffer = context.buffer.substring(utterancePart.length);\n                                            return {\n                                                buffer: restOfBuffer,\n                                                utteranceFromStream: utterancePart,\n                                            };\n                                        }),\n                                    ],\n                                    always: [\n                                        {\n                                            target: \"Speak\",\n                                        },\n                                    ],\n                                },\n                                Speak: {\n                                    entry: [\n                                        ({ event }) => console.debug(\"=== Entry Speak\", event),\n                                    ],\n                                    initial: \"Go\",\n                                    on: {\n                                        TTS_STARTED: {\n                                            actions: (0, xstate_1.sendParent)({ type: \"TTS_STARTED\" }),\n                                        },\n                                        SPEAK_COMPLETE: [\n                                            {\n                                                guard: (0, xstate_1.stateIn)(\"#Buffering\"),\n                                                target: \"SpeakingIdle\",\n                                            },\n                                            {\n                                                guard: \"bufferIsNonEmpty\",\n                                                target: \"SpeakingIdle\",\n                                            },\n                                        ],\n                                    },\n                                    states: {\n                                        Go: {\n                                            invoke: {\n                                                src: \"start\",\n                                                input: ({ context }) => ({\n                                                    wsaTTS: context.wsaTTS,\n                                                    wsaUtt: context.wsaUtt,\n                                                    ttsLexicon: context.ttsLexicon,\n                                                    voice: context.currentVoice ||\n                                                        context.agenda.voice ||\n                                                        context.ttsDefaultVoice,\n                                                    utterance: context.utteranceFromStream,\n                                                }),\n                                            },\n                                            on: {\n                                                CONTROL: \"Paused\",\n                                            },\n                                            exit: \"ttsStop\",\n                                        },\n                                        Paused: {\n                                            on: {\n                                                CONTROL: \"Go\",\n                                            },\n                                        },\n                                    },\n                                },\n                            },\n                        },\n                    },\n                },\n                Speaking: {\n                    initial: \"Go\",\n                    on: {\n                        STOP: {\n                            target: \"Idle\",\n                        },\n                        TTS_STARTED: {\n                            actions: (0, xstate_1.sendParent)({ type: \"TTS_STARTED\" }),\n                        },\n                        SPEAK_COMPLETE: {\n                            target: \"Idle\",\n                        },\n                    },\n                    exit: (0, xstate_1.sendParent)({ type: \"SPEAK_COMPLETE\" }),\n                    states: {\n                        Go: {\n                            invoke: {\n                                src: \"start\",\n                                input: ({ context }) => ({\n                                    wsaTTS: context.wsaTTS,\n                                    wsaUtt: context.wsaUtt,\n                                    ttsLexicon: context.ttsLexicon,\n                                    voice: context.agenda.voice || context.ttsDefaultVoice,\n                                    // streamURL: context.agenda.streamURL,\n                                    utterance: context.agenda.utterance,\n                                }),\n                            },\n                            on: {\n                                CONTROL: \"Paused\",\n                            },\n                            exit: \"ttsStop\",\n                        },\n                        Paused: {\n                            on: {\n                                CONTROL: \"Go\",\n                            },\n                        },\n                    },\n                },\n            },\n        },\n        Fail: {},\n        GetToken: {\n            invoke: {\n                id: \"getAuthorizationToken\",\n                input: ({ context }) => ({\n                    credentials: context.azureCredentials,\n                }),\n                src: \"getToken\",\n                onDone: {\n                    target: \"Ponyfill\",\n                    actions: [\n                        (0, xstate_1.assign)(({ event }) => {\n                            return { azureAuthorizationToken: event.output };\n                        }),\n                    ],\n                },\n                onError: {\n                    actions: [\n                        (0, xstate_1.raise)({ type: \"ERROR\" }),\n                        ({ event }) => console.error(\"[TTS] getToken error\", event),\n                    ],\n                    target: \"Fail\",\n                },\n            },\n        },\n        Ponyfill: {\n            invoke: {\n                id: \"ponyTTS\",\n                src: \"ponyfill\",\n                input: ({ context }) => ({\n                    audioContext: context.audioContext,\n                    azureAuthorizationToken: context.azureAuthorizationToken,\n                    azureRegion: context.azureRegion,\n                }),\n            },\n        },\n    },\n});\nconst wrapSSML = (text, voice, lexicon, speechRate) => {\n    let content = `<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\" xmlns:mstts=\"http://www.w3.org/2001/mstts\" xml:lang=\"en-US\"><voice name=\"${voice}\">`;\n    if (lexicon) {\n        content = content + `<lexicon uri=\"${lexicon}\"/>`;\n    }\n    content =\n        content +\n            `<prosody rate=\"${speechRate}\">` +\n            `${text}</prosody></voice></speak>`;\n    return content;\n};\n", "export default function(array, extras) {\n  const map = {\n    ...[].reduce.call(\n      array,\n      (map, value, index) => {\n        map[index] = value;\n\n        return map;\n      },\n      {}\n    ),\n    ...extras,\n    length: array.length,\n    [Symbol.iterator]: () => [].slice.call(map)[Symbol.iterator]()\n  };\n\n  return map;\n}\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nconst createGuid: () => string = (): string => uuid();\r\n\r\nconst createNoDashGuid: () => string = (): string => createGuid().replace(new RegExp(\"-\", \"g\"), \"\").toUpperCase();\r\n\r\nexport { createGuid, createNoDashGuid };\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { createNoDashGuid } from \"./Guid.js\";\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\n\r\nexport enum EventType {\r\n    Debug,\r\n    Info,\r\n    Warning,\r\n    Error,\r\n    None,\r\n}\r\n\r\nexport class PlatformEvent {\r\n    private privName: string;\r\n    private privEventId: string;\r\n    private privEventTime: string;\r\n    private privEventType: EventType;\r\n    private privMetadata: IStringDictionary<string>;\r\n\r\n    public constructor(eventName: string, eventType: EventType) {\r\n        this.privName = eventName;\r\n        this.privEventId = createNoDashGuid();\r\n        this.privEventTime = new Date().toISOString();\r\n        this.privEventType = eventType;\r\n        this.privMetadata = { };\r\n    }\r\n\r\n    public get name(): string {\r\n        return this.privName;\r\n    }\r\n\r\n    public get eventId(): string {\r\n        return this.privEventId;\r\n    }\r\n\r\n    public get eventTime(): string {\r\n        return this.privEventTime;\r\n    }\r\n\r\n    public get eventType(): EventType {\r\n        return this.privEventType;\r\n    }\r\n\r\n    public get metadata(): IStringDictionary<string> {\r\n        return this.privMetadata;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent.js\";\r\n\r\nexport class AudioSourceEvent extends PlatformEvent {\r\n    private privAudioSourceId: string;\r\n\r\n    public constructor(eventName: string, audioSourceId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n        this.privAudioSourceId = audioSourceId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n}\r\n\r\nexport class AudioSourceInitializingEvent extends AudioSourceEvent {\r\n    public constructor(audioSourceId: string) {\r\n        super(\"AudioSourceInitializingEvent\", audioSourceId);\r\n    }\r\n}\r\n\r\nexport class AudioSourceReadyEvent extends AudioSourceEvent {\r\n    public constructor(audioSourceId: string) {\r\n        super(\"AudioSourceReadyEvent\", audioSourceId);\r\n    }\r\n}\r\n\r\nexport class AudioSourceOffEvent extends AudioSourceEvent {\r\n    public constructor(audioSourceId: string) {\r\n        super(\"AudioSourceOffEvent\", audioSourceId);\r\n    }\r\n}\r\n\r\nexport class AudioSourceErrorEvent extends AudioSourceEvent {\r\n    private privError: string;\r\n\r\n    public constructor(audioSourceId: string, error: string) {\r\n        super(\"AudioSourceErrorEvent\", audioSourceId, EventType.Error);\r\n        this.privError = error;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeEvent extends AudioSourceEvent {\r\n    private privAudioNodeId: string;\r\n\r\n    public constructor(eventName: string, audioSourceId: string, audioNodeId: string) {\r\n        super(eventName, audioSourceId);\r\n        this.privAudioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeAttachingEvent extends AudioStreamNodeEvent {\r\n    public constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(\"AudioStreamNodeAttachingEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeAttachedEvent extends AudioStreamNodeEvent {\r\n    public constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(\"AudioStreamNodeAttachedEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeDetachedEvent extends AudioStreamNodeEvent {\r\n    public constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(\"AudioStreamNodeDetachedEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeErrorEvent extends AudioStreamNodeEvent {\r\n    private privError: string;\r\n\r\n    public constructor(audioSourceId: string, audioNodeId: string, error: string) {\r\n        super(\"AudioStreamNodeErrorEvent\", audioSourceId, audioNodeId);\r\n        this.privError = error;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { ConnectionMessage } from \"./ConnectionMessage.js\";\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent.js\";\r\n\r\nexport class ServiceEvent extends PlatformEvent {\r\n    private privJsonResult: string;\r\n\r\n    public constructor(eventName: string, jsonstring: string, eventType: EventType = EventType.Info) {\r\n      super(eventName, eventType);\r\n      this.privJsonResult = jsonstring;\r\n    }\r\n\r\n    public get jsonString(): string {\r\n        return this.privJsonResult;\r\n    }\r\n}\r\n\r\nexport class ConnectionEvent extends PlatformEvent {\r\n    private privConnectionId: string;\r\n\r\n    public constructor(eventName: string, connectionId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n        this.privConnectionId = connectionId;\r\n    }\r\n\r\n    public get connectionId(): string {\r\n        return this.privConnectionId;\r\n    }\r\n}\r\n\r\nexport class ConnectionStartEvent extends ConnectionEvent {\r\n    private privUri: string;\r\n    private privHeaders: IStringDictionary<string>;\r\n\r\n    public constructor(connectionId: string, uri: string, headers?: IStringDictionary<string>) {\r\n        super(\"ConnectionStartEvent\", connectionId);\r\n        this.privUri = uri;\r\n        this.privHeaders = headers;\r\n    }\r\n\r\n    public get uri(): string {\r\n        return this.privUri;\r\n    }\r\n\r\n    public get headers(): IStringDictionary<string> {\r\n        return this.privHeaders;\r\n    }\r\n}\r\n\r\nexport class ConnectionEstablishedEvent extends ConnectionEvent {\r\n    public constructor(connectionId: string) {\r\n        super(\"ConnectionEstablishedEvent\", connectionId);\r\n    }\r\n}\r\n\r\nexport class ConnectionClosedEvent extends ConnectionEvent {\r\n    private privReason: string;\r\n    private privStatusCode: number;\r\n\r\n    public constructor(connectionId: string, statusCode: number, reason: string) {\r\n        super(\"ConnectionClosedEvent\", connectionId, EventType.Debug);\r\n        this.privReason = reason;\r\n        this.privStatusCode = statusCode;\r\n    }\r\n\r\n    public get reason(): string {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get statusCode(): number {\r\n        return this.privStatusCode;\r\n    }\r\n}\r\n\r\nexport class ConnectionErrorEvent extends ConnectionEvent {\r\n    private readonly privMessage: string;\r\n    private readonly privType: string;\r\n\r\n    public constructor(connectionId: string, message: string, type: string) {\r\n        super(\"ConnectionErrorEvent\", connectionId, EventType.Debug);\r\n        this.privMessage = message;\r\n        this.privType = type;\r\n    }\r\n\r\n    public get message(): string {\r\n        return this.privMessage;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privType;\r\n    }\r\n}\r\n\r\nexport class ConnectionEstablishErrorEvent extends ConnectionEvent {\r\n    private privStatusCode: number;\r\n    private privReason: string;\r\n\r\n    public constructor(connectionId: string, statuscode: number, reason: string) {\r\n        super(\"ConnectionEstablishErrorEvent\", connectionId, EventType.Error);\r\n        this.privStatusCode = statuscode;\r\n        this.privReason = reason;\r\n    }\r\n\r\n    public get reason(): string {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get statusCode(): number {\r\n        return this.privStatusCode;\r\n    }\r\n}\r\n\r\nexport class ConnectionMessageReceivedEvent extends ConnectionEvent {\r\n    private privNetworkReceivedTime: string;\r\n    private privMessage: ConnectionMessage;\r\n\r\n    public constructor(connectionId: string, networkReceivedTimeISO: string, message: ConnectionMessage) {\r\n        super(\"ConnectionMessageReceivedEvent\", connectionId);\r\n        this.privNetworkReceivedTime = networkReceivedTimeISO;\r\n        this.privMessage = message;\r\n    }\r\n\r\n    public get networkReceivedTime(): string {\r\n        return this.privNetworkReceivedTime;\r\n    }\r\n\r\n    public get message(): ConnectionMessage {\r\n        return this.privMessage;\r\n    }\r\n}\r\n\r\nexport class ConnectionMessageSentEvent extends ConnectionEvent {\r\n    private privNetworkSentTime: string;\r\n    private privMessage: ConnectionMessage;\r\n\r\n    public constructor(connectionId: string, networkSentTimeISO: string, message: ConnectionMessage) {\r\n        super(\"ConnectionMessageSentEvent\", connectionId);\r\n        this.privNetworkSentTime = networkSentTimeISO;\r\n        this.privMessage = message;\r\n    }\r\n\r\n    public get networkSentTime(): string {\r\n        return this.privNetworkSentTime;\r\n    }\r\n\r\n    public get message(): ConnectionMessage {\r\n        return this.privMessage;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\n/**\r\n * The error that is thrown when an argument passed in is null.\r\n *\r\n * @export\r\n * @class ArgumentNullError\r\n * @extends {Error}\r\n */\r\nexport class ArgumentNullError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of ArgumentNullError.\r\n     *\r\n     * @param {string} argumentName - Name of the argument that is null\r\n     *\r\n     * @memberOf ArgumentNullError\r\n     */\r\n    public constructor(argumentName: string) {\r\n        super(argumentName);\r\n        this.name = \"ArgumentNull\";\r\n        this.message = argumentName;\r\n    }\r\n}\r\n\r\n/**\r\n * The error that is thrown when an invalid operation is performed in the code.\r\n *\r\n * @export\r\n * @class InvalidOperationError\r\n * @extends {Error}\r\n */\r\nexport class InvalidOperationError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of InvalidOperationError.\r\n     *\r\n     * @param {string} error - The error\r\n     *\r\n     * @memberOf InvalidOperationError\r\n     */\r\n    public constructor(error: string) {\r\n        super(error);\r\n        this.name = \"InvalidOperation\";\r\n        this.message = error;\r\n    }\r\n}\r\n\r\n/**\r\n * The error that is thrown when an object is disposed.\r\n *\r\n * @export\r\n * @class ObjectDisposedError\r\n * @extends {Error}\r\n */\r\nexport class ObjectDisposedError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of ObjectDisposedError.\r\n     *\r\n     * @param {string} objectName - The object that is disposed\r\n     * @param {string} error - The error\r\n     *\r\n     * @memberOf ObjectDisposedError\r\n     */\r\n    public constructor(objectName: string, error?: string) {\r\n        super(error);\r\n        this.name = objectName + \"ObjectDisposed\";\r\n        this.message = error;\r\n    }\r\n}\r\n", "/* eslint-disable @typescript-eslint/no-unsafe-return */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"./Error.js\";\r\nimport { createNoDashGuid } from \"./Guid.js\";\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\n\r\nexport enum MessageType {\r\n    Text,\r\n    Binary,\r\n}\r\n\r\nexport class ConnectionMessage {\r\n\r\n    private privMessageType: MessageType;\r\n    private privHeaders: IStringDictionary<string>;\r\n    private privBody: any = null;\r\n    private privSize: number;\r\n\r\n    private privId: string;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        body: any,\r\n        headers?: IStringDictionary<string>,\r\n        id?: string) {\r\n\r\n        if (messageType === MessageType.Text && body && !(typeof (body) === \"string\")) {\r\n            throw new InvalidOperationError(\"Payload must be a string\");\r\n        }\r\n\r\n        if (messageType === MessageType.Binary && body && !(body instanceof ArrayBuffer)) {\r\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n        }\r\n\r\n        this.privMessageType = messageType;\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n        this.privBody = body;\r\n        this.privHeaders = headers ? headers : {};\r\n        this.privId = id ? id : createNoDashGuid();\r\n        switch (this.messageType) {\r\n            case MessageType.Binary:\r\n                this.privSize = this.binaryBody !== null ? this.binaryBody.byteLength : 0;\r\n                break;\r\n            case MessageType.Text:\r\n                this.privSize = this.textBody.length;\r\n        }\r\n    }\r\n\r\n    public get messageType(): MessageType {\r\n        return this.privMessageType;\r\n    }\r\n\r\n    public get headers(): IStringDictionary<string> {\r\n        return this.privHeaders;\r\n    }\r\n\r\n    public get body(): any {\r\n        return this.privBody;\r\n    }\r\n\r\n    public get textBody(): string {\r\n        if (this.privMessageType === MessageType.Binary) {\r\n            throw new InvalidOperationError(\"Not supported for binary message\");\r\n        }\r\n\r\n        return this.privBody as string;\r\n    }\r\n\r\n    public get binaryBody(): ArrayBuffer {\r\n        if (this.privMessageType === MessageType.Text) {\r\n            throw new InvalidOperationError(\"Not supported for text message\");\r\n        }\r\n\r\n        return this.privBody;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class ConnectionOpenResponse {\r\n    private privStatusCode: number;\r\n    private privReason: string;\r\n\r\n    public constructor(statusCode: number, reason: string) {\r\n        this.privStatusCode = statusCode;\r\n        this.privReason = reason;\r\n    }\r\n\r\n    public get statusCode(): number {\r\n        return this.privStatusCode;\r\n    }\r\n\r\n    public get reason(): string {\r\n        return this.privReason;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Deferred } from \"./Promise.js\";\r\n\r\n/**\r\n * The error that is thrown when an argument passed in is null.\r\n *\r\n * @export\r\n * @class DefferalMap\r\n */\r\n\r\nexport class DeferralMap {\r\n    private privMap: { [id: string]: Deferred<any> } = {};\r\n\r\n    public add<T>(id: string, deferral: Deferred<T>): void {\r\n        this.privMap[id] = deferral;\r\n    }\r\n\r\n    public getId(id: string): Deferred<any> {\r\n        return this.privMap[id];\r\n    }\r\n\r\n    public complete<T>(id: string, result: T): void {\r\n        try {\r\n            this.privMap[id].resolve(result);\r\n        } catch (error) {\r\n            this.privMap[id].reject(error as string);\r\n        } finally {\r\n            this.privMap[id] = undefined;\r\n         }\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { AgentConfig } from \"../common.speech/Exports.js\";\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent.js\";\r\n\r\nexport class DialogEvent extends PlatformEvent {\r\n\r\n    public constructor(eventName: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n    }\r\n}\r\n\r\nexport class SendingAgentContextMessageEvent extends DialogEvent {\r\n    private privAgentConfig: AgentConfig;\r\n\r\n    public constructor(agentConfig: AgentConfig) {\r\n        super(\"SendingAgentContextMessageEvent\");\r\n        this.privAgentConfig = agentConfig;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ObjectDisposedError } from \"./Error.js\";\r\nimport { createNoDashGuid } from \"./Guid.js\";\r\nimport { IDetachable } from \"./IDetachable.js\";\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\nimport { IEventListener } from \"./IEventListener.js\";\r\nimport { IEventSource } from \"./IEventSource.js\";\r\nimport { PlatformEvent } from \"./PlatformEvent.js\";\r\n\r\nexport class EventSource<TEvent extends PlatformEvent> implements IEventSource<TEvent> {\r\n    private privEventListeners: IStringDictionary<(event: TEvent) => void> = {};\r\n    private privMetadata: IStringDictionary<string>;\r\n    private privIsDisposed: boolean = false;\r\n    private privConsoleListener: IDetachable = undefined;\r\n\r\n    public constructor(metadata?: IStringDictionary<string>) {\r\n        this.privMetadata = metadata;\r\n    }\r\n\r\n    public onEvent(event: TEvent): void {\r\n        if (this.isDisposed()) {\r\n            throw (new ObjectDisposedError(\"EventSource\"));\r\n        }\r\n\r\n        if (this.metadata) {\r\n            for (const paramName in this.metadata) {\r\n                if (paramName) {\r\n                    if (event.metadata) {\r\n                        if (!event.metadata[paramName]) {\r\n                            event.metadata[paramName] = this.metadata[paramName];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const eventId in this.privEventListeners) {\r\n            if (eventId && this.privEventListeners[eventId]) {\r\n                this.privEventListeners[eventId](event);\r\n            }\r\n        }\r\n    }\r\n\r\n    public attach(onEventCallback: (event: TEvent) => void): IDetachable {\r\n        const id = createNoDashGuid();\r\n        this.privEventListeners[id] = onEventCallback;\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privEventListeners[id];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public attachListener(listener: IEventListener<TEvent>): IDetachable {\r\n        return this.attach((e: TEvent): void => listener.onEvent(e));\r\n    }\r\n\r\n    public attachConsoleListener(listener: IEventListener<TEvent>): IDetachable {\r\n        if (!!this.privConsoleListener) {\r\n            void this.privConsoleListener.detach(); // Detach implementation for eventListeners is synchronous\r\n        }\r\n        this.privConsoleListener = this.attach((e: TEvent): void => listener.onEvent(e));\r\n        return this.privConsoleListener;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.privEventListeners = null;\r\n        this.privIsDisposed = true;\r\n    }\r\n\r\n    public get metadata(): IStringDictionary<string> {\r\n        return this.privMetadata;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError } from \"./Error.js\";\r\nimport { EventSource } from \"./EventSource.js\";\r\nimport { IEventSource } from \"./IEventSource.js\";\r\nimport { PlatformEvent } from \"./PlatformEvent.js\";\r\n\r\nexport class Events {\r\n    private static privInstance: IEventSource<PlatformEvent> = new EventSource<PlatformEvent>();\r\n\r\n    public static setEventSource(eventSource: IEventSource<PlatformEvent>): void {\r\n        if (!eventSource) {\r\n            throw new ArgumentNullError(\"eventSource\");\r\n        }\r\n\r\n        Events.privInstance = eventSource;\r\n    }\r\n\r\n    public static get instance(): IEventSource<PlatformEvent> {\r\n        return Events.privInstance;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ConnectionEvent } from \"./ConnectionEvents.js\";\r\nimport { ConnectionMessage } from \"./ConnectionMessage.js\";\r\nimport { ConnectionOpenResponse } from \"./ConnectionOpenResponse.js\";\r\nimport { EventSource } from \"./EventSource.js\";\r\n\r\nexport enum ConnectionState {\r\n    None,\r\n    Connected,\r\n    Connecting,\r\n    Disconnected,\r\n}\r\n\r\nexport interface IConnection {\r\n    id: string;\r\n    state(): ConnectionState;\r\n    open(): Promise<ConnectionOpenResponse>;\r\n    send(message: ConnectionMessage): Promise<void>;\r\n    read(): Promise<ConnectionMessage>;\r\n    events: EventSource<ConnectionEvent>;\r\n    dispose(disposing?: string): Promise<void>;\r\n}\r\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n\n//# sourceMappingURL=IErrorMessages.js.map\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ObjectDisposedError } from \"./Error.js\";\r\nimport { IDetachable } from \"./IDetachable.js\";\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\nimport { IDisposable } from \"./IDisposable.js\";\r\n\r\nexport interface IList<TItem> extends IDisposable {\r\n    get(itemIndex: number): TItem;\r\n    first(): TItem;\r\n    last(): TItem;\r\n\r\n    add(item: TItem): void;\r\n    insertAt(index: number, item: TItem): void;\r\n\r\n    removeFirst(): TItem;\r\n    removeLast(): TItem;\r\n    removeAt(index: number): TItem;\r\n    remove(index: number, count: number): TItem[];\r\n    clear(): void;\r\n\r\n    length(): number;\r\n\r\n    onAdded(addedCallback: () => void): IDetachable;\r\n    onRemoved(removedCallback: () => void): IDetachable;\r\n    onDisposed(disposedCallback: () => void): IDetachable;\r\n\r\n    join(seperator?: string): string;\r\n\r\n    toArray(): TItem[];\r\n\r\n    any(callback?: (item: TItem, index: number) => boolean): boolean;\r\n    all(callback: (item: TItem) => boolean): boolean;\r\n    forEach(callback: (item: TItem, index: number) => void): void;\r\n    select<T2>(callback: (item: TItem, index: number) => T2): List<T2>;\r\n    where(callback: (item: TItem, index: number) => boolean): List<TItem>;\r\n    orderBy(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    orderByDesc(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    clone(): List<TItem>;\r\n    concat(list: List<TItem>): List<TItem>;\r\n    concatArray(array: TItem[]): List<TItem>;\r\n}\r\n\r\nexport class List<TItem> implements IList<TItem>  {\r\n    private privList: TItem[];\r\n    private privSubscriptionIdCounter: number = 0;\r\n    private privAddSubscriptions: IStringDictionary<() => void> = {};\r\n    private privRemoveSubscriptions: IStringDictionary<() => void> = {};\r\n    private privDisposedSubscriptions: IStringDictionary<() => void> = {};\r\n    private privDisposeReason: string = null;\r\n\r\n    public constructor(list?: TItem[]) {\r\n        this.privList = [];\r\n        // copy the list rather than taking as is.\r\n        if (list) {\r\n            for (const item of list) {\r\n                this.privList.push(item);\r\n            }\r\n        }\r\n    }\r\n\r\n    public get(itemIndex: number): TItem {\r\n        this.throwIfDisposed();\r\n        return this.privList[itemIndex];\r\n    }\r\n\r\n    public first(): TItem {\r\n        return this.get(0);\r\n    }\r\n\r\n    public last(): TItem {\r\n        return this.get(this.length() - 1);\r\n    }\r\n\r\n    public add(item: TItem): void {\r\n        this.throwIfDisposed();\r\n        this.insertAt(this.privList.length, item);\r\n    }\r\n\r\n    public insertAt(index: number, item: TItem): void {\r\n        this.throwIfDisposed();\r\n        if (index === 0) {\r\n            this.privList.unshift(item);\r\n        } else if (index === this.privList.length) {\r\n            this.privList.push(item);\r\n        } else {\r\n            this.privList.splice(index, 0, item);\r\n        }\r\n        this.triggerSubscriptions(this.privAddSubscriptions);\r\n    }\r\n\r\n    public removeFirst(): TItem {\r\n        this.throwIfDisposed();\r\n        return this.removeAt(0);\r\n    }\r\n\r\n    public removeLast(): TItem {\r\n        this.throwIfDisposed();\r\n        return this.removeAt(this.length() - 1);\r\n    }\r\n\r\n    public removeAt(index: number): TItem {\r\n        this.throwIfDisposed();\r\n        return this.remove(index, 1)[0];\r\n    }\r\n\r\n    public remove(index: number, count: number): TItem[] {\r\n        this.throwIfDisposed();\r\n        const removedElements = this.privList.splice(index, count);\r\n        this.triggerSubscriptions(this.privRemoveSubscriptions);\r\n        return removedElements;\r\n    }\r\n\r\n    public clear(): void {\r\n        this.throwIfDisposed();\r\n        this.remove(0, this.length());\r\n    }\r\n\r\n    public length(): number {\r\n        this.throwIfDisposed();\r\n        return this.privList.length;\r\n    }\r\n\r\n    public onAdded(addedCallback: () => void): IDetachable {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privAddSubscriptions[subscriptionId] = addedCallback;\r\n\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privAddSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public onRemoved(removedCallback: () => void): IDetachable {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privRemoveSubscriptions[subscriptionId] = removedCallback;\r\n\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privRemoveSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public onDisposed(disposedCallback: () => void): IDetachable {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privDisposedSubscriptions[subscriptionId] = disposedCallback;\r\n\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                delete this.privDisposedSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public join(seperator?: string): string {\r\n        this.throwIfDisposed();\r\n        return this.privList.join(seperator);\r\n    }\r\n\r\n    public toArray(): TItem[] {\r\n        const cloneCopy = Array<TItem>();\r\n        this.privList.forEach((val: TItem): void => {\r\n            cloneCopy.push(val);\r\n        });\r\n        return cloneCopy;\r\n    }\r\n\r\n    public any(callback?: (item: TItem, index: number) => boolean): boolean {\r\n        this.throwIfDisposed();\r\n        if (callback) {\r\n            return this.where(callback).length() > 0;\r\n        } else {\r\n            return this.length() > 0;\r\n        }\r\n    }\r\n\r\n    public all(callback: (item: TItem) => boolean): boolean {\r\n        this.throwIfDisposed();\r\n        return this.where(callback).length() === this.length();\r\n    }\r\n\r\n    public forEach(callback: (item: TItem, index: number) => void): void {\r\n        this.throwIfDisposed();\r\n        for (let i = 0; i < this.length(); i++) {\r\n            callback(this.privList[i], i);\r\n        }\r\n    }\r\n\r\n    public select<T2>(callback: (item: TItem, index: number) => T2): List<T2> {\r\n        this.throwIfDisposed();\r\n        const selectList: T2[] = [];\r\n        for (let i = 0; i < this.privList.length; i++) {\r\n            selectList.push(callback(this.privList[i], i));\r\n        }\r\n\r\n        return new List<T2>(selectList);\r\n    }\r\n\r\n    public where(callback: (item: TItem, index: number) => boolean): List<TItem> {\r\n        this.throwIfDisposed();\r\n        const filteredList = new List<TItem>();\r\n        for (let i = 0; i < this.privList.length; i++) {\r\n            if (callback(this.privList[i], i)) {\r\n                filteredList.add(this.privList[i]);\r\n            }\r\n        }\r\n        return filteredList;\r\n    }\r\n\r\n    public orderBy(compareFn: (a: TItem, b: TItem) => number): List<TItem> {\r\n        this.throwIfDisposed();\r\n        const clonedArray = this.toArray();\r\n        const orderedArray = clonedArray.sort(compareFn);\r\n        return new List(orderedArray);\r\n    }\r\n\r\n    public orderByDesc(compareFn: (a: TItem, b: TItem) => number): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return this.orderBy((a: TItem, b: TItem): number => compareFn(b, a));\r\n    }\r\n\r\n    public clone(): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.toArray());\r\n    }\r\n\r\n    public concat(list: List<TItem>): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.privList.concat(list.toArray()));\r\n    }\r\n\r\n    public concatArray(array: TItem[]): List<TItem> {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.privList.concat(array));\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privList == null;\r\n    }\r\n\r\n    public dispose(reason?: string): void {\r\n        if (!this.isDisposed()) {\r\n            this.privDisposeReason = reason;\r\n            this.privList = null;\r\n            this.privAddSubscriptions = null;\r\n            this.privRemoveSubscriptions = null;\r\n            this.triggerSubscriptions(this.privDisposedSubscriptions);\r\n        }\r\n    }\r\n\r\n    private throwIfDisposed(): void {\r\n        if (this.isDisposed()) {\r\n            throw new ObjectDisposedError(\"List\", this.privDisposeReason);\r\n        }\r\n    }\r\n\r\n    private triggerSubscriptions(subscriptions: IStringDictionary<() => void>): void {\r\n        if (subscriptions) {\r\n            for (const subscriptionId in subscriptions) {\r\n                if (subscriptionId) {\r\n                    subscriptions[subscriptionId]();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file, @typescript-eslint/typedef */\r\n\r\nexport enum PromiseState {\r\n    None,\r\n    Resolved,\r\n    Rejected,\r\n}\r\n\r\nexport interface IDeferred<T> {\r\n    readonly promise: Promise<T>;\r\n\r\n    resolve(result: T): IDeferred<T>;\r\n\r\n    reject(error: string): IDeferred<T>;\r\n}\r\n\r\nexport class PromiseResult<T> {\r\n    protected privIsCompleted: boolean;\r\n    protected privIsError: boolean;\r\n    protected privError: string;\r\n    protected privResult: T;\r\n\r\n    public constructor(promiseResultEventSource: PromiseResultEventSource<T>) {\r\n        promiseResultEventSource.on((result: T): void => {\r\n            if (!this.privIsCompleted) {\r\n                this.privIsCompleted = true;\r\n                this.privIsError = false;\r\n                this.privResult = result;\r\n            }\r\n        }, (error: string): void => {\r\n            if (!this.privIsCompleted) {\r\n                this.privIsCompleted = true;\r\n                this.privIsError = true;\r\n                this.privError = error;\r\n            }\r\n        });\r\n    }\r\n\r\n    public get isCompleted(): boolean {\r\n        return this.privIsCompleted;\r\n    }\r\n\r\n    public get isError(): boolean {\r\n        return this.privIsError;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n\r\n    public get result(): T {\r\n        return this.privResult;\r\n    }\r\n\r\n    public throwIfError = (): void => {\r\n        if (this.isError) {\r\n            throw this.error;\r\n        }\r\n    };\r\n}\r\n\r\nexport class PromiseResultEventSource<T>  {\r\n\r\n    private privOnSetResult: (result: T) => void;\r\n    private privOnSetError: (error: string) => void;\r\n\r\n    public setResult = (result: T): void => {\r\n        this.privOnSetResult(result);\r\n    };\r\n\r\n    public setError = (error: string): void => {\r\n        this.privOnSetError(error);\r\n    };\r\n\r\n    public on = (onSetResult: (result: T) => void, onSetError: (error: string) => void): void => {\r\n        this.privOnSetResult = onSetResult;\r\n        this.privOnSetError = onSetError;\r\n    };\r\n}\r\n\r\nexport class Deferred<T> implements IDeferred<T> {\r\n    private privPromise: Promise<T>;\r\n    private privResolve: (value?: T | PromiseLike<T>) => void;\r\n    private privReject: (reason?: any) => void;\r\n\r\n    public constructor() {\r\n        // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\n        this.privPromise = new Promise<T>((resolve: (value: T) => void, reject: (reason: any) => void) => {\r\n            this.privResolve = resolve;\r\n            this.privReject = reject;\r\n        });\r\n    }\r\n\r\n    public get promise(): Promise<T> {\r\n        return this.privPromise;\r\n    }\r\n\r\n    public resolve = (result: T | Promise<T>): Deferred<T> => {\r\n        this.privResolve(result);\r\n        return this;\r\n    };\r\n\r\n    public reject = (error: string): Deferred<T> => {\r\n        this.privReject(error);\r\n        return this;\r\n    };\r\n}\r\n\r\nexport class Sink<T> {\r\n    private privState: PromiseState = PromiseState.None;\r\n    private privPromiseResult: PromiseResult<T> = null;\r\n    private privPromiseResultEvents: PromiseResultEventSource<T> = null;\r\n\r\n    private privSuccessHandlers: ((result: T) => void)[] = [];\r\n    private privErrorHandlers: ((e: string) => void)[] = [];\r\n\r\n    public constructor() {\r\n        this.privPromiseResultEvents = new PromiseResultEventSource();\r\n        this.privPromiseResult = new PromiseResult(this.privPromiseResultEvents);\r\n    }\r\n\r\n    public get state(): PromiseState {\r\n        return this.privState;\r\n    }\r\n\r\n    public get result(): PromiseResult<T> {\r\n        return this.privPromiseResult;\r\n    }\r\n\r\n    public resolve(result: T): void {\r\n        if (this.privState !== PromiseState.None) {\r\n            throw new Error(\"'Cannot resolve a completed promise'\");\r\n        }\r\n\r\n        this.privState = PromiseState.Resolved;\r\n        this.privPromiseResultEvents.setResult(result);\r\n\r\n        for (let i = 0; i < this.privSuccessHandlers.length; i++) {\r\n            this.executeSuccessCallback(result, this.privSuccessHandlers[i], this.privErrorHandlers[i]);\r\n        }\r\n\r\n        this.detachHandlers();\r\n    }\r\n\r\n    public reject(error: string): void {\r\n        if (this.privState !== PromiseState.None) {\r\n            throw new Error(\"'Cannot reject a completed promise'\");\r\n        }\r\n\r\n        this.privState = PromiseState.Rejected;\r\n        this.privPromiseResultEvents.setError(error);\r\n\r\n        for (const errorHandler of this.privErrorHandlers) {\r\n            this.executeErrorCallback(error, errorHandler);\r\n        }\r\n\r\n        this.detachHandlers();\r\n    }\r\n\r\n    public on(\r\n        successCallback: (result: T) => void,\r\n        errorCallback: (error: string) => void): void {\r\n\r\n        if (successCallback == null) {\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            successCallback = (): void => { };\r\n        }\r\n\r\n        if (this.privState === PromiseState.None) {\r\n            this.privSuccessHandlers.push(successCallback);\r\n            this.privErrorHandlers.push(errorCallback);\r\n        } else {\r\n            if (this.privState === PromiseState.Resolved) {\r\n                this.executeSuccessCallback(this.privPromiseResult.result, successCallback, errorCallback);\r\n            } else if (this.privState === PromiseState.Rejected) {\r\n                this.executeErrorCallback(this.privPromiseResult.error, errorCallback);\r\n            }\r\n\r\n            this.detachHandlers();\r\n        }\r\n    }\r\n\r\n    private executeSuccessCallback(result: T, successCallback: (result: T) => void, errorCallback: (error: string) => void): void {\r\n        try {\r\n            successCallback(result);\r\n        } catch (e) {\r\n            this.executeErrorCallback(`'Unhandled callback error: ${e as string}'`, errorCallback);\r\n        }\r\n    }\r\n\r\n    private executeErrorCallback(error: string, errorCallback: (error: string) => void): void {\r\n        if (errorCallback) {\r\n            try {\r\n                errorCallback(error);\r\n            } catch (e) {\r\n                throw new Error(`'Unhandled callback error: ${e as string}. InnerError: ${error}'`);\r\n            }\r\n        } else {\r\n            throw new Error(`'Unhandled error: ${error}'`);\r\n        }\r\n    }\r\n\r\n    private detachHandlers(): void {\r\n        this.privErrorHandlers = [];\r\n        this.privSuccessHandlers = [];\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line prefer-arrow/prefer-arrow-functions\r\nexport function marshalPromiseToCallbacks<T>(\r\n    promise: Promise<T>,\r\n    cb?: (value: T) => void,\r\n    err?: (error: string) => void): void {\r\n    promise.then((val: T): void => {\r\n        try {\r\n            if (!!cb) {\r\n                cb(val);\r\n            }\r\n        } catch (error) {\r\n            if (!!err) {\r\n                try {\r\n                    if (error instanceof Error) {\r\n                        const typedError: Error = error ;\r\n                        err(typedError.name + \": \" + typedError.message);\r\n                    } else {\r\n                        err(error as string);\r\n                    }\r\n                // eslint-disable-next-line no-empty\r\n                } catch (error) { }\r\n            }\r\n        }\r\n    }, (error: any): void => {\r\n        if (!!err) {\r\n            try {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            // eslint-disable-next-line no-empty\r\n            } catch (error) { }\r\n        }\r\n    });\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError, ObjectDisposedError } from \"./Error.js\";\r\nimport { IDetachable } from \"./IDetachable.js\";\r\nimport { IDisposable } from \"./IDisposable.js\";\r\nimport { List } from \"./List.js\";\r\nimport {\r\n    Deferred,\r\n} from \"./Promise.js\";\r\nexport interface IQueue<TItem> extends IDisposable {\r\n    enqueue(item: TItem): void;\r\n    enqueueFromPromise(promise: Promise<TItem>): void;\r\n    dequeue(): Promise<TItem>;\r\n    peek(): Promise<TItem>;\r\n    length(): number;\r\n}\r\n\r\nenum SubscriberType {\r\n    Dequeue,\r\n    Peek,\r\n}\r\n\r\nexport class Queue<TItem> implements IQueue<TItem> {\r\n    private privPromiseStore: List<Promise<TItem>> = new List<Promise<TItem>>();\r\n    private privList: List<TItem>;\r\n    private privDetachables: IDetachable[];\r\n    private privSubscribers: List<{ type: SubscriberType; deferral: Deferred<TItem> }>;\r\n    private privIsDrainInProgress: boolean = false;\r\n    private privIsDisposing: boolean = false;\r\n    private privDisposeReason: string = null;\r\n\r\n    public constructor(list?: List<TItem>) {\r\n        this.privList = list ? list : new List<TItem>();\r\n        this.privDetachables = [];\r\n        this.privSubscribers = new List<{ type: SubscriberType; deferral: Deferred<TItem> }>();\r\n        this.privDetachables.push(this.privList.onAdded((): void => this.drain()));\r\n    }\r\n\r\n    public enqueue(item: TItem): void {\r\n        this.throwIfDispose();\r\n        this.enqueueFromPromise(new Promise<TItem>((resolve: (value: TItem) => void): void => resolve(item)));\r\n    }\r\n\r\n    public enqueueFromPromise(promise: Promise<TItem>): void {\r\n        this.throwIfDispose();\r\n        promise.then((val: TItem): void => {\r\n            this.privList.add(val);\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        }, (): void => { });\r\n    }\r\n\r\n    public dequeue(): Promise<TItem> {\r\n        this.throwIfDispose();\r\n        const deferredSubscriber = new Deferred<TItem>();\r\n\r\n        if (this.privSubscribers) {\r\n            this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Dequeue });\r\n            this.drain();\r\n        }\r\n\r\n        return deferredSubscriber.promise;\r\n    }\r\n\r\n    public peek(): Promise<TItem> {\r\n        this.throwIfDispose();\r\n        const deferredSubscriber = new Deferred<TItem>();\r\n\r\n        const subs = this.privSubscribers;\r\n        if (subs) {\r\n            this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Peek });\r\n            this.drain();\r\n        }\r\n\r\n        return deferredSubscriber.promise;\r\n    }\r\n\r\n    public length(): number {\r\n        this.throwIfDispose();\r\n        return this.privList.length();\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privSubscribers == null;\r\n    }\r\n\r\n    public async drainAndDispose(pendingItemProcessor: (pendingItemInQueue: TItem) => void, reason?: string): Promise<void> {\r\n        if (!this.isDisposed() && !this.privIsDisposing) {\r\n            this.privDisposeReason = reason;\r\n            this.privIsDisposing = true;\r\n\r\n            const subs = this.privSubscribers;\r\n            if (subs) {\r\n                while (subs.length() > 0) {\r\n                    const subscriber = subs.removeFirst();\r\n                    // TODO: this needs work (Resolve(null) instead?).\r\n                    subscriber.deferral.resolve(undefined);\r\n                    // subscriber.deferral.reject(\"Disposed\");\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privSubscribers === subs) {\r\n                    this.privSubscribers = subs;\r\n                }\r\n            }\r\n\r\n            for (const detachable of this.privDetachables) {\r\n                await detachable.detach();\r\n            }\r\n\r\n            if (this.privPromiseStore.length() > 0 && pendingItemProcessor) {\r\n                const promiseArray: Promise<TItem>[] = [];\r\n\r\n                this.privPromiseStore.toArray().forEach((wrapper: Promise<TItem>): void => {\r\n                    promiseArray.push(wrapper);\r\n                });\r\n                return Promise.all(promiseArray).finally((): void => {\r\n                    this.privSubscribers = null;\r\n                    this.privList.forEach((item: TItem): void => {\r\n                        pendingItemProcessor(item);\r\n                    });\r\n                    this.privList = null;\r\n                    return;\r\n                }).then<void>();\r\n            } else {\r\n                this.privSubscribers = null;\r\n                this.privList = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        await this.drainAndDispose(null, reason);\r\n    }\r\n\r\n    private drain(): void {\r\n        if (!this.privIsDrainInProgress && !this.privIsDisposing) {\r\n            this.privIsDrainInProgress = true;\r\n\r\n            const subs = this.privSubscribers;\r\n            const lists = this.privList;\r\n            if (subs && lists) {\r\n                while (lists.length() > 0 && subs.length() > 0 && !this.privIsDisposing) {\r\n                    const subscriber = subs.removeFirst();\r\n                    if (subscriber.type === SubscriberType.Peek) {\r\n                        subscriber.deferral.resolve(lists.first());\r\n                    } else {\r\n                        const dequeuedItem = lists.removeFirst();\r\n                        subscriber.deferral.resolve(dequeuedItem);\r\n                    }\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privSubscribers === subs) {\r\n                    this.privSubscribers = subs;\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privList === lists) {\r\n                    this.privList = lists;\r\n                }\r\n            }\r\n\r\n            this.privIsDrainInProgress = false;\r\n        }\r\n    }\r\n\r\n    private throwIfDispose(): void {\r\n        if (this.isDisposed()) {\r\n            if (this.privDisposeReason) {\r\n                throw new InvalidOperationError(this.privDisposeReason);\r\n            }\r\n\r\n            throw new ObjectDisposedError(\"Queue\");\r\n        } else if (this.privIsDisposing) {\r\n            throw new InvalidOperationError(\"Queue disposing\");\r\n        }\r\n    }\r\n}\r\n", "/* eslint-disable @typescript-eslint/no-unsafe-assignment */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { MessageType } from \"./ConnectionMessage.js\";\r\nimport { ArgumentNullError, InvalidOperationError } from \"./Error.js\";\r\nimport { createNoDashGuid } from \"./Guid.js\";\r\n\r\nexport class RawWebsocketMessage {\r\n    private privMessageType: MessageType;\r\n    private privPayload: any = null;\r\n    private privId: string;\r\n\r\n    public constructor(messageType: MessageType, payload: any, id?: string) {\r\n        if (!payload) {\r\n            throw new ArgumentNullError(\"payload\");\r\n        }\r\n\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n        if (messageType === MessageType.Binary && Object.getPrototypeOf(payload).constructor.name !== \"ArrayBuffer\") {\r\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n        }\r\n\r\n        if (messageType === MessageType.Text && !(typeof (payload) === \"string\")) {\r\n            throw new InvalidOperationError(\"Payload must be a string\");\r\n        }\r\n\r\n        this.privMessageType = messageType;\r\n        this.privPayload = payload;\r\n        this.privId = id ? id : createNoDashGuid();\r\n    }\r\n\r\n    public get messageType(): MessageType {\r\n        return this.privMessageType;\r\n    }\r\n\r\n    public get payload(): any {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n        return this.privPayload;\r\n    }\r\n\r\n    public get textContent(): string {\r\n        if (this.privMessageType === MessageType.Binary) {\r\n            throw new InvalidOperationError(\"Not supported for binary message\");\r\n        }\r\n\r\n        return this.privPayload as string;\r\n    }\r\n\r\n    public get binaryContent(): ArrayBuffer {\r\n        if (this.privMessageType === MessageType.Text) {\r\n            throw new InvalidOperationError(\"Not supported for text message\");\r\n        }\r\n\r\n        return this.privPayload as ArrayBuffer;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class RiffPcmEncoder {\r\n\r\n    private privActualSampleRate: number;\r\n    private privDesiredSampleRate: number;\r\n\r\n    public constructor(actualSampleRate: number, desiredSampleRate: number) {\r\n        this.privActualSampleRate = actualSampleRate;\r\n        this.privDesiredSampleRate = desiredSampleRate;\r\n    }\r\n\r\n    public encode(actualAudioFrame: Float32Array): ArrayBuffer {\r\n\r\n        const audioFrame = this.downSampleAudioFrame(actualAudioFrame, this.privActualSampleRate, this.privDesiredSampleRate);\r\n\r\n        if (!audioFrame) {\r\n            return null;\r\n        }\r\n\r\n        const audioLength = audioFrame.length * 2;\r\n\r\n        const buffer = new ArrayBuffer(audioLength);\r\n        const view = new DataView(buffer);\r\n        this.floatTo16BitPCM(view, 0, audioFrame);\r\n\r\n        return buffer;\r\n    }\r\n\r\n    private setString(view: DataView, offset: number, str: string): void {\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(offset + i, str.charCodeAt(i));\r\n        }\r\n    }\r\n\r\n    private floatTo16BitPCM(view: DataView, offset: number, input: Float32Array): void {\r\n        for (let i = 0; i < input.length; i++ , offset += 2) {\r\n            const s = Math.max(-1, Math.min(1, input[i]));\r\n            view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\r\n        }\r\n    }\r\n\r\n    private downSampleAudioFrame(\r\n        srcFrame: Float32Array,\r\n        srcRate: number,\r\n        dstRate: number): Float32Array {\r\n\r\n        if (!srcFrame) {\r\n            return null;\r\n        }\r\n\r\n        if (dstRate === srcRate || dstRate > srcRate) {\r\n            return srcFrame;\r\n        }\r\n\r\n        const ratio = srcRate / dstRate;\r\n        const dstLength = Math.round(srcFrame.length / ratio);\r\n        const dstFrame = new Float32Array(dstLength);\r\n        let srcOffset = 0;\r\n        let dstOffset = 0;\r\n        while (dstOffset < dstLength) {\r\n            const nextSrcOffset = Math.round((dstOffset + 1) * ratio);\r\n            let accum = 0;\r\n            let count = 0;\r\n            while (srcOffset < nextSrcOffset && srcOffset < srcFrame.length) {\r\n                accum += srcFrame[srcOffset++];\r\n                count++;\r\n            }\r\n            dstFrame[dstOffset++] = accum / count;\r\n        }\r\n\r\n        return dstFrame;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"./Error.js\";\r\nimport { createNoDashGuid } from \"./Guid.js\";\r\nimport { Queue } from \"./Queue.js\";\r\n\r\nexport interface IStreamChunk<TBuffer> {\r\n    isEnd: boolean;\r\n    buffer: TBuffer;\r\n    timeReceived: number;\r\n}\r\n\r\nexport class Stream<TBuffer> {\r\n    private privId: string;\r\n    private privIsWriteEnded: boolean = false;\r\n    private privIsReadEnded: boolean = false;\r\n    private privReaderQueue: Queue<IStreamChunk<TBuffer>>;\r\n\r\n    public constructor(streamId?: string) {\r\n        this.privId = streamId ? streamId : createNoDashGuid();\r\n        this.privReaderQueue = new Queue<IStreamChunk<TBuffer>>();\r\n    }\r\n\r\n    public get isClosed(): boolean {\r\n        return this.privIsWriteEnded;\r\n    }\r\n\r\n    public get isReadEnded(): boolean {\r\n        return this.privIsReadEnded;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public close(): void {\r\n        if (!this.privIsWriteEnded) {\r\n            this.writeStreamChunk({\r\n                buffer: null,\r\n                isEnd: true,\r\n                timeReceived: Date.now(),\r\n            });\r\n            this.privIsWriteEnded = true;\r\n        }\r\n    }\r\n\r\n    public writeStreamChunk(streamChunk: IStreamChunk<TBuffer>): void {\r\n        this.throwIfClosed();\r\n        if (!this.privReaderQueue.isDisposed()) {\r\n            try {\r\n                this.privReaderQueue.enqueue(streamChunk);\r\n            } catch (e) {\r\n                // Do nothing\r\n            }\r\n        }\r\n    }\r\n\r\n    public read(): Promise<IStreamChunk<TBuffer>> {\r\n        if (this.privIsReadEnded) {\r\n            throw new InvalidOperationError(\"Stream read has already finished\");\r\n        }\r\n\r\n        return this.privReaderQueue\r\n            .dequeue()\r\n            .then(async (streamChunk: IStreamChunk<TBuffer>): Promise<IStreamChunk<TBuffer>> => {\r\n                if (streamChunk === undefined || streamChunk.isEnd) {\r\n                    await this.privReaderQueue.dispose(\"End of stream reached\");\r\n                }\r\n\r\n                return streamChunk;\r\n            });\r\n    }\r\n    public readEnded(): void {\r\n        if (!this.privIsReadEnded) {\r\n            this.privIsReadEnded = true;\r\n            this.privReaderQueue = new Queue<IStreamChunk<TBuffer>>();\r\n        }\r\n    }\r\n\r\n    private throwIfClosed(): void {\r\n        if (this.privIsWriteEnded) {\r\n            throw new InvalidOperationError(\"Stream closed\");\r\n        }\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines translation status.\r\n * @class TranslationStatus\r\n */\r\nexport enum TranslationStatus {\r\n    /**\r\n     * @member TranslationStatus.Success\r\n     */\r\n    Success = 0,\r\n\r\n    /**\r\n     * @member TranslationStatus.Error\r\n     */\r\n    Error,\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IStreamChunk, Stream } from \"./Exports.js\";\r\n\r\nexport class ChunkedArrayBufferStream extends Stream<ArrayBuffer> {\r\n    private privTargetChunkSize: number;\r\n    private privNextBufferToWrite: ArrayBuffer;\r\n    private privNextBufferStartTime: number;\r\n    private privNextBufferReadyBytes: number;\r\n\r\n    public constructor(targetChunkSize: number, streamId?: string) {\r\n        super(streamId);\r\n        this.privTargetChunkSize = targetChunkSize;\r\n        this.privNextBufferReadyBytes = 0;\r\n    }\r\n\r\n    public writeStreamChunk(chunk: IStreamChunk<ArrayBuffer>): void {\r\n        // No pending write, and the buffer is the right size so write it.\r\n        if (chunk.isEnd ||\r\n            (0 === this.privNextBufferReadyBytes && chunk.buffer.byteLength === this.privTargetChunkSize)) {\r\n            super.writeStreamChunk(chunk);\r\n            return;\r\n        }\r\n\r\n        let bytesCopiedFromBuffer: number = 0;\r\n\r\n        while (bytesCopiedFromBuffer < chunk.buffer.byteLength) {\r\n            // Fill the next buffer.\r\n            if (undefined === this.privNextBufferToWrite) {\r\n                this.privNextBufferToWrite = new ArrayBuffer(this.privTargetChunkSize);\r\n                this.privNextBufferStartTime = chunk.timeReceived;\r\n            }\r\n\r\n            // Find out how many bytes we can copy into the read buffer.\r\n            const bytesToCopy: number = Math.min(chunk.buffer.byteLength - bytesCopiedFromBuffer, this.privTargetChunkSize - this.privNextBufferReadyBytes);\r\n            const targetView: Uint8Array = new Uint8Array(this.privNextBufferToWrite);\r\n            const sourceView: Uint8Array = new Uint8Array(chunk.buffer.slice(bytesCopiedFromBuffer, bytesToCopy + bytesCopiedFromBuffer));\r\n\r\n            targetView.set(sourceView, this.privNextBufferReadyBytes);\r\n            this.privNextBufferReadyBytes += bytesToCopy;\r\n            bytesCopiedFromBuffer += bytesToCopy;\r\n\r\n            // Are we ready to write?\r\n            if (this.privNextBufferReadyBytes === this.privTargetChunkSize) {\r\n                super.writeStreamChunk({\r\n                    buffer: this.privNextBufferToWrite,\r\n                    isEnd: false,\r\n                    timeReceived: this.privNextBufferStartTime,\r\n                });\r\n                this.privNextBufferReadyBytes = 0;\r\n                this.privNextBufferToWrite = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        // Send whatever is pending, then close the base class.\r\n        if (0 !== this.privNextBufferReadyBytes && !this.isClosed) {\r\n            super.writeStreamChunk({\r\n                buffer: this.privNextBufferToWrite.slice(0, this.privNextBufferReadyBytes),\r\n                isEnd: false,\r\n                timeReceived: this.privNextBufferStartTime,\r\n            });\r\n        }\r\n\r\n        super.close();\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\ntype TWorkerMessage = ICallNotification | IClearResponse | IErrorNotification | IErrorResponse;\r\n\r\ninterface IClearResponse {\r\n    error: null;\r\n    id: number;\r\n}\r\n\r\ninterface IErrorNotification {\r\n    error: {\r\n        message: string;\r\n    };\r\n    id: null;\r\n    result: null;\r\n}\r\n\r\ninterface IErrorResponse {\r\n    error: {\r\n        message: string;\r\n    };\r\n    id: number;\r\n    result: null;\r\n}\r\n\r\ninterface ICallNotification {\r\n    id: null;\r\n    method: \"call\";\r\n    params: {\r\n        timerId: number;\r\n    };\r\n}\r\n\r\ninterface ISetNotification {\r\n    id: null;\r\n    method: \"set\";\r\n    params: {\r\n        delay: number;\r\n        now: number;\r\n        timerId: number;\r\n    };\r\n}\r\n\r\ninterface IClearRequest {\r\n    id: number;\r\n    method: \"clear\";\r\n    params: {\r\n        timerId: number;\r\n    };\r\n}\r\n\r\ninterface IWorkerEvent extends Event {\r\n    data: TWorkerMessage;\r\n}\r\n\r\ninterface IWorkerTimers {\r\n    clearTimeout: (timerId: number) => void;\r\n    setTimeout: (func: () => any, delay: number) => number;\r\n}\r\n\r\ndeclare type Func = () => any;\r\n\r\nexport class Timeout {\r\n\r\n    private static workerTimers: null | IWorkerTimers = null;\r\n\r\n    public static clearTimeout: IWorkerTimers[\"clearTimeout\"] = (timerId: number): void => Timeout.timers().clearTimeout(timerId);\r\n\r\n    public static setTimeout: IWorkerTimers[\"setTimeout\"] = (func: () => any, delay: number): number => Timeout.timers().setTimeout(func, delay);\r\n\r\n    public static load(): any {\r\n        // Prefilling the Maps with a function indexed by zero is necessary to be compliant with the specification.\r\n        const scheduledTimeoutFunctions: Map<number, number | Func> = new Map([[0, (): void => { }]]); // eslint-disable-line @typescript-eslint/no-empty-function\r\n        const unhandledRequests: Map<number, number> = new Map();\r\n\r\n        // eslint-disable-next-line\r\n        const workerScript = `!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"\",n(n.s=14)}([function(e,t,n){\"use strict\";n.d(t,\"a\",(function(){return i})),n.d(t,\"b\",(function(){return u})),n.d(t,\"c\",(function(){return a})),n.d(t,\"d\",(function(){return d}));const r=new Map,o=new Map,i=e=>{const t=r.get(e);if(void 0===t)throw new Error('There is no interval scheduled with the given id \"'.concat(e,'\".'));clearTimeout(t),r.delete(e)},u=e=>{const t=o.get(e);if(void 0===t)throw new Error('There is no timeout scheduled with the given id \"'.concat(e,'\".'));clearTimeout(t),o.delete(e)},f=(e,t)=>{let n,r;if(\"performance\"in self){const o=performance.now();n=o,r=e-Math.max(0,o-t)}else n=Date.now(),r=e;return{expected:n+r,remainingDelay:r}},c=(e,t,n,r)=>{const o=\"performance\"in self?performance.now():Date.now();o>n?postMessage({id:null,method:\"call\",params:{timerId:t}}):e.set(t,setTimeout(c,n-o,e,t,n))},a=(e,t,n)=>{const{expected:o,remainingDelay:i}=f(e,n);r.set(t,setTimeout(c,i,r,t,o))},d=(e,t,n)=>{const{expected:r,remainingDelay:i}=f(e,n);o.set(t,setTimeout(c,i,o,t,r))}},function(e,t,n){\"use strict\";n.r(t);var r=n(2);for(var o in r)\"default\"!==o&&function(e){n.d(t,e,(function(){return r[e]}))}(o);var i=n(3);for(var o in i)\"default\"!==o&&function(e){n.d(t,e,(function(){return i[e]}))}(o);var u=n(4);for(var o in u)\"default\"!==o&&function(e){n.d(t,e,(function(){return u[e]}))}(o);var f=n(5);for(var o in f)\"default\"!==o&&function(e){n.d(t,e,(function(){return f[e]}))}(o);var c=n(6);for(var o in c)\"default\"!==o&&function(e){n.d(t,e,(function(){return c[e]}))}(o);var a=n(7);for(var o in a)\"default\"!==o&&function(e){n.d(t,e,(function(){return a[e]}))}(o);var d=n(8);for(var o in d)\"default\"!==o&&function(e){n.d(t,e,(function(){return d[e]}))}(o);var s=n(9);for(var o in s)\"default\"!==o&&function(e){n.d(t,e,(function(){return s[e]}))}(o)},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t,n){\"use strict\";n.r(t);var r=n(11);for(var o in r)\"default\"!==o&&function(e){n.d(t,e,(function(){return r[e]}))}(o);var i=n(12);for(var o in i)\"default\"!==o&&function(e){n.d(t,e,(function(){return i[e]}))}(o);var u=n(13);for(var o in u)\"default\"!==o&&function(e){n.d(t,e,(function(){return u[e]}))}(o)},function(e,t){},function(e,t){},function(e,t){},function(e,t,n){\"use strict\";n.r(t);var r=n(0),o=n(1);for(var i in o)\"default\"!==i&&function(e){n.d(t,e,(function(){return o[e]}))}(i);var u=n(10);for(var i in u)\"default\"!==i&&function(e){n.d(t,e,(function(){return u[e]}))}(i);addEventListener(\"message\",({data:e})=>{try{if(\"clear\"===e.method){const{id:t,params:{timerId:n}}=e;Object(r.b)(n),postMessage({error:null,id:t})}else{if(\"set\"!==e.method)throw new Error('The given method \"'.concat(e.method,'\" is not supported'));{const{params:{delay:t,now:n,timerId:o}}=e;Object(r.d)(t,o,n)}}}catch(t){postMessage({error:{message:t.message},id:e.id,result:null})}})}]);`;\r\n        const workerUrl = \"data:text/javascript;base64,\" + btoa(workerScript);\r\n        const worker = new Worker(workerUrl);\r\n\r\n        worker.addEventListener(\"message\", ({ data }: IWorkerEvent): void => {\r\n            if (Timeout.isCallNotification(data)) {\r\n                const {\r\n                    params: { timerId }\r\n                } = data;\r\n\r\n                const idOrFunc = scheduledTimeoutFunctions.get(timerId);\r\n\r\n                if (typeof idOrFunc === \"number\") {\r\n                    const unhandledTimerId = unhandledRequests.get(idOrFunc);\r\n\r\n                    if (\r\n                        unhandledTimerId === undefined ||\r\n                        unhandledTimerId !== timerId\r\n                    ) {\r\n                        throw new Error(\"The timer is in an undefined state.\");\r\n                    }\r\n                } else if (typeof idOrFunc !== \"undefined\") {\r\n                    idOrFunc();\r\n\r\n                    // A timeout can be safely deleted because it is only called once.\r\n                    scheduledTimeoutFunctions.delete(timerId);\r\n                } else {\r\n                    throw new Error(\"The timer is in an undefined state.\");\r\n                }\r\n            } else if (Timeout.isClearResponse(data)) {\r\n                const { id } = data;\r\n\r\n                const unhandledTimerId = unhandledRequests.get(id);\r\n\r\n                if (unhandledTimerId === undefined) {\r\n                    throw new Error(\"The timer is in an undefined state.\");\r\n                }\r\n\r\n                unhandledRequests.delete(id);\r\n\r\n                scheduledTimeoutFunctions.delete(unhandledTimerId);\r\n            } else {\r\n                const {\r\n                    error: { message }\r\n                } = data;\r\n\r\n                throw new Error(message);\r\n            }\r\n        });\r\n\r\n        const clearTimeout = (timerId: number): void => {\r\n            const id = Math.random();\r\n\r\n            unhandledRequests.set(id, timerId);\r\n            scheduledTimeoutFunctions.set(timerId, id);\r\n\r\n            worker.postMessage({\r\n                id,\r\n                method: \"clear\",\r\n                params: { timerId }\r\n            } as IClearRequest);\r\n        };\r\n\r\n        const setTimeout = (func: () => void, delay: number): number => {\r\n            const timerId = Math.random();\r\n\r\n            scheduledTimeoutFunctions.set(timerId, func);\r\n\r\n            worker.postMessage({\r\n                id: null,\r\n                method: \"set\",\r\n                params: {\r\n                    delay,\r\n                    now: performance.now(),\r\n                    timerId\r\n                }\r\n            } as ISetNotification);\r\n\r\n            return timerId;\r\n        };\r\n\r\n        return {\r\n            clearTimeout,\r\n            setTimeout\r\n        };\r\n    }\r\n\r\n    private static loadWorkerTimers(): () => IWorkerTimers {\r\n        return (): IWorkerTimers => {\r\n            if (Timeout.workerTimers !== null) {\r\n                return Timeout.workerTimers;\r\n            }\r\n\r\n            Timeout.workerTimers = Timeout.load() as IWorkerTimers;\r\n\r\n            return Timeout.workerTimers;\r\n        };\r\n    }\r\n\r\n    public static timers: () => IWorkerTimers = Timeout.loadWorkerTimers();\r\n\r\n    private static isCallNotification(message: TWorkerMessage): message is ICallNotification {\r\n        return (message as ICallNotification).method !== undefined && (message as ICallNotification).method === \"call\";\r\n    }\r\n\r\n    private static isClearResponse(message: TWorkerMessage): message is IClearResponse {\r\n        return (message as IClearResponse).error === null && typeof message.id === \"number\";\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent.js\";\r\n\r\nexport class OCSPEvent extends PlatformEvent {\r\n    private privSignature: string;\r\n\r\n    public constructor(eventName: string, eventType: EventType, signature: string) {\r\n        super(eventName, eventType);\r\n\r\n        this.privSignature = signature;\r\n    }\r\n}\r\n\r\nexport class OCSPMemoryCacheHitEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPMemoryCacheHitEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheMissEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPCacheMissEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPDiskCacheHitEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPDiskCacheHitEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheUpdateNeededEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPCacheUpdateNeededEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPMemoryCacheStoreEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPMemoryCacheStoreEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPDiskCacheStoreEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPDiskCacheStoreEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheUpdateCompleteEvent extends OCSPEvent {\r\n    public constructor(signature: string) {\r\n        super(\"OCSPCacheUpdateCompleteEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPStapleReceivedEvent extends OCSPEvent {\r\n    public constructor() {\r\n        super(\"OCSPStapleReceivedEvent\", EventType.Debug, \"\");\r\n    }\r\n}\r\n\r\nexport class OCSPWSUpgradeStartedEvent extends OCSPEvent {\r\n    public constructor(serialNumber: string) {\r\n        super(\"OCSPWSUpgradeStartedEvent\", EventType.Debug, serialNumber);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheEntryExpiredEvent extends OCSPEvent {\r\n    private privExpireTime: number;\r\n\r\n    public constructor(serialNumber: string, expireTime: number) {\r\n        super(\"OCSPCacheEntryExpiredEvent\", EventType.Debug, serialNumber);\r\n        this.privExpireTime = expireTime;\r\n    }\r\n}\r\n\r\nexport class OCSPCacheEntryNeedsRefreshEvent extends OCSPEvent {\r\n    private privExpireTime: number;\r\n    private privStartTime: number;\r\n\r\n    public constructor(serialNumber: string, startTime: number, expireTime: number) {\r\n        super(\"OCSPCacheEntryNeedsRefreshEvent\", EventType.Debug, serialNumber);\r\n        this.privExpireTime = expireTime;\r\n        this.privStartTime = startTime;\r\n    }\r\n}\r\n\r\nexport class OCSPCacheHitEvent extends OCSPEvent {\r\n    private privExpireTime: number;\r\n    private privStartTime: number;\r\n    private privExpireTimeString: string;\r\n    private privStartTimeString: string;\r\n\r\n    public constructor(serialNumber: string, startTime: number, expireTime: number) {\r\n        super(\"OCSPCacheHitEvent\", EventType.Debug, serialNumber);\r\n        this.privExpireTime = expireTime;\r\n        this.privExpireTimeString = new Date(expireTime).toLocaleDateString();\r\n        this.privStartTime = startTime;\r\n        this.privStartTimeString = new Date(startTime).toLocaleTimeString();\r\n    }\r\n}\r\n\r\nexport class OCSPVerificationFailedEvent extends OCSPEvent {\r\n    private privError: string;\r\n\r\n    public constructor(serialNumber: string, error: string) {\r\n        super(\"OCSPVerificationFailedEvent\", EventType.Debug, serialNumber);\r\n        this.privError = error;\r\n    }\r\n}\r\n\r\nexport class OCSPCacheFetchErrorEvent extends OCSPEvent {\r\n    private privError: string;\r\n\r\n    public constructor(serialNumber: string, error: string) {\r\n        super(\"OCSPCacheFetchErrorEvent\", EventType.Debug, serialNumber);\r\n        this.privError = error;\r\n    }\r\n}\r\n\r\nexport class OCSPResponseRetrievedEvent extends OCSPEvent {\r\n    public constructor(serialNumber: string) {\r\n        super(\"OCSPResponseRetrievedEvent\", EventType.Debug, serialNumber);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheUpdateErrorEvent extends OCSPEvent {\r\n    private privError: string;\r\n\r\n    public constructor(serialNumber: string, error: string) {\r\n        super(\"OCSPCacheUpdateErrorEvent\", EventType.Debug, serialNumber);\r\n        this.privError = error;\r\n    }\r\n}\r\n", "\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    EventType,\r\n    PlatformEvent\r\n} from \"./Exports.js\";\r\n\r\nexport class BackgroundEvent extends PlatformEvent {\r\n    private privError: string;\r\n\r\n    public constructor(error: string) {\r\n        super(\"BackgroundEvent\", EventType.Error);\r\n        this.privError = error;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport * from \"./AudioSourceEvents.js\";\r\nexport * from \"./ConnectionEvents.js\";\r\nexport * from \"./ConnectionMessage.js\";\r\nexport * from \"./ConnectionOpenResponse.js\";\r\nexport * from \"./DeferralMap.js\";\r\nexport * from \"./DialogEvents.js\";\r\nexport * from \"./Error.js\";\r\nexport * from \"./Events.js\";\r\nexport * from \"./EventSource.js\";\r\nexport * from \"./Guid.js\";\r\nexport * from \"./IAudioSource.js\";\r\nexport * from \"./IConnection.js\";\r\nexport * from \"./IDetachable.js\";\r\nexport * from \"./IDictionary.js\";\r\nexport * from \"./IDisposable.js\";\r\nexport * from \"./IEventListener.js\";\r\nexport * from \"./IEventSource.js\";\r\nexport * from \"./IErrorMessages.js\";\r\nexport * from \"./ITimer.js\";\r\nexport * from \"./IWebsocketMessageFormatter.js\";\r\nexport * from \"./List.js\";\r\nexport * from \"./PlatformEvent.js\";\r\nexport * from \"./Promise.js\";\r\nexport * from \"./Queue.js\";\r\nexport * from \"./RawWebsocketMessage.js\";\r\nexport * from \"./RiffPcmEncoder.js\";\r\nexport * from \"./Stream.js\";\r\nexport { TranslationStatus } from \"../common.speech/TranslationStatus.js\";\r\nexport * from \"./ChunkedArrayBufferStream.js\";\r\nexport * from \"./IAudioDestination.js\";\r\nexport * from \"./Timeout.js\";\r\nexport * from \"./OCSPEvents.js\";\r\nexport * from \"./BackgroundError.js\";\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class HeaderNames {\r\n    public static AuthKey: string = \"Ocp-Apim-Subscription-Key\";\r\n    public static Authorization: string = \"Authorization\";\r\n    public static SpIDAuthKey: string = \"Apim-Subscription-Id\";\r\n    public static ConnectionId: string = \"X-ConnectionId\";\r\n    public static ContentType: string = \"Content-Type\";\r\n    public static CustomCommandsAppId: string = \"X-CommandsAppId\";\r\n    public static Path: string = \"Path\";\r\n    public static RequestId: string = \"X-RequestId\";\r\n    public static RequestStreamId: string = \"X-StreamId\";\r\n    public static RequestTimestamp: string = \"X-Timestamp\";\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport interface IAuthentication {\r\n    fetch(authFetchEventId: string): Promise<AuthInfo>;\r\n    fetchOnExpiry(authFetchEventId: string): Promise<AuthInfo>;\r\n}\r\n\r\nexport class AuthInfo {\r\n    private privHeaderName: string;\r\n    private privToken: string;\r\n\r\n    public constructor(headerName: string, token: string) {\r\n        this.privHeaderName = headerName;\r\n        this.privToken = token;\r\n    }\r\n\r\n    public get headerName(): string {\r\n        return this.privHeaderName;\r\n    }\r\n\r\n    public get token(): string {\r\n        return this.privToken;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n} from \"../common/Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication\r\n} from \"./IAuthentication.js\";\r\n\r\n/**\r\n * @class\r\n */\r\nexport class CognitiveSubscriptionKeyAuthentication implements IAuthentication {\r\n    private privAuthInfo: AuthInfo;\r\n\r\n    /**\r\n     * Creates and initializes an instance of the CognitiveSubscriptionKeyAuthentication class.\r\n     * @constructor\r\n     * @param {string} subscriptionKey - The subscription key\r\n     */\r\n    public constructor(subscriptionKey: string) {\r\n        if (!subscriptionKey) {\r\n            throw new ArgumentNullError(\"subscriptionKey\");\r\n        }\r\n\r\n        this.privAuthInfo = new AuthInfo(HeaderNames.AuthKey, subscriptionKey);\r\n    }\r\n\r\n    /**\r\n     * Fetches the subscription key.\r\n     * @member\r\n     * @function\r\n     * @public\r\n     * @param {string} authFetchEventId - The id to fetch.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public fetch(authFetchEventId: string): Promise<AuthInfo> {\r\n        return Promise.resolve(this.privAuthInfo);\r\n    }\r\n\r\n    /**\r\n     * Fetches the subscription key.\r\n     * @member\r\n     * @function\r\n     * @public\r\n     * @param {string} authFetchEventId - The id to fetch.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public fetchOnExpiry(authFetchEventId: string): Promise<AuthInfo> {\r\n        return Promise.resolve(this.privAuthInfo);\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError } from \"../common/Exports.js\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\n\r\nexport class CognitiveTokenAuthentication implements IAuthentication {\r\n    private static privTokenPrefix: string = \"Bearer \";\r\n    private privFetchCallback: (authFetchEventId: string) => Promise<string>;\r\n    private privFetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>;\r\n\r\n    public constructor(fetchCallback: (authFetchEventId: string) => Promise<string>, fetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>) {\r\n        if (!fetchCallback) {\r\n            throw new ArgumentNullError(\"fetchCallback\");\r\n        }\r\n\r\n        if (!fetchOnExpiryCallback) {\r\n            throw new ArgumentNullError(\"fetchOnExpiryCallback\");\r\n        }\r\n\r\n        this.privFetchCallback = fetchCallback;\r\n        this.privFetchOnExpiryCallback = fetchOnExpiryCallback;\r\n    }\r\n\r\n    public fetch(authFetchEventId: string): Promise<AuthInfo> {\r\n        return this.privFetchCallback(authFetchEventId).then((token: string): AuthInfo => new AuthInfo(HeaderNames.Authorization, token === undefined ? undefined : CognitiveTokenAuthentication.privTokenPrefix + token));\r\n    }\r\n\r\n    public fetchOnExpiry(authFetchEventId: string): Promise<AuthInfo> {\r\n        return this.privFetchOnExpiryCallback(authFetchEventId).then((token: string): AuthInfo => new AuthInfo(HeaderNames.Authorization, token === undefined ? undefined : CognitiveTokenAuthentication.privTokenPrefix + token));\r\n    }\r\n}\r\n", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"fs\" has been externalized for browser compatibility. Cannot access \"fs.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { EventType } from \"../common/Exports.js\";\r\n\r\n/**\r\n * Define event severity types for setting logging output.\r\n * @class LogLevel\r\n */\r\n\r\nexport { EventType as LogLevel };\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * @class Contracts\r\n * @private\r\n */\r\nexport class Contracts {\r\n    public static throwIfNullOrUndefined(param: any, name: string): void {\r\n        if (param === undefined || param === null) {\r\n            throw new Error(\"throwIfNullOrUndefined:\" + name);\r\n        }\r\n    }\r\n\r\n    public static throwIfNull(param: any, name: string): void {\r\n        if (param === null) {\r\n            throw new Error(\"throwIfNull:\" + name);\r\n        }\r\n    }\r\n\r\n    public static throwIfNullOrWhitespace(param: string, name: string): void {\r\n        Contracts.throwIfNullOrUndefined(param, name);\r\n\r\n        if ((\"\" + param).trim().length < 1) {\r\n            throw new Error(\"throwIfNullOrWhitespace:\" + name);\r\n        }\r\n    }\r\n\r\n    public static throwIfNullOrTooLong(param: string, name: string, maxLength: number): void {\r\n        Contracts.throwIfNullOrUndefined(param, name);\r\n\r\n        if ((\"\" + param).length > maxLength) {\r\n            throw new Error(\"throwIfNullOrTooLong:\" + name + \" (more than \" + maxLength.toString() + \" characters)\");\r\n        }\r\n    }\r\n\r\n    public static throwIfNullOrTooShort(param: string, name: string, minLength: number): void {\r\n        Contracts.throwIfNullOrUndefined(param, name);\r\n\r\n        if ((\"\" + param).length < minLength) {\r\n            throw new Error(\"throwIfNullOrTooShort:\" + name + \" (less than \" + minLength.toString() + \" characters)\");\r\n        }\r\n    }\r\n\r\n    public static throwIfDisposed(isDisposed: boolean): void {\r\n        if (isDisposed) {\r\n            throw new Error(\"the object is already disposed\");\r\n        }\r\n    }\r\n\r\n    public static throwIfArrayEmptyOrWhitespace(array: string[], name: string): void {\r\n        Contracts.throwIfNullOrUndefined(array, name);\r\n\r\n        if (array.length === 0) {\r\n            throw new Error(\"throwIfArrayEmptyOrWhitespace:\" + name);\r\n        }\r\n\r\n        for (const item of array) {\r\n            Contracts.throwIfNullOrWhitespace(item, name);\r\n        }\r\n    }\r\n\r\n    public static throwIfFileDoesNotExist(param: string, name: string): void {\r\n        Contracts.throwIfNullOrWhitespace(param, name);\r\n\r\n        // TODO check for file existence.\r\n    }\r\n\r\n    public static throwIfNotUndefined(param: any, name: string): void {\r\n        if (param !== undefined) {\r\n            throw new Error(\"throwIfNotUndefined:\" + name);\r\n        }\r\n    }\r\n}\r\n", "/* eslint-disable @typescript-eslint/no-unsafe-assignment */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport * as fs from \"fs\";\r\nimport { LogLevel } from \"../sdk/LogLevel.js\";\r\nimport { IEventListener, PlatformEvent } from \"../common/Exports.js\";\r\nimport { Contracts } from \"../sdk/Contracts.js\";\r\n\r\nexport class ConsoleLoggingListener implements IEventListener<PlatformEvent> {\r\n    private privLogLevelFilter: LogLevel;\r\n    private privLogPath: fs.PathLike = undefined;\r\n    private privEnableConsoleOutput: boolean = true;\r\n\r\n    public logCallback: (s: string) => void;\r\n\r\n    public constructor(logLevelFilter: LogLevel = LogLevel.None) { // Console output disabled by default\r\n        this.privLogLevelFilter = logLevelFilter;\r\n    }\r\n\r\n    public set logPath(path: fs.PathLike) {\r\n        Contracts.throwIfNullOrUndefined(fs.openSync, \"\\nFile System access not available\");\r\n        this.privLogPath = path;\r\n    }\r\n\r\n    public set enableConsoleOutput(enableOutput: boolean) {\r\n        this.privEnableConsoleOutput = enableOutput;\r\n    }\r\n\r\n    public onEvent(event: PlatformEvent): void {\r\n        if (event.eventType >= this.privLogLevelFilter) {\r\n            const log = this.toString(event);\r\n            if (!!this.logCallback) {\r\n                this.logCallback(log);\r\n            }\r\n            if (!!this.privLogPath) {\r\n                fs.writeFileSync(this.privLogPath, log + \"\\n\", { flag: \"a+\" });\r\n            }\r\n\r\n            if (this.privEnableConsoleOutput) {\r\n                switch (event.eventType) {\r\n                    case LogLevel.Debug:\r\n                        // eslint-disable-next-line no-console\r\n                        console.debug(log);\r\n                        break;\r\n                    case LogLevel.Info:\r\n                        // eslint-disable-next-line no-console\r\n                        console.info(log);\r\n                        break;\r\n                    case LogLevel.Warning:\r\n                        // eslint-disable-next-line no-console\r\n                        console.warn(log);\r\n                        break;\r\n                    case LogLevel.Error:\r\n                        // eslint-disable-next-line no-console\r\n                        console.error(log);\r\n                        break;\r\n                    default:\r\n                        // eslint-disable-next-line no-console\r\n                        console.log(log);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private toString(event: PlatformEvent): string {\r\n        const logFragments = [\r\n            `${event.eventTime}`,\r\n            `${event.name}`,\r\n        ];\r\n\r\n        const e: any = event as any;\r\n        for (const prop in e) {\r\n            if (prop && event.hasOwnProperty(prop) &&\r\n                prop !== \"eventTime\" && prop !== \"eventType\" &&\r\n                prop !== \"eventId\" && prop !== \"name\" &&\r\n                prop !== \"constructor\") {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n                const value = e[prop];\r\n                let valueToLog = \"<NULL>\";\r\n                if (value !== undefined && value !== null) {\r\n                    if (typeof (value) === \"number\" || typeof (value) === \"string\") {\r\n                        valueToLog = value.toString();\r\n                    } else {\r\n                        valueToLog = JSON.stringify(value);\r\n                    }\r\n                }\r\n\r\n                logFragments.push(`${prop}: ${valueToLog}`);\r\n            }\r\n\r\n        }\r\n\r\n        return logFragments.join(\" | \");\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport enum AudioFormatTag {\r\n    PCM = 1,\r\n    MuLaw,\r\n    Siren,\r\n    MP3,\r\n    SILKSkype,\r\n    OGG_OPUS,\r\n    WEBM_OPUS,\r\n    ALaw,\r\n    FLAC,\r\n    OPUS,\r\n    AMR_WB,\r\n    G722,\r\n}\r\n\r\n/**\r\n * Represents audio stream format used for custom audio input configurations.\r\n * @class AudioStreamFormat\r\n */\r\nexport abstract class AudioStreamFormat {\r\n    /**\r\n     * Creates an audio stream format object representing the default audio stream\r\n     * format (16KHz 16bit mono PCM).\r\n     * @member AudioStreamFormat.getDefaultInputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getDefaultInputFormat(): AudioStreamFormat {\r\n        return AudioStreamFormatImpl.getDefaultInputFormat();\r\n    }\r\n\r\n    /**\r\n     * Creates an audio stream format object with the specified format characteristics.\r\n     * @member AudioStreamFormat.getWaveFormat\r\n     * @function\r\n     * @public\r\n     * @param {number} samplesPerSecond - Sample rate, in samples per second (Hertz).\r\n     * @param {number} bitsPerSample - Bits per sample, typically 16.\r\n     * @param {number} channels - Number of channels in the waveform-audio data. Monaural data\r\n     * uses one channel and stereo data uses two channels.\r\n     * @param {AudioFormatTag} format - Audio format (PCM, alaw or mulaw).\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getWaveFormat(samplesPerSecond: number, bitsPerSample: number, channels: number, format: AudioFormatTag): AudioStreamFormat {\r\n        return new AudioStreamFormatImpl(samplesPerSecond, bitsPerSample, channels, format);\r\n    }\r\n\r\n    /**\r\n     * Creates an audio stream format object with the specified pcm waveformat characteristics.\r\n     * @member AudioStreamFormat.getWaveFormatPCM\r\n     * @function\r\n     * @public\r\n     * @param {number} samplesPerSecond - Sample rate, in samples per second (Hertz).\r\n     * @param {number} bitsPerSample - Bits per sample, typically 16.\r\n     * @param {number} channels - Number of channels in the waveform-audio data. Monaural data\r\n     * uses one channel and stereo data uses two channels.\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getWaveFormatPCM(samplesPerSecond: number, bitsPerSample: number, channels: number): AudioStreamFormat {\r\n        return new AudioStreamFormatImpl(samplesPerSecond, bitsPerSample, channels);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioStreamFormat.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * @private\r\n * @class AudioStreamFormatImpl\r\n */\r\nexport class AudioStreamFormatImpl extends AudioStreamFormat {\r\n    protected privHeader: ArrayBuffer;\r\n\r\n    /**\r\n     * Creates an instance with the given values.\r\n     * @constructor\r\n     * @param {number} samplesPerSec - Samples per second.\r\n     * @param {number} bitsPerSample - Bits per sample.\r\n     * @param {number} channels - Number of channels.\r\n     * @param {AudioFormatTag} format - Audio format (PCM, alaw or mulaw).\r\n     */\r\n    public constructor(samplesPerSec: number = 16000, bitsPerSample: number = 16, channels: number = 1, format: AudioFormatTag = AudioFormatTag.PCM) {\r\n        super();\r\n\r\n        let isWavFormat: boolean = true;\r\n        /* 1 for PCM; 6 for alaw; 7 for mulaw */\r\n        switch (format) {\r\n            case AudioFormatTag.PCM:\r\n                this.formatTag = 1;\r\n                break;\r\n            case AudioFormatTag.ALaw:\r\n                this.formatTag = 6;\r\n                break;\r\n            case AudioFormatTag.MuLaw:\r\n                this.formatTag = 7;\r\n                break;\r\n            default:\r\n                isWavFormat = false;\r\n        }\r\n        this.bitsPerSample = bitsPerSample;\r\n        this.samplesPerSec = samplesPerSec;\r\n        this.channels = channels;\r\n        this.avgBytesPerSec = this.samplesPerSec * this.channels * (this.bitsPerSample / 8);\r\n        this.blockAlign = this.channels * Math.max(this.bitsPerSample, 8);\r\n\r\n        if (isWavFormat) {\r\n            this.privHeader = new ArrayBuffer(44);\r\n\r\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\r\n            const view = new DataView(this.privHeader);\r\n\r\n            /* RIFF identifier */\r\n            this.setString(view, 0, \"RIFF\");\r\n            /* file length */\r\n            view.setUint32(4, 0, true);\r\n            /* RIFF type & Format */\r\n            this.setString(view, 8, \"WAVEfmt \");\r\n            /* format chunk length */\r\n            view.setUint32(16, 16, true);\r\n            /* audio format */\r\n            view.setUint16(20, this.formatTag, true);\r\n            /* channel count */\r\n            view.setUint16(22, this.channels, true);\r\n            /* sample rate */\r\n            view.setUint32(24, this.samplesPerSec, true);\r\n            /* byte rate (sample rate * block align) */\r\n            view.setUint32(28, this.avgBytesPerSec, true);\r\n            /* block align (channel count * bytes per sample) */\r\n            view.setUint16(32, this.channels * (this.bitsPerSample / 8), true);\r\n            /* bits per sample */\r\n            view.setUint16(34, this.bitsPerSample, true);\r\n            /* data chunk identifier */\r\n            this.setString(view, 36, \"data\");\r\n            /* data chunk length */\r\n            view.setUint32(40, 0, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves the default input format.\r\n     * @member AudioStreamFormatImpl.getDefaultInputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {AudioStreamFormatImpl} The default input format.\r\n     */\r\n    public static getDefaultInputFormat(): AudioStreamFormatImpl {\r\n        return new AudioStreamFormatImpl();\r\n    }\r\n\r\n    /**\r\n     * Creates an audio context appropriate to current browser\r\n     * @member AudioStreamFormatImpl.getAudioContext\r\n     * @function\r\n     * @public\r\n     * @returns {AudioContext} An audio context instance\r\n     */\r\n    /* eslint-disable */\r\n    public static getAudioContext(sampleRate?: number): AudioContext {\r\n        // Workaround for Speech SDK bug in Safari.\r\n        const AudioContext = (window as any).AudioContext // our preferred impl\r\n            || (window as any).webkitAudioContext // fallback, mostly when on Safari\r\n            || false; // could not find.\r\n\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext\r\n        if (!!AudioContext) {\r\n            if (sampleRate !== undefined && navigator.mediaDevices.getSupportedConstraints().sampleRate) {\r\n                return new AudioContext({ sampleRate });\r\n            } else {\r\n                return new AudioContext();\r\n            }\r\n        } else {\r\n            throw new Error(\"Browser does not support Web Audio API (AudioContext is not available).\");\r\n        }\r\n    }\r\n    /* eslint-enable */\r\n\r\n    /**\r\n     * Closes the configuration object.\r\n     * @member AudioStreamFormatImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * The format of the audio, valid values: 1 (PCM)\r\n     * @member AudioStreamFormatImpl.prototype.formatTag\r\n     * @function\r\n     * @public\r\n     */\r\n    public formatTag: number;\r\n\r\n    /**\r\n     * The number of channels, valid values: 1 (Mono).\r\n     * @member AudioStreamFormatImpl.prototype.channels\r\n     * @function\r\n     * @public\r\n     */\r\n    public channels: number;\r\n\r\n    /**\r\n     * The sample rate, valid values: 16000.\r\n     * @member AudioStreamFormatImpl.prototype.samplesPerSec\r\n     * @function\r\n     * @public\r\n     */\r\n    public samplesPerSec: number;\r\n\r\n    /**\r\n     * The bits per sample, valid values: 16\r\n     * @member AudioStreamFormatImpl.prototype.b\r\n     * @function\r\n     * @public\r\n     */\r\n    public bitsPerSample: number;\r\n\r\n    /**\r\n     * Average bytes per second, usually calculated as nSamplesPerSec * nChannels * ceil(wBitsPerSample, 8).\r\n     * @member AudioStreamFormatImpl.prototype.avgBytesPerSec\r\n     * @function\r\n     * @public\r\n     */\r\n    public avgBytesPerSec: number;\r\n\r\n    /**\r\n     * The size of a single frame, valid values: nChannels * ceil(wBitsPerSample, 8).\r\n     * @member AudioStreamFormatImpl.prototype.blockAlign\r\n     * @function\r\n     * @public\r\n     */\r\n    public blockAlign: number;\r\n\r\n    public get header(): ArrayBuffer {\r\n        return this.privHeader;\r\n    }\r\n\r\n    protected setString(view: DataView, offset: number, str: string): void {\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(offset + i, str.charCodeAt(i));\r\n        }\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceOffEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ChunkedArrayBufferStream,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStringDictionary,\r\n    Stream,\r\n} from \"../common/Exports.js\";\r\nimport { IStreamChunk } from \"../common/Stream.js\";\r\nimport {\r\n    AudioStreamFormat,\r\n    AudioStreamFormatImpl,\r\n} from \"../sdk/Audio/AudioStreamFormat.js\";\r\nimport { IRecorder } from \"./IRecorder.js\";\r\n\r\n// Extending the default definition with browser specific definitions for backward compatibility\r\ninterface INavigator extends Navigator {\r\n    webkitGetUserMedia: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback | undefined, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n    mozGetUserMedia: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback | undefined, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n    msGetUserMedia: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n}\r\n\r\nexport const AudioWorkletSourceURLPropertyName = \"MICROPHONE-WorkletSourceUrl\";\r\n\r\nexport class MicAudioSource implements IAudioSource {\r\n\r\n    private static readonly AUDIOFORMAT: AudioStreamFormatImpl = AudioStreamFormat.getDefaultInputFormat() as AudioStreamFormatImpl;\r\n\r\n    private privStreams: IStringDictionary<Stream<ArrayBuffer>> = {};\r\n\r\n    private privId: string;\r\n\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n\r\n    private privInitializeDeferral: Deferred<void>;\r\n\r\n    private privMediaStream: MediaStream;\r\n\r\n    private privContext: AudioContext;\r\n\r\n    private privMicrophoneLabel: string;\r\n\r\n    private privOutputChunkSize: number;\r\n\r\n    private privIsClosing: boolean;\r\n\r\n    public constructor(\r\n        private readonly privRecorder: IRecorder,\r\n        private readonly deviceId?: string,\r\n        audioSourceId?: string,\r\n        mediaStream?: MediaStream\r\n        ) {\r\n\r\n        this.privOutputChunkSize = MicAudioSource.AUDIOFORMAT.avgBytesPerSec / 10;\r\n        this.privId = audioSourceId ? audioSourceId : createNoDashGuid();\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privMediaStream = mediaStream || null;\r\n        this.privIsClosing = false;\r\n    }\r\n\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(MicAudioSource.AUDIOFORMAT);\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        if (this.privInitializeDeferral) {\r\n            return this.privInitializeDeferral.promise;\r\n        }\r\n\r\n        this.privInitializeDeferral = new Deferred<void>();\r\n\r\n        try {\r\n            this.createAudioContext();\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error;\r\n                this.privInitializeDeferral.reject(typedError.name + \": \" + typedError.message);\r\n            } else {\r\n                this.privInitializeDeferral.reject(error as string);\r\n            }\r\n            return this.privInitializeDeferral.promise;\r\n        }\r\n\r\n        const nav = window.navigator as INavigator;\r\n\r\n        let getUserMedia = (\r\n            // eslint-disable-next-line\r\n            nav.getUserMedia ||\r\n            nav.webkitGetUserMedia ||\r\n            nav.mozGetUserMedia ||\r\n            nav.msGetUserMedia\r\n        );\r\n\r\n        if (!!nav.mediaDevices) {\r\n            getUserMedia = (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback): void => {\r\n                nav.mediaDevices\r\n                    .getUserMedia(constraints)\r\n                    .then(successCallback)\r\n                    .catch(errorCallback);\r\n            };\r\n        }\r\n\r\n        if (!getUserMedia) {\r\n            const errorMsg = \"Browser does not support getUserMedia.\";\r\n            this.privInitializeDeferral.reject(errorMsg);\r\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\")); // mic initialized error - no streamid at this point\r\n        } else {\r\n            const next = (): void => {\r\n                this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n                if (this.privMediaStream && this.privMediaStream.active) {\r\n                    this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n                    this.privInitializeDeferral.resolve();\r\n                } else {\r\n                    getUserMedia(\r\n                        { audio: this.deviceId ? { deviceId: this.deviceId } : true, video: false },\r\n                        (mediaStream: MediaStream): void => {\r\n                            this.privMediaStream = mediaStream;\r\n                            this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n                            this.privInitializeDeferral.resolve();\r\n                        }, (error: any): void => {\r\n                            const errorMsg = `Error occurred during microphone initialization: ${error as string}`;\r\n                            this.privInitializeDeferral.reject(errorMsg);\r\n                            this.onEvent(new AudioSourceErrorEvent(this.privId, errorMsg));\r\n                        });\r\n                }\r\n            };\r\n\r\n            if (this.privContext.state === \"suspended\") {\r\n                // NOTE: On iOS, the Web Audio API requires sounds to be triggered from an explicit user action.\r\n                // https://github.com/WebAudio/web-audio-api/issues/790\r\n                this.privContext.resume()\r\n                    .then(next)\r\n                    .catch((reason: any): void => {\r\n                        this.privInitializeDeferral.reject(`Failed to initialize audio context: ${reason as string}`);\r\n                    });\r\n            } else {\r\n                next();\r\n            }\r\n        }\r\n\r\n        return this.privInitializeDeferral.promise;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        return this.listen(audioNodeId).then<IAudioStreamNode>(\r\n            (stream: Stream<ArrayBuffer>): IAudioStreamNode => {\r\n                this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n                return {\r\n                    detach: async (): Promise<void> => {\r\n                        stream.readEnded();\r\n                        delete this.privStreams[audioNodeId];\r\n                        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                        return this.turnOff();\r\n                    },\r\n                    id: (): string => audioNodeId,\r\n                    read: (): Promise<IStreamChunk<ArrayBuffer>> => stream.read(),\r\n                };\r\n            });\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        if (audioNodeId && this.privStreams[audioNodeId]) {\r\n            this.privStreams[audioNodeId].close();\r\n            delete this.privStreams[audioNodeId];\r\n            this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n        }\r\n    }\r\n\r\n    public async turnOff(): Promise<void> {\r\n        for (const streamId in this.privStreams) {\r\n            if (streamId) {\r\n                const stream = this.privStreams[streamId];\r\n                if (stream) {\r\n                    stream.close();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.onEvent(new AudioSourceOffEvent(this.privId)); // no stream now\r\n        if (this.privInitializeDeferral) {\r\n            // Correctly handle when browser forces mic off before turnOn() completes\r\n            // eslint-disable-next-line @typescript-eslint/await-thenable\r\n            await this.privInitializeDeferral;\r\n            this.privInitializeDeferral = null;\r\n        }\r\n\r\n        await this.destroyAudioContext();\r\n\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.getMicrophoneLabel().then((label: string): ISpeechConfigAudioDevice => (\r\n            {\r\n                bitspersample: MicAudioSource.AUDIOFORMAT.bitsPerSample,\r\n                channelcount: MicAudioSource.AUDIOFORMAT.channels,\r\n                connectivity: connectivity.Unknown,\r\n                manufacturer: \"Speech SDK\",\r\n                model: label,\r\n                samplerate: MicAudioSource.AUDIOFORMAT.samplesPerSec,\r\n                type: type.Microphones,\r\n            }\r\n        ));\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        if (name === AudioWorkletSourceURLPropertyName) {\r\n            this.privRecorder.setWorkletUrl(value);\r\n        } else {\r\n            throw new Error(\"Property '\" + name + \"' is not supported on Microphone.\");\r\n        }\r\n    }\r\n\r\n    private getMicrophoneLabel(): Promise<string> {\r\n        const defaultMicrophoneName: string = \"microphone\";\r\n\r\n        // If we did this already, return the value.\r\n        if (this.privMicrophoneLabel !== undefined) {\r\n            return Promise.resolve(this.privMicrophoneLabel);\r\n        }\r\n\r\n        // If the stream isn't currently running, we can't query devices because security.\r\n        if (this.privMediaStream === undefined || !this.privMediaStream.active) {\r\n            return Promise.resolve(defaultMicrophoneName);\r\n        }\r\n\r\n        // Setup a default\r\n        this.privMicrophoneLabel = defaultMicrophoneName;\r\n\r\n        // Get the id of the device running the audio track.\r\n        const microphoneDeviceId: string = this.privMediaStream.getTracks()[0].getSettings().deviceId;\r\n\r\n        // If the browser doesn't support getting the device ID, set a default and return.\r\n        if (undefined === microphoneDeviceId) {\r\n            return Promise.resolve(this.privMicrophoneLabel);\r\n        }\r\n\r\n        const deferred: Deferred<string> = new Deferred<string>();\r\n\r\n        // Enumerate the media devices.\r\n        navigator.mediaDevices.enumerateDevices().then((devices: MediaDeviceInfo[]): void => {\r\n            for (const device of devices) {\r\n                if (device.deviceId === microphoneDeviceId) {\r\n                    // Found the device\r\n                    this.privMicrophoneLabel = device.label;\r\n                    break;\r\n                }\r\n            }\r\n            deferred.resolve(this.privMicrophoneLabel);\r\n        }, (): Deferred<string> => deferred.resolve(this.privMicrophoneLabel));\r\n\r\n        return deferred.promise;\r\n    }\r\n\r\n    private async listen(audioNodeId: string): Promise<Stream<ArrayBuffer>> {\r\n        await this.turnOn();\r\n        const stream = new ChunkedArrayBufferStream(this.privOutputChunkSize, audioNodeId);\r\n        this.privStreams[audioNodeId] = stream;\r\n        try {\r\n            this.privRecorder.record(this.privContext, this.privMediaStream, stream);\r\n        } catch (error) {\r\n            this.onEvent(new AudioStreamNodeErrorEvent(this.privId, audioNodeId, error as string));\r\n            throw error;\r\n        }\r\n        const result: Stream<ArrayBuffer> = stream;\r\n        return result;\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private createAudioContext(): void {\r\n        if (!!this.privContext) {\r\n            return;\r\n        }\r\n\r\n        this.privContext = AudioStreamFormatImpl.getAudioContext(MicAudioSource.AUDIOFORMAT.samplesPerSec);\r\n    }\r\n\r\n    private async destroyAudioContext(): Promise<void> {\r\n        if (!this.privContext) {\r\n            return;\r\n        }\r\n\r\n        this.privRecorder.releaseMediaResources(this.privContext);\r\n\r\n        // This pattern brought to you by a bug in the TypeScript compiler where it\r\n        // confuses the (\"close\" in this.privContext) with this.privContext always being null as the alternate.\r\n        // https://github.com/Microsoft/TypeScript/issues/11498\r\n        let hasClose: boolean = false;\r\n        if (\"close\" in this.privContext) {\r\n            hasClose = true;\r\n        }\r\n\r\n        if (hasClose) {\r\n            if (!this.privIsClosing) {\r\n                // The audio context close may take enough time that the close is called twice\r\n                this.privIsClosing = true;\r\n                await this.privContext.close();\r\n                this.privContext = null;\r\n                this.privIsClosing = false;\r\n            }\r\n        } else if (null !== this.privContext && this.privContext.state === \"running\") {\r\n            // Suspend actually takes a callback, but analogous to the\r\n            // resume method, it'll be only fired if suspend is called\r\n            // in a direct response to a user action. The later is not always\r\n            // the case, as TurnOff is also called, when we receive an\r\n            // end-of-speech message from the service. So, doing a best effort\r\n            // fire-and-forget here.\r\n            await this.privContext.suspend();\r\n        }\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceOffEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ChunkedArrayBufferStream,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n    IStringDictionary,\r\n    Stream,\r\n} from \"../common/Exports.js\";\r\nimport { AudioStreamFormat, AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat.js\";\r\n\r\nexport class FileAudioSource implements IAudioSource {\r\n\r\n    private privAudioFormatPromise: Promise<AudioStreamFormatImpl>;\r\n\r\n    private privStreams: IStringDictionary<Stream<ArrayBuffer>> = {};\r\n\r\n    private privId: string;\r\n\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n\r\n    private privSource: Blob | Buffer;\r\n\r\n    private privFilename: string;\r\n\r\n    private privHeaderEnd: number = 44;\r\n\r\n    public constructor(file: File | Buffer, filename?: string, audioSourceId?: string) {\r\n        this.privId = audioSourceId ? audioSourceId : createNoDashGuid();\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privSource = file;\r\n        if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && this.privSource instanceof Blob) {\r\n            this.privFilename = (file as File).name;\r\n        } else {\r\n            this.privFilename = filename || \"unknown.wav\";\r\n        }\r\n\r\n        // Read the header.\r\n        this.privAudioFormatPromise = this.readHeader();\r\n    }\r\n\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return this.privAudioFormatPromise;\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        if (this.privFilename.lastIndexOf(\".wav\") !== this.privFilename.length - 4) {\r\n            const errorMsg = this.privFilename + \" is not supported. Only WAVE files are allowed at the moment.\";\r\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\"));\r\n            return Promise.reject(errorMsg);\r\n        }\r\n\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        const stream: Stream<ArrayBuffer> = await this.upload(audioNodeId);\r\n\r\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n        return Promise.resolve({\r\n            detach: async (): Promise<void> => {\r\n                stream.readEnded();\r\n                delete this.privStreams[audioNodeId];\r\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                await this.turnOff();\r\n            },\r\n            id: (): string => audioNodeId,\r\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => stream.read(),\r\n        });\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        if (audioNodeId && this.privStreams[audioNodeId]) {\r\n            this.privStreams[audioNodeId].close();\r\n            delete this.privStreams[audioNodeId];\r\n            this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n        }\r\n    }\r\n\r\n    public turnOff(): Promise<void> {\r\n        for (const streamId in this.privStreams) {\r\n            if (streamId) {\r\n                const stream = this.privStreams[streamId];\r\n                if (stream && !stream.isClosed) {\r\n                    stream.close();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.onEvent(new AudioSourceOffEvent(this.privId)); // no stream now\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.privAudioFormatPromise.then<ISpeechConfigAudioDevice>((result: AudioStreamFormatImpl): Promise<{\r\n            bitspersample: number;\r\n            channelcount: number;\r\n            connectivity: connectivity.Unknown;\r\n            manufacturer: string;\r\n            model: string;\r\n            samplerate: number;\r\n            type: type.File;\r\n        }> => ( Promise.resolve({\r\n                bitspersample: result.bitsPerSample,\r\n                channelcount: result.channels,\r\n                connectivity: connectivity.Unknown,\r\n                manufacturer: \"Speech SDK\",\r\n                model: \"File\",\r\n                samplerate: result.samplesPerSec,\r\n                type: type.File,\r\n            })\r\n        ));\r\n    }\r\n\r\n    private readHeader(): Promise<AudioStreamFormatImpl> {\r\n        // Read the wave header.\r\n        const maxHeaderSize: number = 4296;\r\n        const header: Blob | Buffer = this.privSource.slice(0, maxHeaderSize);\r\n\r\n        const headerResult: Deferred<AudioStreamFormatImpl> = new Deferred<AudioStreamFormatImpl>();\r\n\r\n        const processHeader = (header: ArrayBuffer): void => {\r\n            const view: DataView = new DataView(header);\r\n\r\n            const getWord = (index: number): string => String.fromCharCode(view.getUint8(index), view.getUint8(index + 1), view.getUint8(index + 2), view.getUint8(index + 3));\r\n\r\n            // RIFF 4 bytes.\r\n            if (\"RIFF\" !== getWord(0)) {\r\n                headerResult.reject(\"Invalid WAV header in file, RIFF was not found\");\r\n                return;\r\n            }\r\n\r\n            // length, 4 bytes\r\n            // RIFF Type & fmt 8 bytes\r\n            if (\"WAVE\" !== getWord(8) || \"fmt \" !== getWord(12)) {\r\n                headerResult.reject(\"Invalid WAV header in file, WAVEfmt was not found\");\r\n                return;\r\n            }\r\n\r\n            const formatSize: number = view.getInt32(16, true);\r\n            const channelCount: number = view.getUint16(22, true);\r\n            const sampleRate: number = view.getUint32(24, true);\r\n            const bitsPerSample: number = view.getUint16(34, true);\r\n            // Confirm if header is 44 bytes long.\r\n            let pos: number = 36 + Math.max(formatSize - 16, 0);\r\n            for (; getWord(pos) !== \"data\"; pos += 2) {\r\n                if (pos > maxHeaderSize - 8) {\r\n                    headerResult.reject(\"Invalid WAV header in file, data block was not found\");\r\n                    return;\r\n                }\r\n            }\r\n            this.privHeaderEnd = pos + 8;\r\n            headerResult.resolve(AudioStreamFormat.getWaveFormatPCM(sampleRate, bitsPerSample, channelCount) as AudioStreamFormatImpl);\r\n        };\r\n\r\n        if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && header instanceof Blob) {\r\n            const reader: FileReader = new FileReader();\r\n\r\n            reader.onload = (event: Event): void => {\r\n                const header: ArrayBuffer = (event.target as FileReader).result as ArrayBuffer;\r\n                processHeader(header);\r\n            };\r\n\r\n            reader.readAsArrayBuffer(header);\r\n        } else {\r\n            const h: Buffer = header as Buffer;\r\n            processHeader(h.buffer.slice(h.byteOffset, h.byteOffset + h.byteLength));\r\n        }\r\n        return headerResult.promise;\r\n    }\r\n\r\n    private async upload(audioNodeId: string): Promise<Stream<ArrayBuffer>> {\r\n        const onerror = (error: string): void => {\r\n            const errorMsg = `Error occurred while processing '${this.privFilename}'. ${error}`;\r\n            this.onEvent(new AudioStreamNodeErrorEvent(this.privId, audioNodeId, errorMsg));\r\n            throw new Error(errorMsg);\r\n        };\r\n\r\n        try {\r\n            await this.turnOn();\r\n\r\n            const format: AudioStreamFormatImpl = await this.privAudioFormatPromise;\r\n            const stream = new ChunkedArrayBufferStream(format.avgBytesPerSec / 10, audioNodeId);\r\n\r\n            this.privStreams[audioNodeId] = stream;\r\n            const chunk: Blob | Buffer = this.privSource.slice(this.privHeaderEnd);\r\n\r\n            const processFile = (buff: ArrayBuffer): void => {\r\n                if (stream.isClosed) {\r\n                    return; // output stream was closed (somebody called TurnOff). We're done here.\r\n                }\r\n\r\n                stream.writeStreamChunk({\r\n                    buffer: buff,\r\n                    isEnd: false,\r\n                    timeReceived: Date.now(),\r\n                });\r\n                stream.close();\r\n            };\r\n\r\n            if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && chunk instanceof Blob) {\r\n                const reader: FileReader = new FileReader();\r\n                reader.onerror = (ev: ProgressEvent<FileReader>): void  =>  onerror(ev.toString());\r\n\r\n                reader.onload = (event: Event): void => {\r\n                    const fileBuffer: ArrayBuffer = (event.target as FileReader).result as ArrayBuffer;\r\n                    processFile(fileBuffer);\r\n                };\r\n\r\n                reader.readAsArrayBuffer(chunk);\r\n            } else {\r\n                const c: Buffer = chunk as Buffer;\r\n                processFile(c.buffer.slice(c.byteOffset, c.byteOffset + c.byteLength));\r\n            }\r\n\r\n            return stream;\r\n        } catch (e) {\r\n            onerror(e as string);\r\n        }\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RiffPcmEncoder, Stream } from \"../common/Exports\";\r\nimport { IRecorder } from \"./IRecorder\";\r\n\r\nexport class PcmRecorder implements IRecorder {\r\n    private privMediaResources: IMediaResources;\r\n    private privSpeechProcessorScript: string; // speech-processor.js Url\r\n    private privStopInputOnRelease: boolean;\r\n\r\n    public constructor(stopInputOnRelease: boolean) {\r\n        this.privStopInputOnRelease = stopInputOnRelease;\r\n    }\r\n\r\n    public record(context: AudioContext, mediaStream: MediaStream, outputStream: Stream<ArrayBuffer>): void {\r\n        const desiredSampleRate = 16000;\r\n\r\n        const waveStreamEncoder = new RiffPcmEncoder(context.sampleRate, desiredSampleRate);\r\n\r\n        const micInput = context.createMediaStreamSource(mediaStream);\r\n\r\n        const attachScriptProcessor = (): void => {\r\n            // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\n            const scriptNode = (() => {\r\n                let bufferSize = 0;\r\n                try {\r\n                    return context.createScriptProcessor(bufferSize, 1, 1);\r\n                } catch (error) {\r\n                    // Webkit (<= version 31) requires a valid bufferSize.\r\n                    bufferSize = 2048;\r\n                    let audioSampleRate = context.sampleRate;\r\n                    while (bufferSize < 16384 && audioSampleRate >= (2 * desiredSampleRate)) {\r\n                        bufferSize <<= 1;\r\n                        audioSampleRate >>= 1;\r\n                    }\r\n                    return context.createScriptProcessor(bufferSize, 1, 1);\r\n                }\r\n            })();\r\n            scriptNode.onaudioprocess = (event: AudioProcessingEvent): void => {\r\n                const inputFrame = event.inputBuffer.getChannelData(0);\r\n\r\n                if (outputStream && !outputStream.isClosed) {\r\n                    const waveFrame = waveStreamEncoder.encode(inputFrame);\r\n                    if (!!waveFrame) {\r\n                        outputStream.writeStreamChunk({\r\n                            buffer: waveFrame,\r\n                            isEnd: false,\r\n                            timeReceived: Date.now(),\r\n                        });\r\n                    }\r\n                }\r\n            };\r\n            micInput.connect(scriptNode);\r\n            scriptNode.connect(context.destination);\r\n            this.privMediaResources = {\r\n                scriptProcessorNode: scriptNode,\r\n                source: micInput,\r\n                stream: mediaStream,\r\n            };\r\n        };\r\n\r\n        // https://webaudio.github.io/web-audio-api/#audioworklet\r\n        // Using AudioWorklet to improve audio quality and avoid audio glitches due to blocking the UI thread\r\n        const skipAudioWorklet = !!this.privSpeechProcessorScript && this.privSpeechProcessorScript.toLowerCase() === \"ignore\";\r\n\r\n        if (!!context.audioWorklet && !skipAudioWorklet) {\r\n            if (!this.privSpeechProcessorScript) {\r\n                const workletScript = `class SP extends AudioWorkletProcessor {\r\n                    constructor(options) {\r\n                      super(options);\r\n                    }\r\n                    process(inputs, outputs) {\r\n                      const input = inputs[0];\r\n                      const output = [];\r\n                      for (let channel = 0; channel < input.length; channel += 1) {\r\n                        output[channel] = input[channel];\r\n                      }\r\n                      this.port.postMessage(output[0]);\r\n                      return true;\r\n                    }\r\n                  }\r\n                  registerProcessor('speech-processor', SP);`;\r\n                const blob = new Blob([workletScript], { type: \"application/javascript; charset=utf-8\" });\r\n                this.privSpeechProcessorScript = URL.createObjectURL(blob);\r\n            }\r\n\r\n            context.audioWorklet\r\n                .addModule(this.privSpeechProcessorScript)\r\n                .then((): void => {\r\n                    const workletNode = new AudioWorkletNode(context, \"speech-processor\");\r\n                    workletNode.port.onmessage = (ev: MessageEvent): void => {\r\n                        const inputFrame: Float32Array = ev.data as Float32Array;\r\n\r\n                        if (outputStream && !outputStream.isClosed) {\r\n                            const waveFrame = waveStreamEncoder.encode(inputFrame);\r\n                            if (!!waveFrame) {\r\n                                outputStream.writeStreamChunk({\r\n                                    buffer: waveFrame,\r\n                                    isEnd: false,\r\n                                    timeReceived: Date.now(),\r\n                                });\r\n                            }\r\n                        }\r\n                    };\r\n                    micInput.connect(workletNode);\r\n                    workletNode.connect(context.destination);\r\n                    this.privMediaResources = {\r\n                        scriptProcessorNode: workletNode,\r\n                        source: micInput,\r\n                        stream: mediaStream,\r\n                    };\r\n                })\r\n                .catch((): void => {\r\n                    attachScriptProcessor();\r\n                });\r\n        } else {\r\n            try {\r\n                attachScriptProcessor();\r\n            } catch (err) {\r\n                throw new Error(`Unable to start audio worklet node for PCMRecorder: ${err as string}`);\r\n            }\r\n        }\r\n    }\r\n\r\n    public releaseMediaResources(context: AudioContext): void {\r\n        if (this.privMediaResources) {\r\n            if (this.privMediaResources.scriptProcessorNode) {\r\n                this.privMediaResources.scriptProcessorNode.disconnect(context.destination);\r\n                this.privMediaResources.scriptProcessorNode = null;\r\n            }\r\n            if (this.privMediaResources.source) {\r\n                this.privMediaResources.source.disconnect();\r\n                if (this.privStopInputOnRelease) {\r\n                    this.privMediaResources.stream.getTracks().forEach((track: MediaStreamTrack): void => track.stop());\r\n                }\r\n                this.privMediaResources.source = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public setWorkletUrl(url: string): void {\r\n        this.privSpeechProcessorScript = url;\r\n    }\r\n}\r\n\r\ninterface IMediaResources {\r\n    source: MediaStreamAudioSourceNode;\r\n    scriptProcessorNode: ScriptProcessorNode | AudioWorkletNode;\r\n    stream: MediaStream;\r\n}\r\n", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"net\" has been externalized for browser compatibility. Cannot access \"net.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"tls\" has been externalized for browser compatibility. Cannot access \"tls.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"agent-base\" has been externalized for browser compatibility. Cannot access \"agent-base.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"https-proxy-agent\" has been externalized for browser compatibility. Cannot access \"https-proxy-agent.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"ws\" has been externalized for browser compatibility. Cannot access \"ws.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// Node.JS specific web socket / browser support.\r\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\nimport * as http from \"http\";\r\nimport * as net from \"net\";\r\nimport * as tls from \"tls\";\r\nimport Agent from \"agent-base\";\r\nimport HttpsProxyAgent from \"https-proxy-agent\";\r\n\r\nimport ws from \"ws\";\r\nimport { HeaderNames } from \"../common.speech/HeaderNames.js\";\r\nimport {\r\n    ArgumentNullError,\r\n    BackgroundEvent,\r\n    ConnectionClosedEvent,\r\n    ConnectionErrorEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionMessageSentEvent,\r\n    ConnectionOpenResponse,\r\n    ConnectionStartEvent,\r\n    ConnectionState,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    Queue,\r\n    RawWebsocketMessage,\r\n} from \"../common/Exports.js\";\r\nimport { ProxyInfo } from \"./ProxyInfo.js\";\r\n\r\ninterface ISendItem {\r\n    Message: ConnectionMessage;\r\n    RawWebsocketMessage: RawWebsocketMessage;\r\n    sendStatusDeferral: Deferred<void>;\r\n}\r\n\r\nexport class WebsocketMessageAdapter {\r\n    private privConnectionState: ConnectionState;\r\n    private privMessageFormatter: IWebsocketMessageFormatter;\r\n    private privWebsocketClient: WebSocket | ws;\r\n\r\n    private privSendMessageQueue: Queue<ISendItem>;\r\n    private privReceivingMessageQueue: Queue<ConnectionMessage>;\r\n    private privConnectionEstablishDeferral: Deferred<ConnectionOpenResponse>;\r\n    private privCertificateValidatedDeferral: Deferred<void>;\r\n    private privDisconnectDeferral: Deferred<void>;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privConnectionId: string;\r\n    private privUri: string;\r\n    private proxyInfo: ProxyInfo;\r\n    private privHeaders: { [key: string]: string };\r\n    private privLastErrorReceived: string;\r\n    private privEnableCompression: boolean;\r\n\r\n    public static forceNpmWebSocket: boolean = false;\r\n\r\n    public constructor(\r\n        uri: string,\r\n        connectionId: string,\r\n        messageFormatter: IWebsocketMessageFormatter,\r\n        proxyInfo: ProxyInfo,\r\n        headers: { [key: string]: string },\r\n        enableCompression: boolean) {\r\n\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n\r\n        this.proxyInfo = proxyInfo;\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privConnectionId = connectionId;\r\n        this.privMessageFormatter = messageFormatter;\r\n        this.privConnectionState = ConnectionState.None;\r\n        this.privUri = uri;\r\n        this.privHeaders = headers;\r\n        this.privEnableCompression = enableCompression;\r\n\r\n        // Add the connection ID to the headers\r\n        this.privHeaders[HeaderNames.ConnectionId] = this.privConnectionId;\r\n\r\n        this.privLastErrorReceived = \"\";\r\n    }\r\n\r\n    public get state(): ConnectionState {\r\n        return this.privConnectionState;\r\n    }\r\n\r\n    public open(): Promise<ConnectionOpenResponse> {\r\n        if (this.privConnectionState === ConnectionState.Disconnected) {\r\n            return Promise.reject<ConnectionOpenResponse>(`Cannot open a connection that is in ${this.privConnectionState} state`);\r\n        }\r\n\r\n        if (this.privConnectionEstablishDeferral) {\r\n            return this.privConnectionEstablishDeferral.promise;\r\n        }\r\n\r\n        this.privConnectionEstablishDeferral = new Deferred<ConnectionOpenResponse>();\r\n        this.privCertificateValidatedDeferral = new Deferred<void>();\r\n\r\n        this.privConnectionState = ConnectionState.Connecting;\r\n\r\n        try {\r\n\r\n            if (typeof WebSocket !== \"undefined\" && !WebsocketMessageAdapter.forceNpmWebSocket) {\r\n                // Browser handles cert checks.\r\n                this.privCertificateValidatedDeferral.resolve();\r\n\r\n                this.privWebsocketClient = new WebSocket(this.privUri);\r\n            } else {\r\n                const options: ws.ClientOptions = { headers: this.privHeaders, perMessageDeflate: this.privEnableCompression };\r\n                // The ocsp library will handle validation for us and fail the connection if needed.\r\n                this.privCertificateValidatedDeferral.resolve();\r\n\r\n                options.agent = this.getAgent();\r\n                // Workaround for https://github.com/microsoft/cognitive-services-speech-sdk-js/issues/465\r\n                // Which is root caused by https://github.com/TooTallNate/node-agent-base/issues/61\r\n                const uri = new URL(this.privUri);\r\n                let protocol: string = uri.protocol;\r\n\r\n                if (protocol?.toLocaleLowerCase() === \"wss:\") {\r\n                    protocol = \"https:\";\r\n                } else if (protocol?.toLocaleLowerCase() === \"ws:\") {\r\n                    protocol = \"http:\";\r\n                }\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n                (options.agent as any).protocol = protocol;\r\n                this.privWebsocketClient = new ws(this.privUri, options);\r\n            }\r\n\r\n            this.privWebsocketClient.binaryType = \"arraybuffer\";\r\n            this.privReceivingMessageQueue = new Queue<ConnectionMessage>();\r\n            this.privDisconnectDeferral = new Deferred<void>();\r\n            this.privSendMessageQueue = new Queue<ISendItem>();\r\n            this.processSendQueue().catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n        } catch (error) {\r\n            this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(500, error as string));\r\n            return this.privConnectionEstablishDeferral.promise;\r\n        }\r\n\r\n        this.onEvent(new ConnectionStartEvent(this.privConnectionId, this.privUri));\r\n\r\n        this.privWebsocketClient.onopen = (): void => {\r\n            this.privCertificateValidatedDeferral.promise.then((): void => {\r\n                this.privConnectionState = ConnectionState.Connected;\r\n                this.onEvent(new ConnectionEstablishedEvent(this.privConnectionId));\r\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(200, \"\"));\r\n            }, (error: string): void => {\r\n                this.privConnectionEstablishDeferral.reject(error);\r\n            });\r\n        };\r\n\r\n        this.privWebsocketClient.onerror = (e: { error: any; message: string; type: string; target: WebSocket | ws }): void => {\r\n            this.onEvent(new ConnectionErrorEvent(this.privConnectionId, e.message, e.type));\r\n            this.privLastErrorReceived = e.message;\r\n        };\r\n\r\n        this.privWebsocketClient.onclose = (e: { wasClean: boolean; code: number; reason: string; target: WebSocket | ws }): void => {\r\n            if (this.privConnectionState === ConnectionState.Connecting) {\r\n                this.privConnectionState = ConnectionState.Disconnected;\r\n                // this.onEvent(new ConnectionEstablishErrorEvent(this.connectionId, e.code, e.reason));\r\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(e.code, e.reason + \" \" + this.privLastErrorReceived));\r\n            } else {\r\n                this.privConnectionState = ConnectionState.Disconnected;\r\n                this.privWebsocketClient = null;\r\n                this.onEvent(new ConnectionClosedEvent(this.privConnectionId, e.code, e.reason));\r\n            }\r\n\r\n            this.onClose(e.code, e.reason).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n        };\r\n\r\n        this.privWebsocketClient.onmessage = (e: { data: ws.Data; type: string; target: WebSocket | ws }): void => {\r\n            const networkReceivedTime = new Date().toISOString();\r\n            if (this.privConnectionState === ConnectionState.Connected) {\r\n                const deferred = new Deferred<ConnectionMessage>();\r\n                // let id = ++this.idCounter;\r\n                this.privReceivingMessageQueue.enqueueFromPromise(deferred.promise);\r\n                if (e.data instanceof ArrayBuffer) {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Binary, e.data);\r\n                    this.privMessageFormatter\r\n                        .toConnectionMessage(rawMessage)\r\n                        .then((connectionMessage: ConnectionMessage): void => {\r\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.resolve(connectionMessage);\r\n                        }, (error: string): void => {\r\n                            // TODO: Events for these ?\r\n                            deferred.reject(`Invalid binary message format. Error: ${error}`);\r\n                        });\r\n                } else {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Text, e.data);\r\n                    this.privMessageFormatter\r\n                        .toConnectionMessage(rawMessage)\r\n                        .then((connectionMessage: ConnectionMessage): void => {\r\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.resolve(connectionMessage);\r\n                        }, (error: string): void => {\r\n                            // TODO: Events for these ?\r\n                            deferred.reject(`Invalid text message format. Error: ${error}`);\r\n                        });\r\n                }\r\n            }\r\n        };\r\n\r\n        return this.privConnectionEstablishDeferral.promise;\r\n    }\r\n\r\n    public send(message: ConnectionMessage): Promise<void> {\r\n        if (this.privConnectionState !== ConnectionState.Connected) {\r\n            return Promise.reject(`Cannot send on connection that is in ${ConnectionState[this.privConnectionState]} state`);\r\n        }\r\n\r\n        const messageSendStatusDeferral = new Deferred<void>();\r\n        const messageSendDeferral = new Deferred<ISendItem>();\r\n\r\n        this.privSendMessageQueue.enqueueFromPromise(messageSendDeferral.promise);\r\n\r\n        this.privMessageFormatter\r\n            .fromConnectionMessage(message)\r\n            .then((rawMessage: RawWebsocketMessage): void => {\r\n                messageSendDeferral.resolve({\r\n                    Message: message,\r\n                    RawWebsocketMessage: rawMessage,\r\n                    sendStatusDeferral: messageSendStatusDeferral,\r\n                });\r\n            }, (error: string): void => {\r\n                messageSendDeferral.reject(`Error formatting the message. ${error}`);\r\n            });\r\n\r\n        return messageSendStatusDeferral.promise;\r\n    }\r\n\r\n    public read(): Promise<ConnectionMessage> {\r\n        if (this.privConnectionState !== ConnectionState.Connected) {\r\n            return Promise.reject<ConnectionMessage>(`Cannot read on connection that is in ${this.privConnectionState} state`);\r\n        }\r\n\r\n        return this.privReceivingMessageQueue.dequeue();\r\n    }\r\n\r\n    public close(reason?: string): Promise<void> {\r\n        if (this.privWebsocketClient) {\r\n            if (this.privConnectionState !== ConnectionState.Disconnected) {\r\n                this.privWebsocketClient.close(1000, reason ? reason : \"Normal closure by client\");\r\n            }\r\n        } else {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return this.privDisconnectDeferral.promise;\r\n    }\r\n\r\n    public get events(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    private sendRawMessage(sendItem: ISendItem): Promise<void> {\r\n        try {\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!sendItem) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            this.onEvent(new ConnectionMessageSentEvent(this.privConnectionId, new Date().toISOString(), sendItem.Message));\r\n\r\n            // add a check for the ws readystate in order to stop the red console error 'WebSocket is already in CLOSING or CLOSED state' appearing\r\n            if (this.isWebsocketOpen) {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n                this.privWebsocketClient.send(sendItem.RawWebsocketMessage.payload);\r\n            } else {\r\n                return Promise.reject(\"websocket send error: Websocket not ready \" + this.privConnectionId + \" \" + sendItem.Message.id + \" \" + new Error().stack);\r\n            }\r\n            return Promise.resolve();\r\n\r\n        } catch (e) {\r\n            return Promise.reject(`websocket send error: ${e as string}`);\r\n        }\r\n    }\r\n\r\n    private async onClose(code: number, reason: string): Promise<void> {\r\n        const closeReason = `Connection closed. ${code}: ${reason}`;\r\n        this.privConnectionState = ConnectionState.Disconnected;\r\n        this.privDisconnectDeferral.resolve();\r\n        await this.privReceivingMessageQueue.drainAndDispose((): void => {\r\n            // TODO: Events for these ?\r\n            // Logger.instance.onEvent(new LoggingEvent(LogType.Warning, null, `Failed to process received message. Reason: ${closeReason}, Message: ${JSON.stringify(pendingReceiveItem)}`));\r\n        }, closeReason);\r\n\r\n        await this.privSendMessageQueue.drainAndDispose((pendingSendItem: ISendItem): void => {\r\n            pendingSendItem.sendStatusDeferral.reject(closeReason);\r\n        }, closeReason);\r\n    }\r\n\r\n    private async processSendQueue(): Promise<void> {\r\n        while (true) {\r\n            const itemToSend: Promise<ISendItem> = this.privSendMessageQueue.dequeue();\r\n            const sendItem: ISendItem = await itemToSend;\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!sendItem) {\r\n                return;\r\n            }\r\n\r\n            try {\r\n                await this.sendRawMessage(sendItem);\r\n                sendItem.sendStatusDeferral.resolve();\r\n            } catch (sendError) {\r\n                sendItem.sendStatusDeferral.reject(sendError as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    private onEvent(event: ConnectionEvent): void {\r\n        this.privConnectionEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private getAgent(): http.Agent {\r\n        // eslint-disable-next-line @typescript-eslint/unbound-method\r\n        const agent: { proxyInfo: ProxyInfo } = new Agent.Agent(this.createConnection) as unknown as { proxyInfo: ProxyInfo } ;\r\n\r\n        if (this.proxyInfo !== undefined &&\r\n            this.proxyInfo.HostName !== undefined &&\r\n            this.proxyInfo.Port > 0) {\r\n            agent.proxyInfo = this.proxyInfo;\r\n        }\r\n\r\n        return agent as unknown as http.Agent;\r\n    }\r\n\r\n    private static GetProxyAgent(proxyInfo: ProxyInfo): HttpsProxyAgent {\r\n        const httpProxyOptions: HttpsProxyAgent.HttpsProxyAgentOptions = {\r\n            host: proxyInfo.HostName,\r\n            port: proxyInfo.Port,\r\n        };\r\n\r\n        if (!!proxyInfo.UserName) {\r\n            httpProxyOptions.headers = {\r\n                \"Proxy-Authentication\": \"Basic \" + new Buffer(`${proxyInfo.UserName}:${(proxyInfo.Password === undefined) ? \"\" : proxyInfo.Password}`).toString(\"base64\"),\r\n            };\r\n        } else {\r\n            httpProxyOptions.headers = {};\r\n        }\r\n\r\n        httpProxyOptions.headers.requestOCSP = \"true\";\r\n\r\n        const httpProxyAgent: HttpsProxyAgent = new HttpsProxyAgent(httpProxyOptions);\r\n        return httpProxyAgent;\r\n    }\r\n\r\n    private createConnection(request: Agent.ClientRequest, options: Agent.RequestOptions): Promise<net.Socket> {\r\n        let socketPromise: Promise<net.Socket>;\r\n\r\n        options = {\r\n            ...options,\r\n            ...{\r\n                requestOCSP: true,\r\n                servername: options.host\r\n            }\r\n        };\r\n\r\n        if (!!this.proxyInfo) {\r\n            const httpProxyAgent: HttpsProxyAgent = WebsocketMessageAdapter.GetProxyAgent(this.proxyInfo);\r\n            const baseAgent: Agent.Agent = httpProxyAgent as unknown as Agent.Agent;\r\n\r\n            socketPromise = new Promise<net.Socket>((resolve: (value: net.Socket) => void, reject: (error: string | Error) => void): void => {\r\n                baseAgent.callback(request, options, (error: Error, socket: net.Socket): void => {\r\n                    if (!!error) {\r\n                        reject(error);\r\n                    } else {\r\n                        resolve(socket);\r\n                    }\r\n                });\r\n            });\r\n        } else {\r\n            if (!!options.secureEndpoint) {\r\n                socketPromise = Promise.resolve(tls.connect(options));\r\n            } else {\r\n                socketPromise = Promise.resolve(net.connect(options));\r\n            }\r\n        }\r\n\r\n        return socketPromise;\r\n    }\r\n\r\n    private get isWebsocketOpen(): boolean {\r\n        return this.privWebsocketClient && this.privWebsocketClient.readyState === this.privWebsocketClient.OPEN;\r\n    }\r\n\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionOpenResponse,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IConnection,\r\n    IStringDictionary,\r\n    IWebsocketMessageFormatter,\r\n} from \"../common/Exports.js\";\r\nimport { ProxyInfo } from \"./ProxyInfo.js\";\r\nimport { WebsocketMessageAdapter } from \"./WebsocketMessageAdapter.js\";\r\n\r\nexport class WebsocketConnection implements IConnection {\r\n\r\n    private privUri: string;\r\n    private privMessageFormatter: IWebsocketMessageFormatter;\r\n    private privConnectionMessageAdapter: WebsocketMessageAdapter;\r\n    private privId: string;\r\n    private privIsDisposed: boolean = false;\r\n\r\n    public constructor(\r\n        uri: string,\r\n        queryParameters: IStringDictionary<string>,\r\n        headers: IStringDictionary<string>,\r\n        messageFormatter: IWebsocketMessageFormatter,\r\n        proxyInfo: ProxyInfo,\r\n        enableCompression: boolean = false,\r\n        connectionId?: string) {\r\n\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n\r\n        this.privMessageFormatter = messageFormatter;\r\n\r\n        let queryParams = \"\";\r\n        let i = 0;\r\n\r\n        if (queryParameters) {\r\n            for (const paramName in queryParameters) {\r\n                if (paramName) {\r\n                    queryParams += ((i === 0) && (uri.indexOf(\"?\") === -1)) ? \"?\" : \"&\";\r\n\r\n                    const key = encodeURIComponent(paramName);\r\n                    queryParams += key;\r\n\r\n                    let val = queryParameters[paramName];\r\n                    if (val) {\r\n                        val = encodeURIComponent(val);\r\n                        queryParams += `=${val}`;\r\n                    }\r\n\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (headers) {\r\n            for (const headerName in headers) {\r\n                if (headerName) {\r\n                    queryParams += ((i === 0) && (uri.indexOf(\"?\") === -1)) ? \"?\" : \"&\";\r\n                    const val = encodeURIComponent(headers[headerName]);\r\n                    queryParams += `${headerName}=${val}`;\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.privUri = uri + queryParams;\r\n        this.privId = connectionId ? connectionId : createNoDashGuid();\r\n\r\n        this.privConnectionMessageAdapter = new WebsocketMessageAdapter(\r\n            this.privUri,\r\n            this.id,\r\n            this.privMessageFormatter,\r\n            proxyInfo,\r\n            headers,\r\n            enableCompression);\r\n    }\r\n\r\n    public async dispose(): Promise<void> {\r\n        this.privIsDisposed = true;\r\n\r\n        if (this.privConnectionMessageAdapter) {\r\n            await this.privConnectionMessageAdapter.close();\r\n        }\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public get uri(): string {\r\n        return this.privUri;\r\n    }\r\n\r\n    public state(): ConnectionState {\r\n        return this.privConnectionMessageAdapter.state;\r\n    }\r\n\r\n    public open(): Promise<ConnectionOpenResponse> {\r\n        return this.privConnectionMessageAdapter.open();\r\n    }\r\n\r\n    public send(message: ConnectionMessage): Promise<void> {\r\n        return this.privConnectionMessageAdapter.send(message);\r\n    }\r\n\r\n    public read(): Promise<ConnectionMessage> {\r\n        return this.privConnectionMessageAdapter.read();\r\n    }\r\n\r\n    public get events(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionMessageAdapter.events;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nimport {\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n} from \"../common/Exports.js\";\r\n\r\nexport class ReplayableAudioNode implements IAudioStreamNode {\r\n    private privAudioNode: IAudioStreamNode;\r\n    private privBytesPerSecond: number;\r\n    private privBuffers: BufferEntry[] = [];\r\n    private privReplayOffset: number = 0;\r\n    private privLastShrinkOffset: number = 0;\r\n    private privBufferStartOffset: number = 0;\r\n    private privBufferSerial: number = 0;\r\n    private privBufferedBytes: number = 0;\r\n    private privReplay: boolean = false;\r\n    private privLastChunkAcquiredTime: number = 0;\r\n\r\n    public constructor(audioSource: IAudioStreamNode, bytesPerSecond: number) {\r\n        this.privAudioNode = audioSource;\r\n        this.privBytesPerSecond = bytesPerSecond;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privAudioNode.id();\r\n    }\r\n\r\n    // Reads and returns the next chunk of audio buffer.\r\n    // If replay of existing buffers are needed, read() will first seek and replay\r\n    // existing content, and upoin completion it will read new content from the underlying\r\n    // audio node, saving that content into the replayable buffers.\r\n    public read(): Promise<IStreamChunk<ArrayBuffer>> {\r\n        // if there is a replay request to honor.\r\n        if (!!this.privReplay && this.privBuffers.length !== 0) {\r\n            // Find the start point in the buffers.\r\n            // Offsets are in 100ns increments.\r\n            // So how many bytes do we need to seek to get the right offset?\r\n            const offsetToSeek: number = this.privReplayOffset - this.privBufferStartOffset;\r\n\r\n            let bytesToSeek: number = Math.round(offsetToSeek * this.privBytesPerSecond * 1e-7);\r\n            if (0 !== (bytesToSeek % 2)) {\r\n                bytesToSeek++;\r\n            }\r\n\r\n            let i: number = 0;\r\n\r\n            while (i < this.privBuffers.length && bytesToSeek >= this.privBuffers[i].chunk.buffer.byteLength) {\r\n                bytesToSeek -= this.privBuffers[i++].chunk.buffer.byteLength;\r\n            }\r\n\r\n            if (i < this.privBuffers.length) {\r\n                const retVal: ArrayBuffer = this.privBuffers[i].chunk.buffer.slice(bytesToSeek);\r\n\r\n                this.privReplayOffset += (retVal.byteLength / this.privBytesPerSecond) * 1e+7;\r\n\r\n                // If we've reached the end of the buffers, stop replaying.\r\n                if (i === this.privBuffers.length - 1) {\r\n                    this.privReplay = false;\r\n                }\r\n\r\n                return Promise.resolve<IStreamChunk<ArrayBuffer>>({\r\n                    buffer: retVal,\r\n                    isEnd: false,\r\n                    timeReceived: this.privBuffers[i].chunk.timeReceived,\r\n                });\r\n            }\r\n        }\r\n\r\n        return this.privAudioNode.read()\r\n            .then((result: IStreamChunk<ArrayBuffer>): IStreamChunk<ArrayBuffer> => {\r\n                if (result && result.buffer) {\r\n                    this.privBuffers.push(new BufferEntry(result, this.privBufferSerial++, this.privBufferedBytes));\r\n                    this.privBufferedBytes += result.buffer.byteLength;\r\n                }\r\n                return result;\r\n            });\r\n    }\r\n\r\n    public detach(): Promise<void> {\r\n        this.privBuffers = undefined;\r\n        return this.privAudioNode.detach();\r\n    }\r\n\r\n    public replay(): void {\r\n        if (this.privBuffers && 0 !== this.privBuffers.length) {\r\n            this.privReplay = true;\r\n            this.privReplayOffset = this.privLastShrinkOffset;\r\n        }\r\n    }\r\n\r\n    // Shrinks the existing audio buffers to start at the new offset, or at the\r\n    // beginning of the buffer closest to the requested offset.\r\n    // A replay request will start from the last shrink point.\r\n    public shrinkBuffers(offset: number): void {\r\n        if (this.privBuffers === undefined || this.privBuffers.length === 0) {\r\n            return;\r\n        }\r\n\r\n        this.privLastShrinkOffset = offset;\r\n\r\n        // Find the start point in the buffers.\r\n        // Offsets are in 100ns increments.\r\n        // So how many bytes do we need to seek to get the right offset?\r\n        const offsetToSeek: number = offset - this.privBufferStartOffset;\r\n\r\n        let bytesToSeek: number = Math.round(offsetToSeek * this.privBytesPerSecond * 1e-7);\r\n\r\n        let i: number = 0;\r\n\r\n        while (i < this.privBuffers.length && bytesToSeek >= this.privBuffers[i].chunk.buffer.byteLength) {\r\n            bytesToSeek -= this.privBuffers[i++].chunk.buffer.byteLength;\r\n        }\r\n        this.privBufferStartOffset = Math.round(offset - ((bytesToSeek / this.privBytesPerSecond) * 1e+7));\r\n        this.privBuffers = this.privBuffers.slice(i);\r\n    }\r\n\r\n    // Finds the time a buffer of audio was first seen by offset.\r\n    public findTimeAtOffset(offset: number): number {\r\n        if (offset < this.privBufferStartOffset || this.privBuffers === undefined) {\r\n            return 0;\r\n        }\r\n\r\n        for (const value of this.privBuffers) {\r\n            const startOffset: number = (value.byteOffset / this.privBytesPerSecond) * 1e7;\r\n            const endOffset: number = startOffset + ((value.chunk.buffer.byteLength / this.privBytesPerSecond) * 1e7);\r\n\r\n            if (offset >= startOffset && offset <= endOffset) {\r\n                return value.chunk.timeReceived;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}\r\n\r\n// Primary use of this class is to help debugging problems with the replay\r\n// code. If the memory cost of alloc / dealloc gets too much, drop it and just use\r\n// the ArrayBuffer directly.\r\nclass BufferEntry {\r\n    public chunk: IStreamChunk<ArrayBuffer>;\r\n    public serial: number;\r\n    public byteOffset: number;\r\n\r\n    public constructor(chunk: IStreamChunk<ArrayBuffer>, serial: number, byteOffset: number) {\r\n        this.chunk = chunk;\r\n        this.serial = serial;\r\n        this.byteOffset = byteOffset;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport * as fs from \"fs\";\r\nimport { IAudioDestination } from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport { AudioStreamFormat } from \"../Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat.js\";\r\n\r\nexport class AudioFileWriter implements IAudioDestination {\r\n    private privAudioFormat: AudioOutputFormatImpl;\r\n    private privFd: number;\r\n    private privId: string;\r\n    private privWriteStream: fs.WriteStream;\r\n\r\n    public constructor(filename: fs.PathLike) {\r\n        Contracts.throwIfNullOrUndefined(fs.openSync, \"\\nFile System access not available, please use Push or PullAudioOutputStream\");\r\n        this.privFd = fs.openSync(filename, \"w\");\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        Contracts.throwIfNotUndefined(this.privAudioFormat, \"format is already set\");\r\n        this.privAudioFormat = format as AudioOutputFormatImpl;\r\n        let headerOffset: number = 0;\r\n        if (this.privAudioFormat.hasHeader) {\r\n            headerOffset = this.privAudioFormat.header.byteLength;\r\n        }\r\n        if (this.privFd !== undefined) {\r\n            this.privWriteStream = fs.createWriteStream(\"\", {fd: this.privFd, start: headerOffset, autoClose: false});\r\n        }\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        Contracts.throwIfNullOrUndefined(this.privAudioFormat, \"must set format before writing.\");\r\n        if (this.privWriteStream !== undefined) {\r\n            this.privWriteStream.write(new Uint8Array(buffer.slice(0)));\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        if (this.privFd !== undefined) {\r\n            this.privWriteStream.on(\"finish\", (): void => {\r\n                if (this.privAudioFormat.hasHeader) {\r\n                    this.privAudioFormat.updateHeader(this.privWriteStream.bytesWritten);\r\n                    fs.writeSync(this.privFd,\r\n                        new Int8Array(this.privAudioFormat.header),\r\n                        0,\r\n                        this.privAudioFormat.header.byteLength,\r\n                        0);\r\n                }\r\n                fs.closeSync(this.privFd);\r\n                this.privFd = undefined;\r\n            });\r\n            this.privWriteStream.end();\r\n        }\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type,\r\n} from \"../../common.speech/Exports.js\";\r\nimport {\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    ChunkedArrayBufferStream,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n    Stream,\r\n} from \"../../common/Exports.js\";\r\nimport { createNoDashGuid } from \"../../common/Guid.js\";\r\nimport { AudioStreamFormat, PullAudioInputStreamCallback } from \"../Exports.js\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat.js\";\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class AudioInputStream\r\n */\r\nexport abstract class AudioInputStream {\r\n\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member AudioInputStream.createPushStream\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     * written to the push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The audio input stream being created.\r\n     */\r\n    public static createPushStream(format?: AudioStreamFormat): PushAudioInputStream {\r\n        return PushAudioInputStream.create(format);\r\n    }\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for read()\r\n     * and close() methods.\r\n     * @member AudioInputStream.createPullStream\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object, derived from\r\n     * PullAudioInputStreamCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be returned from\r\n     * the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The audio input stream being created.\r\n     */\r\n    public static createPullStream(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\r\n        return PullAudioInputStream.create(callback, format);\r\n        // throw new Error(\"Oops\");\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @class PushAudioInputStream\r\n */\r\nexport abstract class PushAudioInputStream extends AudioInputStream {\r\n\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member PushAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be written to the\r\n     * push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The push audio input stream being created.\r\n     */\r\n    public static create(format?: AudioStreamFormat): PushAudioInputStream {\r\n        return new PushAudioInputStreamImpl(format);\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PushAudioInputStream.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public abstract write(dataBuffer: ArrayBuffer): void;\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PushAudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PushAudioInputStreamImpl\r\n */\r\nexport class PushAudioInputStreamImpl extends PushAudioInputStream implements IAudioSource {\r\n\r\n    private privFormat: AudioStreamFormatImpl;\r\n    private privId: string;\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n    private privStream: Stream<ArrayBuffer>;\r\n\r\n    /**\r\n     * Creates and initalizes an instance with the given values.\r\n     * @constructor\r\n     * @param {AudioStreamFormat} format - The audio stream format.\r\n     */\r\n    public constructor(format?: AudioStreamFormat) {\r\n        super();\r\n        if (format === undefined) {\r\n            this.privFormat = AudioStreamFormatImpl.getDefaultInputFormat();\r\n        } else {\r\n            this.privFormat = format as AudioStreamFormatImpl;\r\n        }\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privId = createNoDashGuid();\r\n        this.privStream = new ChunkedArrayBufferStream(this.privFormat.avgBytesPerSec / 10);\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(this.privFormat);\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PushAudioInputStreamImpl.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public write(dataBuffer: ArrayBuffer): void {\r\n        this.privStream.writeStreamChunk({\r\n            buffer: dataBuffer,\r\n            isEnd: false,\r\n            timeReceived: Date.now()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PushAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privStream.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n\r\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        await this.turnOn();\r\n        const stream = this.privStream;\r\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n        return {\r\n            detach: async (): Promise<void> => {\r\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                return this.turnOff();\r\n            },\r\n            id: (): string => audioNodeId,\r\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => stream.read(),\r\n        };\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n    }\r\n\r\n    public turnOff(): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return Promise.resolve({\r\n            bitspersample: this.privFormat.bitsPerSample,\r\n            channelcount: this.privFormat.channels,\r\n            connectivity: connectivity.Unknown,\r\n            manufacturer: \"Speech SDK\",\r\n            model: \"PushStream\",\r\n            samplerate: this.privFormat.samplesPerSec,\r\n            type: type.Stream,\r\n        });\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private toBuffer(arrayBuffer: ArrayBuffer): Buffer {\r\n        const buf: Buffer = Buffer.alloc(arrayBuffer.byteLength);\r\n        const view: Uint8Array = new Uint8Array(arrayBuffer);\r\n        for (let i = 0; i < buf.length; ++i) {\r\n            buf[i] = view[i];\r\n        }\r\n        return buf;\r\n    }\r\n}\r\n\r\n/*\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class PullAudioInputStream\r\n */\r\nexport abstract class PullAudioInputStream extends AudioInputStream {\r\n    /**\r\n     * Creates and initializes and instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n super();\r\n}\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\r\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @member PullAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\r\n     * derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     * returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The push audio input stream being created.\r\n     */\r\n    public static create(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\r\n        return new PullAudioInputStreamImpl(callback, format as AudioStreamFormatImpl);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member PullAudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PullAudioInputStreamImpl\r\n */\r\nexport class PullAudioInputStreamImpl extends PullAudioInputStream implements IAudioSource {\r\n\r\n    private privCallback: PullAudioInputStreamCallback;\r\n    private privFormat: AudioStreamFormatImpl;\r\n    private privId: string;\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n    private privIsClosed: boolean;\r\n    private privBufferSize: number;\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\r\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @constructor\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\r\n     * derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     * returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     */\r\n    public constructor(callback: PullAudioInputStreamCallback, format?: AudioStreamFormatImpl) {\r\n        super();\r\n        if (undefined === format) {\r\n            this.privFormat = AudioStreamFormat.getDefaultInputFormat() as AudioStreamFormatImpl;\r\n        } else {\r\n            this.privFormat = format;\r\n        }\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privId = createNoDashGuid();\r\n        this.privCallback = callback;\r\n        this.privIsClosed = false;\r\n        this.privBufferSize = this.privFormat.avgBytesPerSec / 10;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(this.privFormat);\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privIsClosed = true;\r\n        this.privCallback.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n\r\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        await this.turnOn();\r\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n        return {\r\n            detach: (): Promise<void> => {\r\n                this.privCallback.close();\r\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                return this.turnOff();\r\n            },\r\n            id: (): string => audioNodeId,\r\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => {\r\n                let totalBytes: number = 0;\r\n                let transmitBuff: ArrayBuffer;\r\n                // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\r\n                while (totalBytes < this.privBufferSize) {\r\n                    // Sizing the read buffer to the delta between the perfect size and what's left means we won't ever get too much\r\n                    // data back.\r\n                    const readBuff: ArrayBuffer = new ArrayBuffer(this.privBufferSize - totalBytes);\r\n                    const pulledBytes: number = this.privCallback.read(readBuff);\r\n                    // If there is no return buffer yet defined, set the return buffer to the that was just populated.\r\n                    // This was, if we have enough data there's no copy penalty, but if we don't we have a buffer that's the\r\n                    // preferred size allocated.\r\n                    if (undefined === transmitBuff) {\r\n                        transmitBuff = readBuff;\r\n                    } else {\r\n                        // Not the first bite at the apple, so fill the return buffer with the data we got back.\r\n                        const intView: Int8Array = new Int8Array(transmitBuff);\r\n                        intView.set(new Int8Array(readBuff), totalBytes);\r\n                    }\r\n                    // If there are no bytes to read, just break out and be done.\r\n                    if (0 === pulledBytes) {\r\n                        break;\r\n                    }\r\n                    totalBytes += pulledBytes;\r\n                }\r\n                return Promise.resolve<IStreamChunk<ArrayBuffer>>({\r\n                    buffer: transmitBuff.slice(0, totalBytes),\r\n                    isEnd: this.privIsClosed || totalBytes === 0,\r\n                    timeReceived: Date.now(),\r\n                });\r\n            },\r\n        };\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n    }\r\n\r\n    public turnOff(): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return Promise.resolve({\r\n            bitspersample: this.privFormat.bitsPerSample,\r\n            channelcount: this.privFormat.channels,\r\n            connectivity: connectivity.Unknown,\r\n            manufacturer: \"Speech SDK\",\r\n            model: \"PullStream\",\r\n            samplerate: this.privFormat.samplesPerSec,\r\n            type: type.Stream,\r\n        });\r\n    }\r\n\r\n    private onEvent(event: AudioSourceEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Define speech synthesis audio output formats.\r\n * @enum SpeechSynthesisOutputFormat\r\n * Updated in version 1.17.0\r\n */\r\nexport enum SpeechSynthesisOutputFormat {\r\n    /**\r\n     * raw-8khz-8bit-mono-mulaw\r\n     * @member SpeechSynthesisOutputFormat.Raw8Khz8BitMonoMULaw,\r\n     */\r\n    Raw8Khz8BitMonoMULaw,\r\n\r\n    /**\r\n     * riff-16khz-16kbps-mono-siren\r\n     * @note Unsupported by the service. Do not use this value.\r\n     * @member SpeechSynthesisOutputFormat.Riff16Khz16KbpsMonoSiren\r\n     */\r\n    Riff16Khz16KbpsMonoSiren,\r\n\r\n    /**\r\n     * audio-16khz-16kbps-mono-siren\r\n     * @note Unsupported by the service. Do not use this value.\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz16KbpsMonoSiren\r\n     */\r\n    Audio16Khz16KbpsMonoSiren,\r\n\r\n    /**\r\n     * audio-16khz-32kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3\r\n     */\r\n    Audio16Khz32KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-16khz-128kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz128KBitRateMonoMp3\r\n     */\r\n    Audio16Khz128KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-16khz-64kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3\r\n     */\r\n    Audio16Khz64KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-24khz-48kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3\r\n     */\r\n    Audio24Khz48KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-24khz-96kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz96KBitRateMonoMp3\r\n     */\r\n    Audio24Khz96KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-24khz-160kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3\r\n     */\r\n    Audio24Khz160KBitRateMonoMp3,\r\n\r\n    /**\r\n     * raw-16khz-16bit-mono-truesilk\r\n     * @member SpeechSynthesisOutputFormat.Raw16Khz16BitMonoTrueSilk\r\n     */\r\n    Raw16Khz16BitMonoTrueSilk,\r\n\r\n    /**\r\n     * riff-16khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm\r\n     */\r\n    Riff16Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-8khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff8Khz16BitMonoPcm\r\n     */\r\n    Riff8Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-24khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm\r\n     */\r\n    Riff24Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-8khz-8bit-mono-mulaw\r\n     * @member SpeechSynthesisOutputFormat.Riff8Khz8BitMonoMULaw\r\n     */\r\n    Riff8Khz8BitMonoMULaw,\r\n\r\n    /**\r\n     * raw-16khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw16Khz16BitMonoPcm\r\n     */\r\n    Raw16Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * raw-24khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm\r\n     */\r\n    Raw24Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * raw-8khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw8Khz16BitMonoPcm\r\n     */\r\n    Raw8Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * ogg-16khz-16bit-mono-opus\r\n     * @member SpeechSynthesisOutputFormat.Ogg16Khz16BitMonoOpus\r\n     */\r\n    Ogg16Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * ogg-24khz-16bit-mono-opus\r\n     * @member SpeechSynthesisOutputFormat.Ogg24Khz16BitMonoOpus\r\n     */\r\n    Ogg24Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * raw-48khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw48Khz16BitMonoPcm\r\n     */\r\n    Raw48Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-48khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm\r\n     */\r\n\r\n    Riff48Khz16BitMonoPcm,\r\n    /**\r\n     * audio-48khz-96kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio48Khz96KBitRateMonoMp3\r\n     */\r\n    Audio48Khz96KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-48khz-192kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio48Khz192KBitRateMonoMp3\r\n     */\r\n    Audio48Khz192KBitRateMonoMp3,\r\n\r\n    /**\r\n     * ogg-48khz-16bit-mono-opus\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesisOutputFormat.Ogg48Khz16BitMonoOpus\r\n     */\r\n    Ogg48Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * webm-16khz-16bit-mono-opus\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesisOutputFormat.Webm16Khz16BitMonoOpus\r\n     */\r\n    Webm16Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * webm-24khz-16bit-mono-opus\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesisOutputFormat.Webm24Khz16BitMonoOpus\r\n     */\r\n    Webm24Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * raw-24khz-16bit-mono-truesilk\r\n     * Added in version 1.17.0\r\n     * @member SpeechSynthesisOutputFormat.Raw24Khz16BitMonoTrueSilk\r\n     */\r\n     Raw24Khz16BitMonoTrueSilk,\r\n\r\n    /**\r\n     * raw-8khz-8bit-mono-alaw\r\n     * Added in version 1.17.0\r\n     * @member SpeechSynthesisOutputFormat.Raw8Khz8BitMonoALaw\r\n     */\r\n     Raw8Khz8BitMonoALaw,\r\n\r\n    /**\r\n     * riff-8khz-8bit-mono-alaw\r\n     * Added in version 1.17.0\r\n     * @member SpeechSynthesisOutputFormat.Riff8Khz8BitMonoALaw\r\n     */\r\n     Riff8Khz8BitMonoALaw,\r\n\r\n    /**\r\n     * webm-24khz-16bit-24kbps-mono-opus\r\n     * Audio compressed by OPUS codec in a webm container, with bitrate of 24kbps, optimized for IoT scenario.\r\n     * Added in version 1.19.0\r\n     * @member SpeechSynthesisOutputFormat.Webm24Khz16Bit24KbpsMonoOpus\r\n     */\r\n    Webm24Khz16Bit24KbpsMonoOpus,\r\n\r\n    /**\r\n     * audio-16khz-16bit-32kbps-mono-opus\r\n     * Audio compressed by OPUS codec without container, with bitrate of 32kbps.\r\n     * Added in version 1.20.0\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz16Bit32KbpsMonoOpus\r\n     */\r\n    Audio16Khz16Bit32KbpsMonoOpus,\r\n\r\n    /**\r\n     * audio-24khz-16bit-48kbps-mono-opus\r\n     * Audio compressed by OPUS codec without container, with bitrate of 48kbps.\r\n     * Added in version 1.20.0\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz16Bit48KbpsMonoOpus\r\n     */\r\n    Audio24Khz16Bit48KbpsMonoOpus,\r\n\r\n    /**\r\n     * audio-24khz-16bit-24kbps-mono-opus\r\n     * Audio compressed by OPUS codec without container, with bitrate of 24kbps.\r\n     * Added in version 1.20.0\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz16Bit24KbpsMonoOpus\r\n     */\r\n    Audio24Khz16Bit24KbpsMonoOpus,\r\n\r\n    /**\r\n     * raw-22050hz-16bit-mono-pcm\r\n     * Raw PCM audio at 22050Hz sampling rate and 16-bit depth.\r\n     * Added in version 1.22.0\r\n     * @member SpeechSynthesisOutputFormat.Raw22050Hz16BitMonoPcm\r\n     */\r\n    Raw22050Hz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-22050hz-16bit-mono-pcm\r\n     * PCM audio at 22050Hz sampling rate and 16-bit depth, with RIFF header.\r\n     * Added in version 1.22.0\r\n     * @member SpeechSynthesisOutputFormat.Riff22050Hz16BitMonoPcm\r\n     */\r\n    Riff22050Hz16BitMonoPcm,\r\n\r\n    /**\r\n     * raw-44100hz-16bit-mono-pcm\r\n     * Raw PCM audio at 44100Hz sampling rate and 16-bit depth.\r\n     * Added in version 1.22.0\r\n     * @member SpeechSynthesisOutputFormat.Raw44100Hz16BitMonoPcm\r\n     */\r\n    Raw44100Hz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-44100hz-16bit-mono-pcm\r\n     * PCM audio at 44100Hz sampling rate and 16-bit depth, with RIFF header.\r\n     * Added in version 1.22.0\r\n     * @member SpeechSynthesisOutputFormat.Riff44100Hz16BitMonoPcm\r\n     */\r\n    Riff44100Hz16BitMonoPcm,\r\n\r\n    /**\r\n     * amr-wb-16000hz\r\n     * AMR-WB audio at 16kHz sampling rate.\r\n     * Added in version 1.38.0\r\n     * @member SpeechSynthesisOutputFormat.AmrWb16000Hz\r\n     */\r\n    AmrWb16000Hz,\r\n\r\n    /**\r\n     * g722-16khz-64kbps\r\n     * G.722 audio at 16kHz sampling rate and 64kbps bitrate.\r\n     * Added in version 1.38.0\r\n     */\r\n    G72216Khz64Kbps\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { INumberDictionary } from \"../../common/Exports.js\";\r\nimport { SpeechSynthesisOutputFormat } from \"../SpeechSynthesisOutputFormat.js\";\r\nimport { AudioFormatTag, AudioStreamFormatImpl } from \"./AudioStreamFormat.js\";\r\n\r\n/**\r\n * @private\r\n * @class AudioOutputFormatImpl\r\n * Updated in version 1.17.0\r\n */\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class AudioOutputFormatImpl extends AudioStreamFormatImpl {\r\n    public static SpeechSynthesisOutputFormatToString: INumberDictionary<string> = {\r\n        [SpeechSynthesisOutputFormat.Raw8Khz8BitMonoMULaw]: \"raw-8khz-8bit-mono-mulaw\",\r\n        [SpeechSynthesisOutputFormat.Riff16Khz16KbpsMonoSiren]: \"riff-16khz-16kbps-mono-siren\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz16KbpsMonoSiren]: \"audio-16khz-16kbps-mono-siren\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3]: \"audio-16khz-32kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz128KBitRateMonoMp3]: \"audio-16khz-128kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3]: \"audio-16khz-64kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3]: \"audio-24khz-48kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz96KBitRateMonoMp3]: \"audio-24khz-96kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3]: \"audio-24khz-160kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoTrueSilk]: \"raw-16khz-16bit-mono-truesilk\",\r\n        [SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm]: \"riff-16khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz16BitMonoPcm]: \"riff-8khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm]: \"riff-24khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz8BitMonoMULaw]: \"riff-8khz-8bit-mono-mulaw\",\r\n        [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoPcm]: \"raw-16khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm]: \"raw-24khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw8Khz16BitMonoPcm]: \"raw-8khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Ogg16Khz16BitMonoOpus]: \"ogg-16khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Ogg24Khz16BitMonoOpus]: \"ogg-24khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Raw48Khz16BitMonoPcm]: \"raw-48khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm]: \"riff-48khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Audio48Khz96KBitRateMonoMp3]: \"audio-48khz-96kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio48Khz192KBitRateMonoMp3]: \"audio-48khz-192kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Ogg48Khz16BitMonoOpus]: \"ogg-48khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Webm16Khz16BitMonoOpus]: \"webm-16khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Webm24Khz16BitMonoOpus]: \"webm-24khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Webm24Khz16Bit24KbpsMonoOpus]: \"webm-24khz-16bit-24kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Raw24Khz16BitMonoTrueSilk]: \"raw-24khz-16bit-mono-truesilk\",\r\n        [SpeechSynthesisOutputFormat.Raw8Khz8BitMonoALaw]: \"raw-8khz-8bit-mono-alaw\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz8BitMonoALaw]: \"riff-8khz-8bit-mono-alaw\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz16Bit32KbpsMonoOpus]: \"audio-16khz-16bit-32kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz16Bit48KbpsMonoOpus]: \"audio-24khz-16bit-48kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz16Bit24KbpsMonoOpus]: \"audio-24khz-16bit-24kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Raw22050Hz16BitMonoPcm]: \"raw-22050hz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff22050Hz16BitMonoPcm]: \"riff-22050hz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw44100Hz16BitMonoPcm]: \"raw-44100hz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff44100Hz16BitMonoPcm]: \"riff-44100hz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.AmrWb16000Hz]: \"amr-wb-16000hz\",\r\n        [SpeechSynthesisOutputFormat.G72216Khz64Kbps]: \"g722-16khz-64kbps\",\r\n    };\r\n    private priAudioFormatString: string;\r\n    /**\r\n     * audio format string for synthesis request, which may differ from priAudioFormatString.\r\n     * e.g. for riff format, we will request raw format and add a header in SDK side.\r\n     */\r\n    private readonly priRequestAudioFormatString: string;\r\n    private readonly priHasHeader: boolean;\r\n\r\n    /**\r\n     * Creates an instance with the given values.\r\n     * @constructor\r\n     * @param formatTag\r\n     * @param {number} channels - Number of channels.\r\n     * @param {number} samplesPerSec - Samples per second.\r\n     * @param {number} avgBytesPerSec - Average bytes per second.\r\n     * @param {number} blockAlign - Block alignment.\r\n     * @param {number} bitsPerSample - Bits per sample.\r\n     * @param {string} audioFormatString - Audio format string\r\n     * @param {string} requestAudioFormatString - Audio format string sent to service.\r\n     * @param {boolean} hasHeader - If the format has header or not.\r\n     */\r\n    public constructor(formatTag: AudioFormatTag,\r\n                       channels: number,\r\n                       samplesPerSec: number,\r\n                       avgBytesPerSec: number,\r\n                       blockAlign: number,\r\n                       bitsPerSample: number,\r\n                       audioFormatString: string,\r\n                       requestAudioFormatString: string,\r\n                       hasHeader: boolean) {\r\n        super(samplesPerSec, bitsPerSample, channels, formatTag);\r\n        this.formatTag = formatTag;\r\n        this.avgBytesPerSec = avgBytesPerSec;\r\n        this.blockAlign = blockAlign;\r\n        this.priAudioFormatString = audioFormatString;\r\n        this.priRequestAudioFormatString = requestAudioFormatString;\r\n        this.priHasHeader = hasHeader;\r\n    }\r\n\r\n    public static fromSpeechSynthesisOutputFormat(speechSynthesisOutputFormat?: SpeechSynthesisOutputFormat): AudioOutputFormatImpl {\r\n        if (speechSynthesisOutputFormat === undefined) {\r\n            return AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(\r\n            AudioOutputFormatImpl.SpeechSynthesisOutputFormatToString[speechSynthesisOutputFormat]);\r\n    }\r\n\r\n    public static fromSpeechSynthesisOutputFormatString(speechSynthesisOutputFormatString: string): AudioOutputFormatImpl {\r\n        switch (speechSynthesisOutputFormatString) {\r\n            case \"raw-8khz-8bit-mono-mulaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MuLaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-16khz-16kbps-mono-siren\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.Siren,\r\n                    1,\r\n                    16000,\r\n                    2000,\r\n                    40,\r\n                    0,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"audio-16khz-16kbps-mono-siren\",\r\n                    true);\r\n            case \"audio-16khz-16kbps-mono-siren\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.Siren,\r\n                    1,\r\n                    16000,\r\n                    2000,\r\n                    40,\r\n                    0,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-32kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    32 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-128kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    128 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-64kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    64 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-48kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    48 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-96kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    96 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-160kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    160 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-16khz-16bit-mono-truesilk\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.SILKSkype,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n\r\n            case \"riff-8khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    8000,\r\n                    16000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"riff-24khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-24khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"riff-8khz-8bit-mono-mulaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MuLaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-8bit-mono-mulaw\",\r\n                    true);\r\n            case \"raw-16khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-16khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"raw-24khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-24khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"raw-8khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    8000,\r\n                    16000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"ogg-16khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    16000,\r\n                    8192,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"ogg-24khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    24000,\r\n                    8192,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-48khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    48000,\r\n                    96000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-48khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"riff-48khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    48000,\r\n                    96000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-48khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"audio-48khz-96kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    48000,\r\n                    96 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-48khz-192kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    48000,\r\n                    192 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"ogg-48khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    48000,\r\n                    12000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"webm-16khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.WEBM_OPUS,\r\n                    1,\r\n                    16000,\r\n                    4000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"webm-24khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.WEBM_OPUS,\r\n                    1,\r\n                    24000,\r\n                    6000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"webm-24khz-16bit-24kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.WEBM_OPUS,\r\n                    1,\r\n                    24000,\r\n                    3000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-16bit-32kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OPUS,\r\n                    1,\r\n                    16000,\r\n                    4000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-16bit-48kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OPUS,\r\n                    1,\r\n                    24000,\r\n                    6000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-16bit-24kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OPUS,\r\n                    1,\r\n                    24000,\r\n                    3000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-16bit-mono-flac\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.FLAC,\r\n                    1,\r\n                    24000,\r\n                    24000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-48khz-16bit-mono-flac\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.FLAC,\r\n                    1,\r\n                    48000,\r\n                    30000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-24khz-16bit-mono-truesilk\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.SILKSkype,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-8khz-8bit-mono-alaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.ALaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-8khz-8bit-mono-alaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.ALaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-8bit-mono-alaw\",\r\n                    true);\r\n            case \"raw-22050hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    22050,\r\n                    44100,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-22050hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    22050,\r\n                    44100,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-22050hz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"raw-44100hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    44100,\r\n                    88200,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-44100hz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    44100,\r\n                    88200,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-44100hz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"amr-wb-16000h\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.AMR_WB,\r\n                    1,\r\n                    16000,\r\n                    3052,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"g722-16khz-64kbps\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.G722,\r\n                    1,\r\n                    16000,\r\n                    8000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-16khz-16bit-mono-pcm\":\r\n            default:\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    \"riff-16khz-16bit-mono-pcm\",\r\n                    \"raw-16khz-16bit-mono-pcm\",\r\n                    true);\r\n        }\r\n    }\r\n\r\n    public static getDefaultOutputFormat(): AudioOutputFormatImpl {\r\n        return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(\r\n            (typeof window !== \"undefined\") ? \"audio-24khz-48kbitrate-mono-mp3\" : \"riff-16khz-16bit-mono-pcm\");\r\n    }\r\n\r\n    /**\r\n     * The format tag of the audio\r\n     * @AudioFormatTag AudioOutputFormatImpl.prototype.formatTag\r\n     * @function\r\n     * @public\r\n     */\r\n    public formatTag: AudioFormatTag;\r\n\r\n    /**\r\n     * Specifies if this audio output format has a header\r\n     * @boolean AudioOutputFormatImpl.prototype.hasHeader\r\n     * @function\r\n     * @public\r\n     */\r\n    public get hasHeader(): boolean {\r\n        return this.priHasHeader;\r\n    }\r\n\r\n    /**\r\n     * Specifies the header of this format\r\n     * @ArrayBuffer AudioOutputFormatImpl.prototype.header\r\n     * @function\r\n     * @public\r\n     */\r\n    public get header(): ArrayBuffer {\r\n        if (this.hasHeader) {\r\n            return this.privHeader;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Updates the header based on the audio length\r\n     * @member AudioOutputFormatImpl.updateHeader\r\n     * @function\r\n     * @public\r\n     * @param {number} audioLength - the audio length\r\n     */\r\n    public updateHeader(audioLength: number): void {\r\n        if (this.priHasHeader) {\r\n            const view = new DataView(this.privHeader);\r\n            view.setUint32(4, audioLength + this.privHeader.byteLength - 8, true);\r\n            view.setUint32(40, audioLength, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio format string to be sent to the service\r\n     * @string AudioOutputFormatImpl.prototype.requestAudioFormatString\r\n     * @function\r\n     * @public\r\n     */\r\n    public get requestAudioFormatString(): string {\r\n        return this.priRequestAudioFormatString;\r\n    }\r\n\r\n    /**\r\n     * Adds audio header\r\n     * @param audio the raw audio without header\r\n     * @returns the audio with header if applicable\r\n     */\r\n\r\n    public addHeader(audio: ArrayBuffer): ArrayBuffer {\r\n        if (!this.hasHeader) {\r\n            return audio;\r\n        }\r\n        this.updateHeader(audio.byteLength);\r\n        const tmp = new Uint8Array(audio.byteLength + this.header.byteLength);\r\n        tmp.set(new Uint8Array(this.header), 0);\r\n        tmp.set(new Uint8Array(audio), this.header.byteLength);\r\n        return tmp.buffer;\r\n    }\r\n\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    IAudioDestination,\r\n    IStreamChunk,\r\n    Stream,\r\n} from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    AudioStreamFormat,\r\n    PushAudioOutputStreamCallback\r\n} from \"../Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat.js\";\r\n\r\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class AudioOutputStream\r\n */\r\nexport abstract class AudioOutputStream {\r\n\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Sets the format of the AudioOutputStream\r\n     * Note: the format is set by the synthesizer before writing. Do not set it before passing it to AudioConfig\r\n     * @member AudioOutputStream.prototype.format\r\n     */\r\n    public abstract set format(format: AudioStreamFormat);\r\n\r\n    /**\r\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n     * @member AudioOutputStream.createPullStream\r\n     * @function\r\n     * @public\r\n     * @returns {PullAudioOutputStream} The audio output stream being created.\r\n     */\r\n    public static createPullStream(): PullAudioOutputStream {\r\n        return PullAudioOutputStream.create();\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @class PullAudioOutputStream\r\n */\r\nexport abstract class PullAudioOutputStream extends AudioOutputStream {\r\n\r\n    /**\r\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n     * @member PullAudioOutputStream.create\r\n     * @function\r\n     * @public\r\n     * @returns {PullAudioOutputStream} The push audio output stream being created.\r\n     */\r\n    public static create(): PullAudioOutputStream {\r\n        return new PullAudioOutputStreamImpl();\r\n    }\r\n\r\n    /**\r\n     * Reads audio data from the internal buffer.\r\n     * @member PullAudioOutputStream.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\r\n     * @returns {Promise<number>} Audio buffer length has been read.\r\n     */\r\n    public abstract read(dataBuffer: ArrayBuffer): Promise<number>;\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PullAudioOutputStreamImpl\r\n */\r\nexport class PullAudioOutputStreamImpl extends PullAudioOutputStream implements IAudioDestination {\r\n    private privFormat: AudioOutputFormatImpl;\r\n    private privId: string;\r\n    private privStream: Stream<ArrayBuffer>;\r\n    private privLastChunkView: Int8Array;\r\n\r\n    /**\r\n     * Creates and initializes an instance with the given values.\r\n     * @constructor\r\n     */\r\n    public constructor() {\r\n        super();\r\n        this.privId = createNoDashGuid();\r\n        this.privStream = new Stream<ArrayBuffer>();\r\n    }\r\n\r\n    /**\r\n     * Sets the format information to the stream. For internal use only.\r\n     * @param {AudioStreamFormat} format - the format to be set.\r\n     */\r\n    public set format(format: AudioStreamFormat) {\r\n        if (format === undefined || format === null) {\r\n            this.privFormat = AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        this.privFormat = format as AudioOutputFormatImpl;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): AudioStreamFormat {\r\n        return this.privFormat;\r\n    }\r\n\r\n    /**\r\n     * Checks if the stream is closed\r\n     * @member PullAudioOutputStreamImpl.prototype.isClosed\r\n     * @property\r\n     * @public\r\n     */\r\n    public get isClosed(): boolean {\r\n        return this.privStream.isClosed;\r\n    }\r\n\r\n    /**\r\n     * Gets the id of the stream\r\n     * @member PullAudioOutputStreamImpl.prototype.id\r\n     * @property\r\n     * @public\r\n     */\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    /**\r\n     * Reads audio data from the internal buffer.\r\n     * @member PullAudioOutputStreamImpl.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\r\n     * @returns {Promise<number>} - Audio buffer length has been read.\r\n     */\r\n    public async read(dataBuffer: ArrayBuffer): Promise<number> {\r\n        const intView: Int8Array = new Int8Array(dataBuffer);\r\n        let totalBytes: number = 0;\r\n\r\n        if (this.privLastChunkView !== undefined) {\r\n            if (this.privLastChunkView.length > dataBuffer.byteLength) {\r\n                intView.set(this.privLastChunkView.slice(0, dataBuffer.byteLength));\r\n                this.privLastChunkView = this.privLastChunkView.slice(dataBuffer.byteLength);\r\n                return Promise.resolve(dataBuffer.byteLength);\r\n            }\r\n            intView.set(this.privLastChunkView);\r\n            totalBytes = this.privLastChunkView.length;\r\n            this.privLastChunkView = undefined;\r\n        }\r\n\r\n        // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\r\n        while (totalBytes < dataBuffer.byteLength && !this.privStream.isReadEnded) {\r\n            const chunk: IStreamChunk<ArrayBuffer> = await this.privStream.read();\r\n            if (chunk !== undefined && !chunk.isEnd) {\r\n                let tmpBuffer: ArrayBuffer;\r\n                if (chunk.buffer.byteLength > dataBuffer.byteLength - totalBytes) {\r\n                    tmpBuffer = chunk.buffer.slice(0, dataBuffer.byteLength - totalBytes);\r\n                    this.privLastChunkView = new Int8Array(chunk.buffer.slice(dataBuffer.byteLength - totalBytes));\r\n                } else {\r\n                    tmpBuffer = chunk.buffer;\r\n                }\r\n                intView.set(new Int8Array(tmpBuffer), totalBytes);\r\n                totalBytes += tmpBuffer.byteLength;\r\n            } else {\r\n                this.privStream.readEnded();\r\n            }\r\n        }\r\n        return totalBytes;\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PullAudioOutputStreamImpl.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public write(dataBuffer: ArrayBuffer): void {\r\n        Contracts.throwIfNullOrUndefined(this.privStream, \"must set format before writing\");\r\n        this.privStream.writeStreamChunk({\r\n            buffer: dataBuffer,\r\n            isEnd: false,\r\n            timeReceived: Date.now()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioOutputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privStream.close();\r\n    }\r\n}\r\n\r\n/*\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class PushAudioOutputStream\r\n */\r\nexport abstract class PushAudioOutputStream extends AudioOutputStream {\r\n    /**\r\n     * Creates and initializes and instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n     * write() and close() methods.\r\n     * @member PushAudioOutputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n     * derived from PushAudioOutputStreamCallback\r\n     * @returns {PushAudioOutputStream} The push audio output stream being created.\r\n     */\r\n    public static create(callback: PushAudioOutputStreamCallback): PushAudioOutputStream {\r\n        return new PushAudioOutputStreamImpl(callback);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member PushAudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PushAudioOutputStreamImpl\r\n */\r\nexport class PushAudioOutputStreamImpl extends PushAudioOutputStream implements IAudioDestination {\r\n    private readonly privId: string;\r\n    private privCallback: PushAudioOutputStreamCallback;\r\n\r\n    /**\r\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n     * read() and close() methods.\r\n     * @constructor\r\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n     * derived from PushAudioOutputStreamCallback\r\n     */\r\n    public constructor(callback: PushAudioOutputStreamCallback) {\r\n        super();\r\n        this.privId = createNoDashGuid();\r\n        this.privCallback = callback;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public set format(format: AudioStreamFormat) { }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        if (!!this.privCallback.write) {\r\n            this.privCallback.write(buffer);\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        if (!!this.privCallback.close) {\r\n            this.privCallback.close();\r\n        }\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { PathLike } from \"fs\";\r\nimport {\r\n    FileAudioSource,\r\n    MicAudioSource,\r\n    PcmRecorder,\r\n} from \"../../common.browser/Exports.js\";\r\nimport { ISpeechConfigAudioDevice } from \"../../common.speech/Exports.js\";\r\nimport {\r\n    AudioSourceEvent,\r\n    EventSource,\r\n    IAudioDestination,\r\n    IAudioSource,\r\n    IAudioStreamNode\r\n} from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    AudioInputStream,\r\n    AudioOutputStream,\r\n    AudioStreamFormat,\r\n    IPlayer,\r\n    PullAudioInputStreamCallback,\r\n    PullAudioOutputStream,\r\n    PushAudioOutputStream,\r\n    PushAudioOutputStreamCallback,\r\n    SpeakerAudioDestination\r\n} from \"../Exports.js\";\r\nimport { AudioFileWriter } from \"./AudioFileWriter.js\";\r\nimport { PullAudioInputStreamImpl, PushAudioInputStreamImpl } from \"./AudioInputStream.js\";\r\nimport { PullAudioOutputStreamImpl, PushAudioOutputStreamImpl } from \"./AudioOutputStream.js\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat.js\";\r\n\r\n/**\r\n * Represents audio input configuration used for specifying what type of input to use (microphone, file, stream).\r\n * @class AudioConfig\r\n * Updated in version 1.11.0\r\n */\r\nexport abstract class AudioConfig {\r\n    /**\r\n     * Creates an AudioConfig object representing the default microphone on the system.\r\n     * @member AudioConfig.fromDefaultMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromDefaultMicrophoneInput(): AudioConfig {\r\n        const pcmRecorder = new PcmRecorder(true);\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a microphone with the specified device ID.\r\n     * @member AudioConfig.fromMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @param {string | undefined} deviceId - Specifies the device ID of the microphone to be used.\r\n     * Default microphone is used the value is omitted.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromMicrophoneInput(deviceId?: string): AudioConfig {\r\n        const pcmRecorder = new PcmRecorder(true);\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder, deviceId));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified file.\r\n     * @member AudioConfig.fromWavFileInput\r\n     * @function\r\n     * @public\r\n     * @param {File} fileName - Specifies the audio input file. Currently, only WAV / PCM is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromWavFileInput(file: File | Buffer, name: string = \"unnamedBuffer.wav\"): AudioConfig {\r\n        return new AudioConfigImpl(new FileAudioSource(file, name));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified stream.\r\n     * @member AudioConfig.fromStreamInput\r\n     * @function\r\n     * @public\r\n     * @param {AudioInputStream | PullAudioInputStreamCallback | MediaStream} audioStream - Specifies the custom audio input\r\n     * stream. Currently, only WAV / PCM is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromStreamInput(audioStream: AudioInputStream | PullAudioInputStreamCallback\r\n        | MediaStream): AudioConfig {\r\n        if (audioStream instanceof PullAudioInputStreamCallback) {\r\n            return new AudioConfigImpl(new PullAudioInputStreamImpl(audioStream));\r\n        }\r\n\r\n        if (audioStream instanceof AudioInputStream) {\r\n            return new AudioConfigImpl(audioStream as PushAudioInputStreamImpl);\r\n        }\r\n        if (typeof MediaStream !== \"undefined\" && audioStream instanceof MediaStream) {\r\n            const pcmRecorder = new PcmRecorder(false);\r\n            return new AudioConfigImpl(new MicAudioSource(pcmRecorder, null, null, audioStream));\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the default speaker.\r\n     * @member AudioConfig.fromDefaultSpeakerOutput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromDefaultSpeakerOutput(): AudioConfig {\r\n        return new AudioOutputConfigImpl(new SpeakerAudioDestination());\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the custom IPlayer object.\r\n     * You can use the IPlayer object to control pause, resume, etc.\r\n     * @member AudioConfig.fromSpeakerOutput\r\n     * @function\r\n     * @public\r\n     * @param {IPlayer} player - the IPlayer object for playback.\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.12.0\r\n     */\r\n    public static fromSpeakerOutput(player?: IPlayer): AudioConfig {\r\n        if (player === undefined) {\r\n            return AudioConfig.fromDefaultSpeakerOutput();\r\n        }\r\n        if (player instanceof SpeakerAudioDestination) {\r\n            return new AudioOutputConfigImpl(player);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a specified output audio file\r\n     * @member AudioConfig.fromAudioFileOutput\r\n     * @function\r\n     * @public\r\n     * @param {PathLike} filename - the filename of the output audio file\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromAudioFileOutput(filename: PathLike): AudioConfig {\r\n        return new AudioOutputConfigImpl(new AudioFileWriter(filename));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a specified audio output stream\r\n     * @member AudioConfig.fromStreamOutput\r\n     * @function\r\n     * @public\r\n     * @param {AudioOutputStream | PushAudioOutputStreamCallback} audioStream - Specifies the custom audio output\r\n     * stream.\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromStreamOutput(audioStream: AudioOutputStream | PushAudioOutputStreamCallback): AudioConfig {\r\n        if (audioStream instanceof PushAudioOutputStreamCallback) {\r\n            return new AudioOutputConfigImpl(new PushAudioOutputStreamImpl(audioStream));\r\n        }\r\n\r\n        if (audioStream instanceof PushAudioOutputStream) {\r\n            return new AudioOutputConfigImpl(audioStream as PushAudioOutputStreamImpl);\r\n        }\r\n\r\n        if (audioStream instanceof PullAudioOutputStream) {\r\n            return new AudioOutputConfigImpl(audioStream as PullAudioOutputStreamImpl);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member SpeechConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member SpeechConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string, def?: string): string;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class AudioConfigImpl\r\n */\r\nexport class AudioConfigImpl extends AudioConfig implements IAudioSource {\r\n    private privSource: IAudioSource;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioSource} source - An audio source.\r\n     */\r\n    public constructor(source: IAudioSource) {\r\n        super();\r\n        this.privSource = source;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return this.privSource.format;\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        this.privSource.turnOff().then((): void => {\r\n            if (!!cb) {\r\n                cb();\r\n            }\r\n        }, (error: string): void => {\r\n            if (!!err) {\r\n                err(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.id\r\n     * @function\r\n     * @public\r\n     */\r\n    public id(): string {\r\n        return this.privSource.id();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.turnOn\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} A promise.\r\n     */\r\n    public turnOn(): Promise<void> {\r\n        return this.privSource.turnOn();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.attach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     * @returns {Promise<IAudioStreamNode>} A promise.\r\n     */\r\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        return this.privSource.attach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.detach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     */\r\n    public detach(audioNodeId: string): void {\r\n        return this.privSource.detach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.turnOff\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} A promise.\r\n     */\r\n    public turnOff(): Promise<void> {\r\n        return this.privSource.turnOff();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.events\r\n     * @function\r\n     * @public\r\n     * @returns {EventSource<AudioSourceEvent>} An event source for audio events.\r\n     */\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privSource.events;\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        Contracts.throwIfNull(value, \"value\");\r\n\r\n        if (undefined !== this.privSource.setProperty) {\r\n            this.privSource.setProperty(name, value);\r\n        } else {\r\n            throw new Error(\"This AudioConfig instance does not support setting properties.\");\r\n        }\r\n\r\n    }\r\n\r\n    public getProperty(name: string, def?: string): string {\r\n        if (undefined !== this.privSource.getProperty) {\r\n            return this.privSource.getProperty(name, def);\r\n        } else {\r\n            throw new Error(\"This AudioConfig instance does not support getting properties.\");\r\n        }\r\n\r\n        return def;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.privSource.deviceInfo;\r\n    }\r\n}\r\n\r\nexport class AudioOutputConfigImpl extends AudioConfig implements IAudioDestination {\r\n    private privDestination: IAudioDestination;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioDestination} destination - An audio destination.\r\n     */\r\n    public constructor(destination: IAudioDestination) {\r\n        super();\r\n        this.privDestination = destination;\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        this.privDestination.format = format;\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        this.privDestination.write(buffer);\r\n    }\r\n\r\n    public close(): void {\r\n        this.privDestination.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privDestination.id();\r\n    }\r\n\r\n    public setProperty(): void {\r\n        throw new Error(\"This AudioConfig instance does not support setting properties.\");\r\n    }\r\n\r\n    public getProperty(): string {\r\n        throw new Error(\"This AudioConfig instance does not support getting properties.\");\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the possible reasons a recognition result might be canceled.\r\n * @class CancellationReason\r\n */\r\nexport enum CancellationReason {\r\n    /**\r\n     * Indicates that an error occurred during speech recognition.\r\n     * @member CancellationReason.Error\r\n     */\r\n    Error,\r\n\r\n    /**\r\n     * Indicates that the end of the audio stream was reached.\r\n     * @member CancellationReason.EndOfStream\r\n     */\r\n    EndOfStream,\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n /**\r\n  * An abstract base class that defines callback methods (read() and close()) for\r\n  * custom audio input streams).\r\n  * @class PullAudioInputStreamCallback\r\n  */\r\nexport abstract class PullAudioInputStreamCallback {\r\n\r\n    /**\r\n     * Reads data from audio input stream into the data buffer. The maximal number of bytes\r\n     * to be read is determined by the size of dataBuffer.\r\n     * @member PullAudioInputStreamCallback.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The byte array to store the read data.\r\n     * @returns {number} the number of bytes have been read.\r\n     */\r\n    public abstract read(dataBuffer: ArrayBuffer): number;\r\n\r\n    /**\r\n     * Closes the audio input stream.\r\n     * @member PullAudioInputStreamCallback.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/**\r\n * An abstract base class that defines callback methods (write() and close()) for\r\n * custom audio output streams).\r\n * @class PushAudioOutputStreamCallback\r\n */\r\nexport abstract class PushAudioOutputStreamCallback {\r\n\r\n    /**\r\n     * Writes audio data into the data buffer.\r\n     * @member PushAudioOutputStreamCallback.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The byte array that stores the audio data to write.\r\n     */\r\n    public abstract write(dataBuffer: ArrayBuffer): void;\r\n\r\n    /**\r\n     * Closes the audio output stream.\r\n     * @member PushAudioOutputStreamCallback.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\n\r\n/**\r\n * Represents a keyword recognition model for recognizing when\r\n * the user says a keyword to initiate further speech recognition.\r\n * @class KeywordRecognitionModel\r\n */\r\nexport class KeywordRecognitionModel {\r\n    private privDisposed: boolean = false;\r\n\r\n    /**\r\n     * Create and initializes a new instance.\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Creates a keyword recognition model using the specified filename.\r\n     * @member KeywordRecognitionModel.fromFile\r\n     * @function\r\n     * @public\r\n     * @param {string} fileName - A string that represents file name for the keyword recognition model.\r\n     * Note, the file can point to a zip file in which case the model\r\n     * will be extracted from the zip.\r\n     * @returns {KeywordRecognitionModel} The keyword recognition model being created.\r\n     */\r\n    public static fromFile(fileName: string): KeywordRecognitionModel {\r\n        Contracts.throwIfFileDoesNotExist(fileName, \"fileName\");\r\n\r\n        throw new Error(\"Not yet implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Creates a keyword recognition model using the specified filename.\r\n     * @member KeywordRecognitionModel.fromStream\r\n     * @function\r\n     * @public\r\n     * @param {string} file - A File that represents file for the keyword recognition model.\r\n     * Note, the file can point to a zip file in which case the model will be extracted from the zip.\r\n     * @returns {KeywordRecognitionModel} The keyword recognition model being created.\r\n     */\r\n    public static fromStream(file: File): KeywordRecognitionModel {\r\n        Contracts.throwIfNull(file, \"file\");\r\n\r\n        throw new Error(\"Not yet implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member KeywordRecognitionModel.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposed = true;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines content for session events like SessionStarted/Stopped, SoundStarted/Stopped.\r\n * @class SessionEventArgs\r\n */\r\nexport class SessionEventArgs {\r\n    private privSessionId: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(sessionId: string) {\r\n        this.privSessionId = sessionId;\r\n    }\r\n\r\n    /**\r\n     * Represents the session identifier.\r\n     * @member SessionEventArgs.prototype.sessionId\r\n     * @function\r\n     * @public\r\n     * @returns {string} Represents the session identifier.\r\n     */\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SessionEventArgs } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines payload for session events like Speech Start/End Detected\r\n * @class\r\n */\r\nexport class RecognitionEventArgs extends SessionEventArgs {\r\n    private privOffset: number;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(offset: number, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privOffset = offset;\r\n    }\r\n\r\n    /**\r\n     * Represents the message offset\r\n     * @member RecognitionEventArgs.prototype.offset\r\n     * @function\r\n     * @public\r\n     */\r\n    public get offset(): number {\r\n        return this.privOffset;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Define Speech Recognizer output formats.\r\n * @class OutputFormat\r\n */\r\nexport enum OutputFormat {\r\n    /**\r\n     * @member OutputFormat.Simple\r\n     */\r\n    Simple = 0,\r\n\r\n    /**\r\n     * @member OutputFormat.Detailed\r\n     */\r\n    Detailed,\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IntentRecognitionResult, RecognitionEventArgs } from \"./Exports.js\";\r\n\r\n/**\r\n * Intent recognition result event arguments.\r\n * @class\r\n */\r\nexport class IntentRecognitionEventArgs extends RecognitionEventArgs {\r\n    private privResult: IntentRecognitionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param result - The result of the intent recognition.\r\n     * @param offset - The offset.\r\n     * @param sessionId - The session id.\r\n     */\r\n    public constructor(result: IntentRecognitionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Represents the intent recognition result.\r\n     * @member IntentRecognitionEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {IntentRecognitionResult} Represents the intent recognition result.\r\n     */\r\n    public get result(): IntentRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines result of speech recognition.\r\n * @class RecognitionResult\r\n */\r\nexport class RecognitionResult {\r\n    private privResultId: string;\r\n    private privReason: ResultReason;\r\n    private privText: string;\r\n    private privDuration: number;\r\n    private privOffset: number;\r\n    private privLanguage: string;\r\n    private privLanguageDetectionConfidence: string;\r\n    private privErrorDetails: string;\r\n    private privJson: string;\r\n    private privProperties: PropertyCollection;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, text?: string, duration?: number,\r\n                offset?: number, language?: string, languageDetectionConfidence?: string, errorDetails?: string, json?: string, properties?: PropertyCollection) {\r\n        this.privResultId = resultId;\r\n        this.privReason = reason;\r\n        this.privText = text;\r\n        this.privDuration = duration;\r\n        this.privOffset = offset;\r\n        this.privLanguage = language;\r\n        this.privLanguageDetectionConfidence = languageDetectionConfidence;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privJson = json;\r\n        this.privProperties = properties;\r\n    }\r\n\r\n    /**\r\n     * Specifies the result identifier.\r\n     * @member RecognitionResult.prototype.resultId\r\n     * @function\r\n     * @public\r\n     * @returns {string} Specifies the result identifier.\r\n     */\r\n    public get resultId(): string {\r\n        return this.privResultId;\r\n    }\r\n\r\n    /**\r\n     * Specifies status of the result.\r\n     * @member RecognitionResult.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {ResultReason} Specifies status of the result.\r\n     */\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * Presents the recognized text in the result.\r\n     * @member RecognitionResult.prototype.text\r\n     * @function\r\n     * @public\r\n     * @returns {string} Presents the recognized text in the result.\r\n     */\r\n    public get text(): string {\r\n        return this.privText;\r\n    }\r\n\r\n    /**\r\n     * Duration of recognized speech in 100 nano second increments.\r\n     * @member RecognitionResult.prototype.duration\r\n     * @function\r\n     * @public\r\n     * @returns {number} Duration of recognized speech in 100 nano second increments.\r\n     */\r\n    public get duration(): number {\r\n        return this.privDuration;\r\n    }\r\n\r\n    /**\r\n     * Offset of recognized speech in 100 nano second increments.\r\n     * @member RecognitionResult.prototype.offset\r\n     * @function\r\n     * @public\r\n     * @returns {number} Offset of recognized speech in 100 nano second increments.\r\n     */\r\n    public get offset(): number {\r\n        return this.privOffset;\r\n    }\r\n\r\n    /**\r\n     * Primary Language detected.\r\n     * @member RecognitionResult.prototype.language\r\n     * @function\r\n     * @public\r\n     * @returns {string} language detected.\r\n     */\r\n    public get language(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    /**\r\n     * Primary Language detection confidence (Unknown, Low, Medium, High).\r\n     * @member RecognitionResult.prototype.languageDetectionConfidence\r\n     * @function\r\n     * @public\r\n     * @returns {string} detection confidence strength.\r\n     */\r\n    public get languageDetectionConfidence(): string {\r\n        return this.privLanguageDetectionConfidence;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member RecognitionResult.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} a brief description of an error.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    /**\r\n     * A string containing Json serialized recognition result as it was received from the service.\r\n     * @member RecognitionResult.prototype.json\r\n     * @function\r\n     * @private\r\n     * @returns {string} Json serialized representation of the result.\r\n     */\r\n    public get json(): string {\r\n        return this.privJson;\r\n    }\r\n\r\n    /**\r\n     * The set of properties exposed in the result.\r\n     * @member RecognitionResult.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The set of properties exposed in the result.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, RecognitionResult, ResultReason } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines result of speech recognition.\r\n * @class SpeechRecognitionResult\r\n */\r\nexport class SpeechRecognitionResult extends RecognitionResult {\r\n    private readonly privSpeakerId: string;\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @public\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} speakerId - speaker id for conversation transcription, if provided.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, text?: string,\r\n                       duration?: number, offset?: number, language?: string,\r\n                       languageDetectionConfidence?: string, speakerId?: string, errorDetails?: string,\r\n                       json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, errorDetails, json, properties);\r\n        this.privSpeakerId = speakerId;\r\n    }\r\n\r\n    /**\r\n     * speaker id from conversation transcription/id scenarios\r\n     * @member SpeechRecognitionResult.prototype.speakerId\r\n     * @function\r\n     * @public\r\n     * @returns {string} id of speaker in given result\r\n     */\r\n    public get speakerId(): string {\r\n        return this.privSpeakerId;\r\n    }\r\n\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason, SpeechRecognitionResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Intent recognition result.\r\n * @class\r\n */\r\nexport class IntentRecognitionResult extends SpeechRecognitionResult {\r\n    private privIntentId: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param intentId - The intent id.\r\n     * @param resultId - The result id.\r\n     * @param reason - The reason.\r\n     * @param text - The recognized text.\r\n     * @param duration - The duration.\r\n     * @param offset - The offset into the stream.\r\n     * @param language - Primary Language detected, if provided.\r\n     * @param languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param errorDetails - Error details, if provided.\r\n     * @param json - Additional Json, if provided.\r\n     * @param properties - Additional properties, if provided.\r\n     */\r\n    public constructor(intentId?: string, resultId?: string, reason?: ResultReason, text?: string,\r\n                duration?: number, offset?: number, language?: string, languageDetectionConfidence?: string,\r\n                errorDetails?: string, json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, undefined, errorDetails, json, properties);\r\n\r\n        this.privIntentId = intentId;\r\n    }\r\n\r\n    /**\r\n     * A String that represents the intent identifier being recognized.\r\n     * @member IntentRecognitionResult.prototype.intentId\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the intent identifier being recognized.\r\n     */\r\n    public get intentId(): string {\r\n        return this.privIntentId;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nimport { Contracts } from \"./Contracts.js\";\r\n\r\n/**\r\n * Language understanding model\r\n * @class LanguageUnderstandingModel\r\n */\r\nexport class LanguageUnderstandingModel {\r\n    /**\r\n     * Creates and initializes a new instance\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Creates an language understanding model using the specified endpoint.\r\n     * @member LanguageUnderstandingModel.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} uri - A String that represents the endpoint of the language understanding model.\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromEndpoint(uri: URL): LanguageUnderstandingModel {\r\n        Contracts.throwIfNull(uri, \"uri\");\r\n        Contracts.throwIfNullOrWhitespace(uri.hostname, \"uri\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        // Need to extract the app ID from the URL.\r\n        // URL is in the format: https://<region>.api.cognitive.microsoft.com/luis/v2.0/apps/<Guid>?subscription-key=<key>&timezoneOffset=-360\r\n\r\n        // Start tearing the string apart.\r\n\r\n        // region can be extracted from the host name.\r\n        const firstDot: number = uri.host.indexOf(\".\");\r\n        if (-1 === firstDot) {\r\n            throw new Error(\"Could not determine region from endpoint\");\r\n        }\r\n        langModelImp.region = uri.host.substr(0, firstDot);\r\n\r\n        // Now the app ID.\r\n\r\n        const lastSegment: number = uri.pathname.lastIndexOf(\"/\") + 1;\r\n        if (-1 === lastSegment) {\r\n            throw new Error(\"Could not determine appId from endpoint\");\r\n        }\r\n\r\n        langModelImp.appId = uri.pathname.substr(lastSegment);\r\n\r\n        // And finally the key.\r\n        langModelImp.subscriptionKey = uri.searchParams.get(\"subscription-key\");\r\n        if (undefined === langModelImp.subscriptionKey) {\r\n            throw new Error(\"Could not determine subscription key from endpoint\");\r\n        }\r\n\r\n        return langModelImp;\r\n    }\r\n\r\n    /**\r\n     * Creates an language understanding model using the application id of Language Understanding service.\r\n     * @member LanguageUnderstandingModel.fromAppId\r\n     * @function\r\n     * @public\r\n     * @param {string} appId - A String that represents the application id of Language Understanding service.\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromAppId(appId: string): LanguageUnderstandingModel {\r\n        Contracts.throwIfNullOrWhitespace(appId, \"appId\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        langModelImp.appId = appId;\r\n        return langModelImp;\r\n    }\r\n\r\n    /**\r\n     * Creates a language understanding model using hostname, subscription key and application\r\n     * id of Language Understanding service.\r\n     * @member LanguageUnderstandingModel.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - A String that represents the subscription key of\r\n     * Language Understanding service.\r\n     * @param {string} appId - A String that represents the application id of Language\r\n     * Understanding service.\r\n     * @param {LanguageUnderstandingModel} region - A String that represents the region\r\n     * of the Language Understanding service (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, appId: string, region: string): LanguageUnderstandingModel {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(appId, \"appId\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        langModelImp.appId = appId;\r\n        langModelImp.region = region;\r\n        langModelImp.subscriptionKey = subscriptionKey;\r\n        return langModelImp;\r\n    }\r\n}\r\n\r\n/**\r\n * @private\r\n * @class LanguageUnderstandingModelImpl\r\n */\r\nexport class LanguageUnderstandingModelImpl extends LanguageUnderstandingModel {\r\n    public appId: string;\r\n    public region: string;\r\n    public subscriptionKey: string;\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { RecognitionEventArgs, SpeechRecognitionResult, ConversationTranscriptionResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines contents of speech recognizing/recognized event.\r\n * @class SpeechRecognitionEventArgs\r\n */\r\nexport class SpeechRecognitionEventArgs extends RecognitionEventArgs {\r\n    private privResult: SpeechRecognitionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {SpeechRecognitionResult} result - The speech recognition result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: SpeechRecognitionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @member SpeechRecognitionEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechRecognitionResult} the recognition result.\r\n     */\r\n    public get result(): SpeechRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n\r\n/**\r\n * Defines contents of conversation transcribed/transcribing event.\r\n * @class ConversationTranscriptionEventArgs\r\n */\r\nexport class ConversationTranscriptionEventArgs extends RecognitionEventArgs {\r\n    private privResult: ConversationTranscriptionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {ConversationTranscriptionResult} result - The conversation transcription result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: ConversationTranscriptionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the transcription result.\r\n     * @member ConversationTranscription1EventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {ConversationTranscriptionResult} the recognition result.\r\n     */\r\n        public get result(): ConversationTranscriptionResult {\r\n            return this.privResult;\r\n        }\r\n}\r\n\r\n/**\r\n * Defines contents of meeting transcribed/transcribing event.\r\n * @class MeetingTranscriptionEventArgs\r\n */\r\nexport class MeetingTranscriptionEventArgs extends SpeechRecognitionEventArgs {\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationEventArgs,\r\n    CancellationReason,\r\n    RecognitionEventArgs\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines content of a CancellationEvent.\r\n * @class CancellationEventArgsBase\r\n */\r\nexport class CancellationEventArgsBase extends RecognitionEventArgs implements CancellationEventArgs {\r\n    private privReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {CancellationReason} reason - The cancellation reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(reason: CancellationReason, errorDetails: string,\r\n                       errorCode: CancellationErrorCode, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member CancellationEventArgsBase.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * The error code in case of an unsuccessful operation.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    public get errorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful operation, provides details of the occurred error.\r\n     * @member CancellationEventArgsBase.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationEventArgsBase,\r\n} from \"./CancellationEventArgsBase.js\";\r\n\r\nexport class SpeechRecognitionCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognitionEventArgs, TranslationRecognitionResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Translation text result event arguments.\r\n * @class TranslationRecognitionEventArgs\r\n */\r\nexport class TranslationRecognitionEventArgs extends RecognitionEventArgs {\r\n    private privResult: TranslationRecognitionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {TranslationRecognitionResult} result - The translation recognition result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: TranslationRecognitionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @member TranslationRecognitionEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {TranslationRecognitionResult} the recognition result.\r\n     */\r\n    public get result(): TranslationRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SessionEventArgs, TranslationSynthesisResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Translation Synthesis event arguments\r\n * @class TranslationSynthesisEventArgs\r\n */\r\nexport class TranslationSynthesisEventArgs extends SessionEventArgs {\r\n    private privResult: TranslationSynthesisResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {TranslationSynthesisResult} result - The translation synthesis result.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: TranslationSynthesisResult, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the translation synthesis result.\r\n     * @member TranslationSynthesisEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {TranslationSynthesisResult} Specifies the translation synthesis result.\r\n     */\r\n    public get result(): TranslationSynthesisResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason, SpeechRecognitionResult, Translations } from \"./Exports.js\";\r\n\r\n/**\r\n * Translation text result.\r\n * @class TranslationRecognitionResult\r\n */\r\nexport class TranslationRecognitionResult extends SpeechRecognitionResult {\r\n    private privTranslations: Translations;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {Translations} translations - The translations.\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(translations: Translations, resultId?: string, reason?: ResultReason,\r\n                       text?: string, duration?: number, offset?: number, language?: string,\r\n                       languageDetectionConfidence?: string, errorDetails?: string,\r\n                       json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, undefined, errorDetails, json, properties);\r\n\r\n        this.privTranslations = translations;\r\n    }\r\n\r\n    public static fromSpeechRecognitionResult(result: SpeechRecognitionResult): TranslationRecognitionResult {\r\n        return new TranslationRecognitionResult(undefined, result.resultId, result.reason, result.text, result.duration, result.offset, result.language, result.languageDetectionConfidence, result.errorDetails, result.json, result.properties);\r\n    }\r\n\r\n    /**\r\n     * Presents the translation results. Each item in the dictionary represents\r\n     * a translation result in one of target languages, where the key is the name\r\n     * of the target language, in BCP-47 format, and the value is the translation\r\n     * text in the specified language.\r\n     * @member TranslationRecognitionResult.prototype.translations\r\n     * @function\r\n     * @public\r\n     * @returns {Translations} the current translation map that holds all translations requested.\r\n     */\r\n    public get translations(): Translations {\r\n        return this.privTranslations;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ResultReason } from \"./ResultReason.js\";\r\n\r\n/**\r\n * Defines translation synthesis result, i.e. the voice output of the translated\r\n * text in the target language.\r\n * @class TranslationSynthesisResult\r\n */\r\nexport class TranslationSynthesisResult {\r\n    private privReason: ResultReason;\r\n    private privAudio: ArrayBuffer;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {ResultReason} reason - The synthesis reason.\r\n     * @param {ArrayBuffer} audio - The audio data.\r\n     */\r\n    public constructor(reason: ResultReason, audio: ArrayBuffer) {\r\n        this.privReason = reason;\r\n        this.privAudio = audio;\r\n    }\r\n\r\n    /**\r\n     * Translated text in the target language.\r\n     * @member TranslationSynthesisResult.prototype.audio\r\n     * @function\r\n     * @public\r\n     * @returns {ArrayBuffer} Translated audio in the target language.\r\n     */\r\n    public get audio(): ArrayBuffer {\r\n        return this.privAudio;\r\n    }\r\n\r\n    /**\r\n     * The synthesis status.\r\n     * @member TranslationSynthesisResult.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {ResultReason} The synthesis status.\r\n     */\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the possible reasons a recognition result might be generated.\r\n * @class ResultReason\r\n */\r\nexport enum ResultReason {\r\n    /**\r\n     * Indicates speech could not be recognized. More details\r\n     * can be found in the NoMatchDetails object.\r\n     * @member ResultReason.NoMatch\r\n     */\r\n    NoMatch,\r\n\r\n    /**\r\n     * Indicates that the recognition was canceled. More details\r\n     * can be found using the CancellationDetails object.\r\n     * @member ResultReason.Canceled\r\n     */\r\n    Canceled,\r\n\r\n    /**\r\n     * Indicates the speech result contains hypothesis text.\r\n     * @member ResultReason.RecognizedSpeech\r\n     */\r\n    RecognizingSpeech,\r\n\r\n    /**\r\n     * Indicates the speech result contains final text that has been recognized.\r\n     * Speech Recognition is now complete for this phrase.\r\n     * @member ResultReason.RecognizedSpeech\r\n     */\r\n    RecognizedSpeech,\r\n\r\n    /**\r\n     * Indicates the speech result contains a finalized acceptance of a provided keyword.\r\n     * Speech recognition will continue unless otherwise configured.\r\n     * @member ResultReason.RecognizedKeyword\r\n     */\r\n    RecognizedKeyword,\r\n\r\n    /**\r\n     * Indicates the intent result contains hypothesis text and intent.\r\n     * @member ResultReason.RecognizingIntent\r\n     */\r\n    RecognizingIntent,\r\n\r\n    /**\r\n     * Indicates the intent result contains final text and intent.\r\n     * Speech Recognition and Intent determination are now complete for this phrase.\r\n     * @member ResultReason.RecognizedIntent\r\n     */\r\n    RecognizedIntent,\r\n\r\n    /**\r\n     * Indicates the translation result contains hypothesis text and its translation(s).\r\n     * @member ResultReason.TranslatingSpeech\r\n     */\r\n    TranslatingSpeech,\r\n\r\n    /**\r\n     * Indicates the translation result contains final text and corresponding translation(s).\r\n     * Speech Recognition and Translation are now complete for this phrase.\r\n     * @member ResultReason.TranslatedSpeech\r\n     */\r\n    TranslatedSpeech,\r\n\r\n    /**\r\n     * Indicates the synthesized audio result contains a non-zero amount of audio data\r\n     * @member ResultReason.SynthesizingAudio\r\n     */\r\n    SynthesizingAudio,\r\n\r\n    /**\r\n     * Indicates the synthesized audio is now complete for this phrase.\r\n     * @member ResultReason.SynthesizingAudioCompleted\r\n     */\r\n    SynthesizingAudioCompleted,\r\n\r\n    /**\r\n     * Indicates the speech synthesis is now started\r\n     * @member ResultReason.SynthesizingAudioStarted\r\n     */\r\n    SynthesizingAudioStarted,\r\n\r\n    /**\r\n     * Indicates the voice profile is being enrolled and customers need to send more audio to create a voice profile.\r\n     * @member ResultReason.EnrollingVoiceProfile\r\n     */\r\n    EnrollingVoiceProfile,\r\n\r\n    /**\r\n     * Indicates the voice profile has been enrolled.\r\n     * @member ResultReason.EnrolledVoiceProfile\r\n     */\r\n    EnrolledVoiceProfile,\r\n\r\n    /**\r\n     * Indicates successful identification of some speakers.\r\n     * @member ResultReason.RecognizedSpeakers\r\n     */\r\n    RecognizedSpeakers,\r\n\r\n    /**\r\n     * Indicates successfully verified one speaker.\r\n     * @member ResultReason.RecognizedSpeaker\r\n     */\r\n    RecognizedSpeaker,\r\n\r\n    /**\r\n     * Indicates a voice profile has been reset successfully.\r\n     * @member ResultReason.ResetVoiceProfile\r\n     */\r\n    ResetVoiceProfile,\r\n\r\n    /**\r\n     * Indicates a voice profile has been deleted successfully.\r\n     * @member ResultReason.DeletedVoiceProfile\r\n     */\r\n    DeletedVoiceProfile,\r\n\r\n    /**\r\n     * Indicates synthesis voices list has been successfully retrieved.\r\n     * @member ResultReason.VoicesListRetrieved\r\n     */\r\n    VoicesListRetrieved,\r\n\r\n    /**\r\n     * Indicates the transcription result contains hypothesis text and its translation(s) for\r\n     * other participants in the conversation.\r\n     * @member ResultReason.TranslatingParticipantSpeech\r\n     */\r\n    TranslatingParticipantSpeech,\r\n\r\n    /**\r\n     * Indicates the transcription result contains final text and corresponding translation(s)\r\n     * for other participants in the conversation. Speech Recognition and Translation are now\r\n     * complete for this phrase.\r\n     * @member ResultReason.TranslatedParticipantSpeech\r\n     */\r\n    TranslatedParticipantSpeech,\r\n\r\n    /**\r\n     * <summary>\r\n     * Indicates the transcription result contains the instant message and corresponding\r\n     * translation(s).\r\n     * @member ResultReason.TranslatedInstantMessage\r\n     */\r\n    TranslatedInstantMessage,\r\n\r\n    /**\r\n     * Indicates the transcription result contains the instant message for other participants\r\n     * in the conversation and corresponding translation(s).\r\n     * @member ResultReason.TranslatedParticipantInstantMessage\r\n     */\r\n    TranslatedParticipantInstantMessage,\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n    ServicePropertiesPropertyName\r\n} from \"../common.speech/Exports.js\";\r\nimport {IStringDictionary} from \"../common/Exports.js\";\r\nimport {Contracts} from \"./Contracts.js\";\r\nimport {\r\n    OutputFormat,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ServicePropertyChannel,\r\n    SpeechSynthesisOutputFormat,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Speech configuration.\r\n * @class SpeechConfig\r\n */\r\nexport abstract class SpeechConfig {\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Static instance of SpeechConfig returned by passing subscriptionKey and service region.\r\n     * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.\r\n     * @member SpeechConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechConfig} The speech factory\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, region: string): SpeechConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_IntentRegion, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech config with specified endpoint and subscription key.\r\n     * This method is intended only for users who use a non-standard service endpoint or parameters.\r\n     * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.\r\n     * Note: The query parameters specified in the endpoint URL are not changed, even if they are set by any other APIs.\r\n     * For example, if language is defined in the uri as query parameter \"language=de-DE\", and also set by\r\n     * SpeechConfig.speechRecognitionLanguage = \"en-US\", the language setting in uri takes precedence,\r\n     * and the effective language is \"de-DE\". Only the parameters that are not specified in the\r\n     * endpoint URL can be set by other APIs.\r\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n     * fromEndpoint method, and then set authorizationToken=\"token\" on the created SpeechConfig instance to\r\n     * use the authorization token.\r\n     * @member SpeechConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey?: string): SpeechConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech config with specified host and subscription key.\r\n     * This method is intended only for users who use a non-default service host. Standard resource path will be assumed.\r\n     * For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n     * Note: To use an authorization token with fromHost, use fromHost(URL),\r\n     * and then set the AuthorizationToken property on the created SpeechConfig instance.\r\n     * Note: Added in version 1.9.0.\r\n     * @member SpeechConfig.fromHost\r\n     * @function\r\n     * @public\r\n     * @param {URL} host - The service endpoint to connect to. Format is \"protocol://host:port\" where \":port\" is optional.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromHost(hostName: URL, subscriptionKey?: string): SpeechConfig {\r\n        Contracts.throwIfNull(hostName, \"hostName\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Host, hostName.protocol + \"//\" + hostName.hostname + (hostName.port === \"\" ? \"\" : \":\" + hostName.port));\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech factory with specified initial authorization token and region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * Note: Please use a token derived from your LanguageUnderstanding subscription key in case you want\r\n     * to use the Intent recognizer. As configuration values are copied when creating a new recognizer,\r\n     * the new token value will not apply to recognizers that have already been created. For recognizers\r\n     * that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member SpeechConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} authorizationToken - The initial authorization token.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromAuthorizationToken(authorizationToken: string, region: string): SpeechConfig {\r\n        Contracts.throwIfNull(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_IntentRegion, region);\r\n        speechImpl.authorizationToken = authorizationToken;\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server.\r\n     * @param proxyPort The port number of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param proxyPort The port number of the proxy server.\r\n     * @param proxyUserName The username of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n\r\n    /**\r\n     * Gets the authorization token.\r\n     * @member SpeechConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get authorizationToken(): string;\r\n\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * @member SpeechConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set authorizationToken(value: string);\r\n\r\n    /**\r\n     * Returns the configured language.\r\n     * @member SpeechConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get speechRecognitionLanguage(): string;\r\n\r\n    /**\r\n     * Gets/Sets the input language.\r\n     * @member SpeechConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member SpeechConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string | PropertyId} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string | PropertyId, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member SpeechConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string, def?: string): string;\r\n\r\n    /**\r\n     * Gets speech recognition output format (simple or detailed).\r\n     * Note: This output format is for speech recognition result, use [SpeechConfig.speechSynthesisOutputFormat] to\r\n     * get synthesized audio output format.\r\n     * @member SpeechConfig.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} Returns the output format.\r\n     */\r\n    public abstract get outputFormat(): OutputFormat;\r\n\r\n    /**\r\n     * Gets/Sets speech recognition output format (simple or detailed).\r\n     * Note: This output format is for speech recognition result, use [SpeechConfig.speechSynthesisOutputFormat] to\r\n     * set synthesized audio output format.\r\n     * @member SpeechConfig.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set outputFormat(format: OutputFormat);\r\n\r\n    /**\r\n     * Gets the endpoint ID of a customized speech model that is used for speech recognition.\r\n     * @member SpeechConfig.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @return {string} The endpoint ID\r\n     */\r\n    public abstract get endpointId(): string;\r\n\r\n    /**\r\n     * Gets/Sets the endpoint ID of a customized speech model that is used for speech recognition.\r\n     * @member SpeechConfig.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The endpoint ID\r\n     */\r\n    public abstract set endpointId(value: string);\r\n\r\n    /**\r\n     * Closes the configuration.\r\n     * @member SpeechConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public close(): void { }\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.subscriptionKey\r\n     * @function\r\n     * @public\r\n     * @return {string} The subscription key set on the config.\r\n     */\r\n    public abstract get subscriptionKey(): string;\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.region\r\n     * @function\r\n     * @public\r\n     * @return {region} The region set on the config.\r\n     */\r\n    public abstract get region(): string;\r\n\r\n    /**\r\n     * Sets a property value that will be passed to service using the specified channel.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.setServiceProperty\r\n     * @function\r\n     * @public\r\n     * @param {name} The name of the property.\r\n     * @param {value} Value to set.\r\n     * @param {channel} The channel used to pass the specified property to service.\r\n     */\r\n    public abstract setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void;\r\n\r\n    /**\r\n     * Sets profanity option.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.setProfanity\r\n     * @function\r\n     * @public\r\n     * @param {profanity} Profanity option to set.\r\n     */\r\n    public abstract setProfanity(profanity: ProfanityOption): void;\r\n\r\n    /**\r\n     * Enable audio logging in service.\r\n     * Audio and content logs are stored either in Microsoft-owned storage, or in your own storage account linked\r\n     * to your Cognitive Services subscription (Bring Your Own Storage (BYOS) enabled Speech resource).\r\n     * The logs will be removed after 30 days.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.enableAudioLogging\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract enableAudioLogging(): void;\r\n\r\n    /**\r\n     * Includes word-level timestamps.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.requestWordLevelTimestamps\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract requestWordLevelTimestamps(): void;\r\n\r\n    /**\r\n     * Enable dictation. Only supported in speech continuous recognition.\r\n     * Added in version 1.7.0.\r\n     * @member SpeechConfig.prototype.enableDictation\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract enableDictation(): void;\r\n\r\n    /**\r\n     * Gets the language of the speech synthesizer.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} Returns the speech synthesis language.\r\n     */\r\n    public abstract get speechSynthesisLanguage(): string;\r\n\r\n    /**\r\n     * Sets the language of the speech synthesizer.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set speechSynthesisLanguage(language: string);\r\n\r\n    /**\r\n     * Gets the voice of the speech synthesizer.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisVoiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} Returns the speech synthesis voice.\r\n     */\r\n    public abstract get speechSynthesisVoiceName(): string;\r\n\r\n    /**\r\n     * Sets the voice of the speech synthesizer. (see <a href=\"https://aka.ms/speech/tts-languages\">available voices</a>).\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisVoiceName\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set speechSynthesisVoiceName(voice: string);\r\n\r\n    /**\r\n     * Gets the speech synthesis output format.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisOutputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechSynthesisOutputFormat} Returns the speech synthesis output format\r\n     */\r\n    public abstract get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat;\r\n\r\n    /**\r\n     * Sets the speech synthesis output format (e.g. Riff16Khz16BitMonoPcm).\r\n     * The default format is Audio16Khz64KBitRateMonoMp3 for browser and Riff16Khz16BitMonoPcm for Node.JS.\r\n     * Added in version 1.11.0.\r\n     * @member SpeechConfig.prototype.speechSynthesisOutputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat);\r\n}\r\n\r\n/**\r\n * @public\r\n * @class SpeechConfigImpl\r\n */\r\nexport class SpeechConfigImpl extends SpeechConfig {\r\n\r\n    private privProperties: PropertyCollection;\r\n\r\n    public constructor() {\r\n        super();\r\n        this.privProperties = new PropertyCollection();\r\n        this.speechRecognitionLanguage = \"en-US\"; // Should we have a default?\r\n        this.outputFormat = OutputFormat.Simple;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get endPoint(): URL {\r\n        return new URL(this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Endpoint));\r\n    }\r\n\r\n    public get subscriptionKey(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n    }\r\n\r\n    public get region(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n    }\r\n\r\n    public get authorizationToken(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    public set authorizationToken(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    public set speechRecognitionLanguage(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\r\n    }\r\n\r\n    public get autoDetectSourceLanguages(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages);\r\n    }\r\n\r\n    public set autoDetectSourceLanguages(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, value);\r\n    }\r\n\r\n    public get outputFormat(): OutputFormat {\r\n        return OutputFormat[this.privProperties.getProperty(OutputFormatPropertyName, undefined) as keyof typeof OutputFormat];\r\n    }\r\n\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\r\n    }\r\n\r\n    public get endpointId(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\r\n    }\r\n\r\n    public set endpointId(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_EndpointId, value);\r\n    }\r\n\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        Contracts.throwIfNull(value, \"value\");\r\n\r\n        this.privProperties.setProperty(name, value);\r\n    }\r\n\r\n    public getProperty(name: string | PropertyId, def?: string): string {\r\n\r\n        return this.privProperties.getProperty(name, def);\r\n    }\r\n\r\n    public setProxy(proxyHostName: string, proxyPort: number): void;\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n    public setProxy(proxyHostName: any, proxyPort: any, proxyUserName?: any, proxyPassword?: any): void {\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPort], proxyPort as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword as string);\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string): void {\r\n        const currentProperties: IStringDictionary<string> = JSON.parse(this.privProperties.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        currentProperties[name] = value;\r\n\r\n        this.privProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\r\n    }\r\n\r\n    public setProfanity(profanity: ProfanityOption): void {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_ProfanityOption, ProfanityOption[profanity]);\r\n    }\r\n\r\n    public enableAudioLogging(): void {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_EnableAudioLogging, \"true\");\r\n    }\r\n    public requestWordLevelTimestamps(): void {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"true\");\r\n    }\r\n    public enableDictation(): void {\r\n        this.privProperties.setProperty(ForceDictationPropertyName, \"true\");\r\n    }\r\n\r\n    public clone(): SpeechConfigImpl {\r\n        const ret: SpeechConfigImpl = new SpeechConfigImpl();\r\n        ret.privProperties = this.privProperties.clone();\r\n        return ret;\r\n    }\r\n\r\n    public get speechSynthesisLanguage(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage);\r\n    }\r\n\r\n    public set speechSynthesisLanguage(language: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthLanguage, language);\r\n    }\r\n\r\n    public get speechSynthesisVoiceName(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice);\r\n    }\r\n\r\n    public set speechSynthesisVoiceName(voice: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthVoice, voice);\r\n    }\r\n\r\n    public get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat {\r\n        return SpeechSynthesisOutputFormat[this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined) as keyof typeof SpeechSynthesisOutputFormat];\r\n    }\r\n\r\n    public set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, SpeechSynthesisOutputFormat[format]);\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n    ServicePropertiesPropertyName\r\n} from \"../common.speech/Exports.js\";\r\nimport { IStringDictionary } from \"../common/Exports.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    OutputFormat,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SpeechConfig,\r\n    SpeechSynthesisOutputFormat,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Speech translation configuration.\r\n * @class SpeechTranslationConfig\r\n */\r\nexport abstract class SpeechTranslationConfig extends SpeechConfig {\r\n\r\n    /**\r\n     * Creates an instance of recognizer config.\r\n     */\r\n    protected constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Static instance of SpeechTranslationConfig returned by passing a subscription key and service region.\r\n     * @member SpeechTranslationConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechTranslationConfig} The speech translation config.\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, region: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Static instance of SpeechTranslationConfig returned by passing authorization token and service region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by setting the property authorizationToken with a new\r\n     * valid token. Otherwise, all the recognizers created by this SpeechTranslationConfig instance\r\n     * will encounter errors during recognition.\r\n     * As configuration values are copied when creating a new recognizer, the new token value will not apply\r\n     * to recognizers that have already been created.\r\n     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member SpeechTranslationConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} authorizationToken - The authorization token.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechTranslationConfig} The speech translation config.\r\n     */\r\n    public static fromAuthorizationToken(authorizationToken: string, region: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech config with specified host and subscription key.\r\n     * This method is intended only for users who use a non-default service host. Standard resource path will be assumed.\r\n     * For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n     * Note: To use an authorization token with fromHost, use fromHost(URL),\r\n     * and then set the AuthorizationToken property on the created SpeechConfig instance.\r\n     * Note: Added in version 1.9.0.\r\n     * @member SpeechConfig.fromHost\r\n     * @function\r\n     * @public\r\n     * @param {URL} host - The service endpoint to connect to. Format is \"protocol://host:port\" where \":port\" is optional.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromHost(hostName: URL, subscriptionKey?: string): SpeechConfig {\r\n        Contracts.throwIfNull(hostName, \"hostName\");\r\n\r\n        const speechImpl: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Host, hostName.protocol + \"//\" + hostName.hostname + (hostName.port === \"\" ? \"\" : \":\" + hostName.port));\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech translation config with specified endpoint and subscription key.\r\n     * This method is intended only for users who use a non-standard service endpoint or paramters.\r\n     * Note: The query properties specified in the endpoint URL are not changed, even if they are\r\n     * set by any other APIs. For example, if language is defined in the uri as query parameter\r\n     * \"language=de-DE\", and also set by the speechRecognitionLanguage property, the language\r\n     * setting in uri takes precedence, and the effective language is \"de-DE\".\r\n     * Only the properties that are not specified in the endpoint URL can be set by other APIs.\r\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n     * fromEndpoint method, and then set authorizationToken=\"token\" on the created SpeechConfig instance to\r\n     * use the authorization token.\r\n     * @member SpeechTranslationConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @returns {SpeechTranslationConfig} A speech config instance.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n        Contracts.throwIfNull(subscriptionKey, \"subscriptionKey\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * @member SpeechTranslationConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set authorizationToken(value: string);\r\n\r\n    /**\r\n     * Gets/Sets the speech recognition language.\r\n     * @member SpeechTranslationConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Add a (text) target language to translate into.\r\n     * @member SpeechTranslationConfig.prototype.addTargetLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public abstract addTargetLanguage(value: string): void;\r\n\r\n    /**\r\n     * Gets the (text) target language to translate into.\r\n     * @member SpeechTranslationConfig.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public abstract get targetLanguages(): string[];\r\n\r\n    /**\r\n     * Gets the selected voice name.\r\n     * @member SpeechTranslationConfig.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} The voice name.\r\n     */\r\n    public abstract get voiceName(): string;\r\n\r\n    /**\r\n     * Gets/Sets voice of the translated language, enable voice synthesis output.\r\n     * @member SpeechTranslationConfig.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The name of the voice.\r\n     */\r\n    public abstract set voiceName(value: string);\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member SpeechTranslationConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string | PropertyId} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string | PropertyId, value: string): void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechTranslationConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * @private\r\n * @class SpeechTranslationConfigImpl\r\n */\r\nexport class SpeechTranslationConfigImpl extends SpeechTranslationConfig {\r\n\r\n    private privSpeechProperties: PropertyCollection;\r\n\r\n    public constructor() {\r\n        super();\r\n        this.privSpeechProperties = new PropertyCollection();\r\n        this.outputFormat = OutputFormat.Simple;\r\n    }\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * If this is set, subscription key is ignored.\r\n     * User needs to make sure the provided authorization token is valid and not expired.\r\n     * @member SpeechTranslationConfigImpl.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * Sets the speech recognition language.\r\n     * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public set speechRecognitionLanguage(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the speech recognition language.\r\n     * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @return {string} The speechRecognitionLanguage.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n    }\r\n\r\n    /**\r\n     * @member SpeechTranslationConfigImpl.prototype.subscriptionKey\r\n     * @function\r\n     * @public\r\n     */\r\n    public get subscriptionKey(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format\r\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        // eslint-disable-next-line\r\n        return (OutputFormat as any)[this.privSpeechProperties.getProperty(OutputFormatPropertyName, undefined)];\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the output format\r\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privSpeechProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\r\n    }\r\n\r\n    /**\r\n     * Gets the endpoint id.\r\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     */\r\n    public get endpointId(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the endpoint id.\r\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     */\r\n    public set endpointId(value: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_EndpointId, value);\r\n    }\r\n\r\n    /**\r\n     * Add a (text) target language to translate into.\r\n     * @member SpeechTranslationConfigImpl.prototype.addTargetLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public addTargetLanguage(value: string): void {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        const languages: string[] = this.targetLanguages;\r\n        if (!languages.includes(value)) {\r\n            languages.push(value);\r\n            this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the (text) target language to translate into.\r\n     * @member SpeechTranslationConfigImpl.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public get targetLanguages(): string[] {\r\n\r\n        if (this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n        } else {\r\n            return [];\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets the voice name.\r\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     */\r\n    public get voiceName(): string {\r\n        return this.getProperty(PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the voice of the translated language, enable voice synthesis output.\r\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The name of the voice.\r\n     */\r\n    public set voiceName(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationVoice, value);\r\n    }\r\n\r\n    /**\r\n     * Provides the region.\r\n     * @member SpeechTranslationConfigImpl.prototype.region\r\n     * @function\r\n     * @public\r\n     * @returns {string} The region.\r\n     */\r\n    public get region(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n    }\r\n\r\n    public setProxy(proxyHostName: string, proxyPort: number): void;\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n    public setProxy(proxyHostName: any, proxyPort: any, proxyUserName?: any, proxyPassword?: any): void {\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPort], proxyPort as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName as string);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword as string);\r\n    }\r\n\r\n    /**\r\n     * Gets an arbitrary property value.\r\n     * @member SpeechTranslationConfigImpl.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property.\r\n     * @param {string} def - The default value of the property in case it is not set.\r\n     * @returns {string} The value of the property.\r\n     */\r\n    public getProperty(name: string, def?: string): string {\r\n        return this.privSpeechProperties.getProperty(name, def);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets an arbitrary property value.\r\n     * @member SpeechTranslationConfigImpl.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string | PropertyId} name - The name of the property to set.\r\n     * @param {string} value - The value of the property.\r\n     */\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        this.privSpeechProperties.setProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Provides access to custom properties.\r\n     * @member SpeechTranslationConfigImpl.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The properties.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privSpeechProperties;\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechTranslationConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string): void {\r\n        const currentProperties: IStringDictionary<string> = JSON.parse(this.privSpeechProperties.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        currentProperties[name] = value;\r\n\r\n        this.privSpeechProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\r\n    }\r\n\r\n    public setProfanity(profanity: ProfanityOption): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceResponse_ProfanityOption, ProfanityOption[profanity]);\r\n    }\r\n\r\n    public enableAudioLogging(): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_EnableAudioLogging, \"true\");\r\n    }\r\n    public requestWordLevelTimestamps(): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"true\");\r\n    }\r\n    public enableDictation(): void {\r\n        this.privSpeechProperties.setProperty(ForceDictationPropertyName, \"true\");\r\n    }\r\n\r\n    public get speechSynthesisLanguage(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage);\r\n    }\r\n\r\n    public set speechSynthesisLanguage(language: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthLanguage, language);\r\n    }\r\n\r\n    public get speechSynthesisVoiceName(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice);\r\n    }\r\n\r\n    public set speechSynthesisVoiceName(voice: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthVoice, voice);\r\n    }\r\n\r\n    public get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat {\r\n        // eslint-disable-next-line\r\n        return (SpeechSynthesisOutputFormat as any)[this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)];\r\n    }\r\n\r\n    public set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, SpeechSynthesisOutputFormat[format]);\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyId } from \"./Exports.js\";\r\n\r\n/**\r\n * Represents collection of properties and their values.\r\n * @class PropertyCollection\r\n */\r\nexport class PropertyCollection {\r\n    private privKeys: string[] = [] as string[];\r\n    private privValues: string[] = [] as string[];\r\n\r\n    /**\r\n     * Returns the property value in type String.\r\n     * Currently only String, int and bool are allowed.\r\n     * If the name is not available, the specified defaultValue is returned.\r\n     * @member PropertyCollection.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string | number | boolean} def - The default value which is returned if the parameter\r\n     * is not available in the collection.\r\n     * @returns {string} value of the parameter.\r\n     */\r\n    public getProperty(key: PropertyId | string, def?: string | number | boolean): string {\r\n        let keyToUse: string;\r\n\r\n        if (typeof key === \"string\") {\r\n            keyToUse = key;\r\n        } else {\r\n            keyToUse = PropertyId[key];\r\n        }\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            if (this.privKeys[n] === keyToUse) {\r\n                return this.privValues[n];\r\n            }\r\n        }\r\n\r\n        if (def === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        return String(def);\r\n    }\r\n\r\n    /**\r\n     * Sets the String value of the parameter specified by name.\r\n     * @member PropertyCollection.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} value - The value of the parameter.\r\n     */\r\n    public setProperty(key: string | PropertyId, value: string): void {\r\n        let keyToUse: string;\r\n\r\n        if (typeof key === \"string\") {\r\n            keyToUse = key;\r\n        } else {\r\n            keyToUse = PropertyId[key];\r\n        }\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            if (this.privKeys[n] === keyToUse) {\r\n                this.privValues[n] = value;\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.privKeys.push(keyToUse);\r\n        this.privValues.push(value);\r\n    }\r\n\r\n    /**\r\n     * Clones the collection.\r\n     * @member PropertyCollection.prototype.clone\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} A copy of the collection.\r\n     */\r\n    public clone(): PropertyCollection {\r\n        const clonedMap = new PropertyCollection();\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            clonedMap.privKeys.push(this.privKeys[n]);\r\n            clonedMap.privValues.push(this.privValues[n]);\r\n        }\r\n\r\n        return clonedMap;\r\n    }\r\n\r\n    /**\r\n     * Merges this set of properties into another, no overwrites.\r\n     * @member PropertyCollection.prototype.mergeTo\r\n     * @function\r\n     * @public\r\n     * @param {PropertyCollection}  destinationCollection - The collection to merge into.\r\n     */\r\n    public mergeTo(destinationCollection: PropertyCollection): void {\r\n        this.privKeys.forEach((key: string | PropertyId): void => {\r\n            if (destinationCollection.getProperty(key, undefined) === undefined) {\r\n                const value = this.getProperty(key);\r\n                destinationCollection.setProperty(key, value);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the keys in Property Collection.\r\n     * @member PropertyCollection.prototype.keys\r\n     * @function\r\n     * @public\r\n     * @returns {string []} Keys in the collection.\r\n     */\r\n    public get keys(): string[] {\r\n        return this.privKeys;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines speech property ids.\r\n * @class PropertyId\r\n */\r\nexport enum PropertyId {\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service subscription Key. If you are using an intent recognizer, you need to\r\n     * specify the LUIS endpoint key for your particular LUIS app. Under normal circumstances, you shouldn't\r\n     * have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromSubscription]].\r\n     * @member PropertyId.SpeechServiceConnection_Key\r\n     */\r\n    SpeechServiceConnection_Key = 0,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service endpoint (url). Under normal circumstances, you shouldn't\r\n     * have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromEndpoint]].\r\n     * NOTE: This endpoint is not the same as the endpoint used to obtain an access token.\r\n     * @member PropertyId.SpeechServiceConnection_Endpoint\r\n     */\r\n    SpeechServiceConnection_Endpoint,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service region. Under normal circumstances, you shouldn't have to\r\n     * use this property directly.\r\n     * Instead, use [[SpeechConfig.fromSubscription]], [[SpeechConfig.fromEndpoint]], [[SpeechConfig.fromAuthorizationToken]].\r\n     * @member PropertyId.SpeechServiceConnection_Region\r\n     */\r\n    SpeechServiceConnection_Region,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service authorization token (aka access token). Under normal circumstances,\r\n     * you shouldn't have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromAuthorizationToken]], [[SpeechRecognizer.authorizationToken]],\r\n     * [[IntentRecognizer.authorizationToken]], [[TranslationRecognizer.authorizationToken]], [[SpeakerRecognizer.authorizationToken]].\r\n     * @member PropertyId.SpeechServiceAuthorization_Token\r\n     */\r\n    SpeechServiceAuthorization_Token,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service authorization type. Currently unused.\r\n     * @member PropertyId.SpeechServiceAuthorization_Type\r\n     */\r\n    SpeechServiceAuthorization_Type,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service endpoint id. Under normal circumstances, you shouldn't\r\n     * have to use this property directly.\r\n     * Instead, use [[SpeechConfig.endpointId]].\r\n     * NOTE: The endpoint id is available in the Speech Portal, listed under Endpoint Details.\r\n     * @member PropertyId.SpeechServiceConnection_EndpointId\r\n     */\r\n    SpeechServiceConnection_EndpointId,\r\n\r\n    /**\r\n     * The list of comma separated languages (BCP-47 format) used as target translation languages. Under normal circumstances,\r\n     * you shouldn't have to use this property directly.\r\n     * Instead use [[SpeechTranslationConfig.addTargetLanguage]],\r\n     * [[SpeechTranslationConfig.targetLanguages]], [[TranslationRecognizer.targetLanguages]].\r\n     * @member PropertyId.SpeechServiceConnection_TranslationToLanguages\r\n     */\r\n    SpeechServiceConnection_TranslationToLanguages,\r\n\r\n    /**\r\n     * The name of the Cognitive Service Text to Speech Service Voice. Under normal circumstances, you shouldn't have to use this\r\n     * property directly.\r\n     * Instead, use [[SpeechTranslationConfig.voiceName]].\r\n     * NOTE: Valid voice names can be found <a href=\"https://aka.ms/csspeech/voicenames\">here</a>.\r\n     * @member PropertyId.SpeechServiceConnection_TranslationVoice\r\n     */\r\n    SpeechServiceConnection_TranslationVoice,\r\n\r\n    /**\r\n     * Translation features.\r\n     * @member PropertyId.SpeechServiceConnection_TranslationFeatures\r\n     */\r\n    SpeechServiceConnection_TranslationFeatures,\r\n\r\n    /**\r\n     * The Language Understanding Service Region. Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Instead, use [[LanguageUnderstandingModel]].\r\n     * @member PropertyId.SpeechServiceConnection_IntentRegion\r\n     */\r\n    SpeechServiceConnection_IntentRegion,\r\n\r\n    /**\r\n     * The host name of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyHostName,\r\n\r\n    /**\r\n     * The port of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyPort,\r\n\r\n    /**\r\n     * The user name of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyUserName,\r\n\r\n    /**\r\n     * The password of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyPassword,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service recognition Mode. Can be \"INTERACTIVE\", \"CONVERSATION\", \"DICTATION\".\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * @member PropertyId.SpeechServiceConnection_RecoMode\r\n     */\r\n    SpeechServiceConnection_RecoMode,\r\n\r\n    /**\r\n     * The spoken language to be recognized (in BCP-47 format). Under normal circumstances, you shouldn't have to use this property\r\n     * directly.\r\n     * Instead, use [[SpeechConfig.speechRecognitionLanguage]].\r\n     * @member PropertyId.SpeechServiceConnection_RecoLanguage\r\n     */\r\n    SpeechServiceConnection_RecoLanguage,\r\n\r\n    /**\r\n     * The session id. This id is a universally unique identifier (aka UUID) representing a specific binding of an audio input stream\r\n     * and the underlying speech recognition instance to which it is bound. Under normal circumstances, you shouldn't have to use this\r\n     * property directly.\r\n     * Instead use [[SessionEventArgs.sessionId]].\r\n     * @member PropertyId.Speech_SessionId\r\n     */\r\n    Speech_SessionId,\r\n\r\n    /**\r\n     * The spoken language to be synthesized (e.g. en-US)\r\n     * @member PropertyId.SpeechServiceConnection_SynthLanguage\r\n     */\r\n    SpeechServiceConnection_SynthLanguage,\r\n\r\n    /**\r\n     * The name of the TTS voice to be used for speech synthesis\r\n     * @member PropertyId.SpeechServiceConnection_SynthVoice\r\n     */\r\n    SpeechServiceConnection_SynthVoice,\r\n\r\n    /**\r\n     * The string to specify TTS output audio format\r\n     * @member PropertyId.SpeechServiceConnection_SynthOutputFormat\r\n     */\r\n    SpeechServiceConnection_SynthOutputFormat,\r\n\r\n    /**\r\n     * The list of comma separated languages used as possible source languages\r\n     * Added in version 1.13.0\r\n     * @member PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages\r\n     */\r\n    SpeechServiceConnection_AutoDetectSourceLanguages,\r\n\r\n    /**\r\n     * The requested Cognitive Services Speech Service response output format (simple or detailed). Under normal circumstances, you shouldn't have\r\n     * to use this property directly.\r\n     * Instead use [[SpeechConfig.outputFormat]].\r\n     * @member PropertyId.SpeechServiceResponse_RequestDetailedResultTrueFalse\r\n     */\r\n    SpeechServiceResponse_RequestDetailedResultTrueFalse,\r\n\r\n    /**\r\n     * The requested Cognitive Services Speech Service response output profanity level. Currently unused.\r\n     * @member PropertyId.SpeechServiceResponse_RequestProfanityFilterTrueFalse\r\n     */\r\n    SpeechServiceResponse_RequestProfanityFilterTrueFalse,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service response output (in JSON format). This property is available on recognition result objects only.\r\n     * @member PropertyId.SpeechServiceResponse_JsonResult\r\n     */\r\n    SpeechServiceResponse_JsonResult,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service error details (in JSON format). Under normal circumstances, you shouldn't have to\r\n     * use this property directly. Instead use [[CancellationDetails.errorDetails]].\r\n     * @member PropertyId.SpeechServiceResponse_JsonErrorDetails\r\n     */\r\n    SpeechServiceResponse_JsonErrorDetails,\r\n\r\n    /**\r\n     * The cancellation reason. Currently unused.\r\n     * @member PropertyId.CancellationDetails_Reason\r\n     */\r\n    CancellationDetails_Reason,\r\n\r\n    /**\r\n     * The cancellation text. Currently unused.\r\n     * @member PropertyId.CancellationDetails_ReasonText\r\n     */\r\n    CancellationDetails_ReasonText,\r\n\r\n    /**\r\n     * The Cancellation detailed text. Currently unused.\r\n     * @member PropertyId.CancellationDetails_ReasonDetailedText\r\n     */\r\n    CancellationDetails_ReasonDetailedText,\r\n\r\n    /**\r\n     * The Language Understanding Service response output (in JSON format). Available via [[IntentRecognitionResult]]\r\n     * @member PropertyId.LanguageUnderstandingServiceResponse_JsonResult\r\n     */\r\n    LanguageUnderstandingServiceResponse_JsonResult,\r\n\r\n    /**\r\n     * The URL string built from speech configuration.\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * NOTE: Added in version 1.7.0.\r\n     */\r\n    SpeechServiceConnection_Url,\r\n\r\n    /**\r\n     * The initial silence timeout value (in milliseconds) used by the service.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceConnection_InitialSilenceTimeoutMs,\r\n\r\n    /**\r\n     * The end silence timeout value (in milliseconds) used by the service.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceConnection_EndSilenceTimeoutMs,\r\n\r\n    /**\r\n     * A duration of detected silence, measured in milliseconds, after which speech-to-text will determine a spoken\r\n     * phrase has ended and generate a final Recognized result. Configuring this timeout may be helpful in situations\r\n     * where spoken input is significantly faster or slower than usual and default segmentation behavior consistently\r\n     * yields results that are too long or too short. Segmentation timeout values that are inappropriately high or low\r\n     * can negatively affect speech-to-text accuracy; this property should be carefully configured and the resulting\r\n     * behavior should be thoroughly validated as intended.\r\n     *\r\n     * For more information about timeout configuration that includes discussion of default behaviors, please visit\r\n     * https://aka.ms/csspeech/timeouts.\r\n     *\r\n     * Added in version 1.21.0.\r\n     */\r\n    Speech_SegmentationSilenceTimeoutMs,\r\n\r\n    /**\r\n     * A boolean value specifying whether audio logging is enabled in the service or not.\r\n     * Audio and content logs are stored either in Microsoft-owned storage, or in your own storage account linked\r\n     * to your Cognitive Services subscription (Bring Your Own Storage (BYOS) enabled Speech resource).\r\n     * The logs will be removed after 30 days.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceConnection_EnableAudioLogging,\r\n\r\n    /**\r\n     * The speech service connection language identifier mode.\r\n     * Can be \"AtStart\" (the default), or \"Continuous\". See Language\r\n     * Identification document https://aka.ms/speech/lid?pivots=programming-language-javascript\r\n     * for more details.\r\n     * Added in 1.25.0\r\n     **/\r\n    SpeechServiceConnection_LanguageIdMode,\r\n\r\n    /**\r\n     * A string value representing the desired endpoint version to target for Speech Recognition.\r\n     * Added in version 1.21.0\r\n     */\r\n    SpeechServiceConnection_RecognitionEndpointVersion,\r\n\r\n    /**\r\n    /**\r\n     * A string value the current speaker recognition scenario/mode (TextIndependentIdentification, etc.).\r\n     * Added in version 1.23.0\r\n     */\r\n    SpeechServiceConnection_SpeakerIdMode,\r\n\r\n    /**\r\n     * The requested Cognitive Services Speech Service response output profanity setting.\r\n     * Allowed values are \"masked\", \"removed\", and \"raw\".\r\n     * Added in version 1.7.0.\r\n     */\r\n    SpeechServiceResponse_ProfanityOption,\r\n\r\n    /**\r\n     * A string value specifying which post processing option should be used by service.\r\n     * Allowed values are \"TrueText\".\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceResponse_PostProcessingOption,\r\n\r\n    /**\r\n     * A boolean value specifying whether to include word-level timestamps in the response result.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceResponse_RequestWordLevelTimestamps,\r\n\r\n    /**\r\n     * The number of times a word has to be in partial results to be returned.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceResponse_StablePartialResultThreshold,\r\n\r\n    /**\r\n     * A string value specifying the output format option in the response result. Internal use only.\r\n     * Added in version 1.7.0.\r\n     */\r\n    SpeechServiceResponse_OutputFormatOption,\r\n\r\n    /**\r\n     * A boolean value to request for stabilizing translation partial results by omitting words in the end.\r\n     * Added in version 1.7.0.\r\n     */\r\n    SpeechServiceResponse_TranslationRequestStablePartialResult,\r\n\r\n    /**\r\n     * A boolean value specifying whether to request WordBoundary events.\r\n     * @member PropertyId.SpeechServiceResponse_RequestWordBoundary\r\n     * Added in version 1.21.0.\r\n     */\r\n    SpeechServiceResponse_RequestWordBoundary,\r\n\r\n    /**\r\n     * A boolean value specifying whether to request punctuation boundary in WordBoundary Events. Default is true.\r\n     * @member PropertyId.SpeechServiceResponse_RequestPunctuationBoundary\r\n     * Added in version 1.21.0.\r\n     */\r\n    SpeechServiceResponse_RequestPunctuationBoundary,\r\n\r\n    /**\r\n     * A boolean value specifying whether to request sentence boundary in WordBoundary Events. Default is false.\r\n     * @member PropertyId.SpeechServiceResponse_RequestSentenceBoundary\r\n     * Added in version 1.21.0.\r\n     */\r\n    SpeechServiceResponse_RequestSentenceBoundary,\r\n\r\n    /**\r\n     * Identifier used to connect to the backend service.\r\n     * @member PropertyId.Conversation_ApplicationId\r\n     */\r\n    Conversation_ApplicationId,\r\n\r\n    /**\r\n     * Type of dialog backend to connect to.\r\n     * @member PropertyId.Conversation_DialogType\r\n     */\r\n    Conversation_DialogType,\r\n\r\n    /**\r\n     * Silence timeout for listening\r\n     * @member PropertyId.Conversation_Initial_Silence_Timeout\r\n     */\r\n    Conversation_Initial_Silence_Timeout,\r\n\r\n    /**\r\n     * From Id to add to speech recognition activities.\r\n     * @member PropertyId.Conversation_From_Id\r\n     */\r\n    Conversation_From_Id,\r\n\r\n    /**\r\n     * ConversationId for the session.\r\n     * @member PropertyId.Conversation_Conversation_Id\r\n     */\r\n    Conversation_Conversation_Id,\r\n\r\n    /**\r\n     * Comma separated list of custom voice deployment ids.\r\n     * @member PropertyId.Conversation_Custom_Voice_Deployment_Ids\r\n     */\r\n    Conversation_Custom_Voice_Deployment_Ids,\r\n\r\n    /**\r\n     * Speech activity template, stamp properties from the template on the activity generated by the service for speech.\r\n     * @member PropertyId.Conversation_Speech_Activity_Template\r\n     * Added in version 1.10.0.\r\n     */\r\n    Conversation_Speech_Activity_Template,\r\n\r\n    /**\r\n     * Enables or disables the receipt of turn status messages as obtained on the turnStatusReceived event.\r\n     * @member PropertyId.Conversation_Request_Bot_Status_Messages\r\n     * Added in version 1.15.0.\r\n     */\r\n    Conversation_Request_Bot_Status_Messages,\r\n\r\n    /**\r\n     * Specifies the connection ID to be provided in the Agent configuration message, e.g. a Direct Line token for\r\n     * channel authentication.\r\n     * Added in version 1.15.1.\r\n     */\r\n    Conversation_Agent_Connection_Id,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service host (url). Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromHost]].\r\n     */\r\n    SpeechServiceConnection_Host,\r\n\r\n    /**\r\n     * Set the host for service calls to the Conversation Translator REST management and websocket calls.\r\n     */\r\n    ConversationTranslator_Host,\r\n\r\n    /**\r\n     * Optionally set the the host's display name.\r\n     * Used when joining a conversation.\r\n     */\r\n    ConversationTranslator_Name,\r\n\r\n    /**\r\n     * Optionally set a value for the X-CorrelationId request header.\r\n     * Used for troubleshooting errors in the server logs. It should be a valid guid.\r\n     */\r\n    ConversationTranslator_CorrelationId,\r\n\r\n    /**\r\n     * Set the conversation token to be sent to the speech service. This enables the\r\n     * service to service call from the speech service to the Conversation Translator service for relaying\r\n     * recognitions. For internal use.\r\n     */\r\n    ConversationTranslator_Token,\r\n\r\n    /**\r\n     * The reference text of the audio for pronunciation evaluation.\r\n     * For this and the following pronunciation assessment parameters, see\r\n     * https://docs.microsoft.com/azure/cognitive-services/speech-service/rest-speech-to-text#pronunciation-assessment-parameters for details.\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_ReferenceText,\r\n\r\n    /**\r\n     * The point system for pronunciation score calibration (FivePoint or HundredMark).\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_GradingSystem,\r\n\r\n    /**\r\n     * The pronunciation evaluation granularity (Phoneme, Word, or FullText).\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_Granularity,\r\n\r\n    /**\r\n     * Defines if enable miscue calculation.\r\n     * With this enabled, the pronounced words will be compared to the reference text,\r\n     * and will be marked with omission/insertion based on the comparison. The default setting is False.\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_EnableMiscue,\r\n\r\n    /**\r\n     * The json string of pronunciation assessment parameters\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_Json,\r\n\r\n    /**\r\n     * Pronunciation assessment parameters.\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_Params,\r\n\r\n    /**\r\n     * Version of Speaker Recognition API to use.\r\n     * Added in version 1.18.0\r\n     */\r\n    SpeakerRecognition_Api_Version,\r\n\r\n    /**\r\n     * Specifies whether to allow load of data URL for web worker\r\n     * Allowed values are \"off\" and \"on\". Default is \"on\".\r\n     * Added in version 1.32.0\r\n     */\r\n    WebWorkerLoadType,\r\n\r\n    /**\r\n     * Talking avatar service WebRTC session description protocol.\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * Added in version 1.33.0\r\n     */\r\n    TalkingAvatarService_WebRTC_SDP,\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CognitiveSubscriptionKeyAuthentication,\r\n    CognitiveTokenAuthentication,\r\n    Context,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OS,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    Deferred,\r\n    marshalPromiseToCallbacks\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    Contracts\r\n} from \"./Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    SessionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines the base class Recognizer which mainly contains common event handlers.\r\n * @class Recognizer\r\n */\r\nexport abstract class Recognizer {\r\n    private privDisposed: boolean;\r\n    protected audioConfig: AudioConfig;\r\n    protected privReco: ServiceRecognizerBase;\r\n    protected privProperties: PropertyCollection;\r\n    private privConnectionFactory: IConnectionFactory;\r\n\r\n    /**\r\n     * Creates and initializes an instance of a Recognizer\r\n     * @constructor\r\n     * @param {AudioConfig} audioInput - An optional audio input stream associated with the recognizer\r\n     * @param {PropertyCollection} properties - A set of properties to set on the recognizer\r\n     * @param {IConnectionFactory} connectionFactory - The factory class used to create a custom IConnection for the recognizer\r\n     */\r\n    protected constructor(audioConfig: AudioConfig, properties: PropertyCollection, connectionFactory: IConnectionFactory) {\r\n        this.audioConfig = (audioConfig !== undefined) ? audioConfig : AudioConfig.fromDefaultMicrophoneInput();\r\n        this.privDisposed = false;\r\n        this.privProperties = properties.clone();\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.implCommonRecognizerSetup();\r\n    }\r\n\r\n    /**\r\n     * Defines event handler for session started events.\r\n     * @member Recognizer.prototype.sessionStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStarted: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session stopped events.\r\n     * @member Recognizer.prototype.sessionStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStopped: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for speech started events.\r\n     * @member Recognizer.prototype.speechStartDetected\r\n     * @function\r\n     * @public\r\n     */\r\n    public speechStartDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for speech stopped events.\r\n     * @member Recognizer.prototype.speechEndDetected\r\n     * @function\r\n     * @public\r\n     */\r\n    public speechEndDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member Recognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * Internal data member to support fromRecognizer* pattern methods on other classes.\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public get internalData(): object {\r\n        return this.privReco;\r\n    }\r\n\r\n    /**\r\n     * This method performs cleanup of resources.\r\n     * The Boolean parameter disposing indicates whether the method is called\r\n     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\r\n     * Derived classes should override this method to dispose resource if needed.\r\n     * @member Recognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - Flag to request disposal.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposed = true;\r\n\r\n        if (disposing) {\r\n            if (this.privReco) {\r\n                await this.privReco.audioSource.turnOff();\r\n                await this.privReco.dispose();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method returns the current state of the telemetry setting.\r\n     * @member Recognizer.prototype.telemetryEnabled\r\n     * @function\r\n     * @public\r\n     * @returns true if the telemetry is enabled, false otherwise.\r\n     */\r\n    public static get telemetryEnabled(): boolean {\r\n        return ServiceRecognizerBase.telemetryDataEnabled;\r\n    }\r\n\r\n    /**\r\n     * This method globally enables or disables telemetry.\r\n     * @member Recognizer.prototype.enableTelemetry\r\n     * @function\r\n     * @public\r\n     * @param enabled - Global setting for telemetry collection.\r\n     * If set to true, telemetry information like microphone errors,\r\n     * recognition errors are collected and sent to Microsoft.\r\n     * If set to false, no telemetry is sent to Microsoft.\r\n     */\r\n    public static enableTelemetry(enabled: boolean): void {\r\n        ServiceRecognizerBase.telemetryDataEnabled = enabled;\r\n    }\r\n\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // Move to independent class\r\n    // ################################################################################################################\r\n    //\r\n    protected abstract createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig;\r\n\r\n    // Creates the correct service recognizer for the type\r\n    protected abstract createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase;\r\n\r\n    // Does the generic recognizer setup that is common across all recognizer types.\r\n    protected implCommonRecognizerSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const recognizerConfig = this.createRecognizerConfig(\r\n            new SpeechServiceConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion))));\r\n\r\n        this.privReco = this.createServiceRecognizer(\r\n            Recognizer.getAuthFromProperties(this.privProperties),\r\n            this.privConnectionFactory,\r\n            this.audioConfig,\r\n            recognizerConfig);\r\n    }\r\n\r\n    protected async recognizeOnceAsyncImpl(recognitionMode: RecognitionMode): Promise<SpeechRecognitionResult> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        const ret: Deferred<SpeechRecognitionResult> = new Deferred<SpeechRecognitionResult>();\r\n\r\n        await this.implRecognizerStop();\r\n        await this.privReco.recognize(recognitionMode, ret.resolve, ret.reject);\r\n        const result: SpeechRecognitionResult = await ret.promise;\r\n        await this.implRecognizerStop();\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n    protected async startContinuousRecognitionAsyncImpl(recognitionMode: RecognitionMode): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n\r\n        await this.implRecognizerStop();\r\n        await this.privReco.recognize(recognitionMode, undefined, undefined);\r\n    }\r\n\r\n    protected async stopContinuousRecognitionAsyncImpl(): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        await this.implRecognizerStop();\r\n    }\r\n\r\n    protected async implRecognizerStop(): Promise<void> {\r\n        if (this.privReco) {\r\n            await this.privReco.stopRecognizing();\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected static getAuthFromProperties(properties: PropertyCollection): IAuthentication {\r\n        const subscriptionKey = properties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n        const authentication = (subscriptionKey && subscriptionKey !== \"\") ?\r\n            new CognitiveSubscriptionKeyAuthentication(subscriptionKey) :\r\n            new CognitiveTokenAuthentication(\r\n                (): Promise<string> => {\r\n                    const authorizationToken = properties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                },\r\n                (): Promise<string> => {\r\n                    const authorizationToken = properties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                });\r\n\r\n        return authentication;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OutputFormatPropertyName,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechConnectionFactory,\r\n    SpeechServiceConfig,\r\n    SpeechServiceRecognizer,\r\n} from \"../common.speech/Exports.js\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    AutoDetectSourceLanguageConfig,\r\n    KeywordRecognitionModel,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"./Exports.js\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig.js\";\r\n\r\n/**\r\n * Performs speech recognition from microphone, file, or other audio input streams, and gets transcribed text as result.\r\n * @class SpeechRecognizer\r\n */\r\nexport class SpeechRecognizer extends Recognizer {\r\n    private privDisposedRecognizer: boolean;\r\n\r\n    /**\r\n     * SpeechRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            speechConfigImpl.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        super(audioConfig, speechConfigImpl.properties, new SpeechConnectionFactory());\r\n        this.privDisposedRecognizer = false;\r\n    }\r\n\r\n    /**\r\n     * SpeechRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): SpeechRecognizer {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        const recognizer = new SpeechRecognizer(speechConfig, audioConfig);\r\n        return recognizer;\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member SpeechRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member SpeechRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member SpeechRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: Recognizer, event: SpeechRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the endpoint id of a customized speech model that is used for speech recognition.\r\n     * @member SpeechRecognizer.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.\r\n     */\r\n    public get endpointId(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_EndpointId, \"00000000-0000-0000-0000-000000000000\");\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member SpeechRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member SpeechRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member SpeechRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format of recognition.\r\n     * @member SpeechRecognizer.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} The output format of recognition.\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        if (this.properties.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) === OutputFormat[OutputFormat.Simple]) {\r\n            return OutputFormat.Simple;\r\n        } else {\r\n            return OutputFormat.Detailed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this SpeechRecognizer.\r\n     * @member SpeechRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, and stops after the first utterance is recognized.\r\n     * The task returns the recognition text as result.\r\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\r\n     * so it is suitable only for single shot recognition\r\n     * like command or query. For long-running recognition, use StartContinuousRecognitionAsync() instead.\r\n     * @member SpeechRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the SpeechRecognitionResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * @member SpeechRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * @member SpeechRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition with keyword spotting, until\r\n     * stopKeywordRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * Note: Key word spotting functionality is only available on the\r\n     * Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member SpeechRecognizer.prototype.startKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param {KeywordRecognitionModel} model The keyword recognition model that\r\n     * specifies the keyword to be recognized.\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startKeywordRecognitionAsync(model: KeywordRecognitionModel, cb?: () => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        if (!!err) {\r\n            err(\"Not yet implemented.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * Note: Key word spotting functionality is only available on the\r\n     * Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member SpeechRecognizer.prototype.stopKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopKeywordRecognitionAsync(cb?: () => void): void {\r\n        if (!!cb) {\r\n            cb();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member SpeechRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member SpeechRecognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n            await this.implRecognizerStop();\r\n        }\r\n\r\n        await super.dispose(disposing);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new SpeechServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    AddedLmIntent,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    IntentConnectionFactory,\r\n    IntentServiceRecognizer,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig\r\n} from \"../common.speech/Exports.js\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    IntentRecognitionCanceledEventArgs,\r\n    IntentRecognitionEventArgs,\r\n    IntentRecognitionResult,\r\n    KeywordRecognitionModel,\r\n    LanguageUnderstandingModel,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeechConfig,\r\n} from \"./Exports.js\";\r\nimport { LanguageUnderstandingModelImpl } from \"./LanguageUnderstandingModel.js\";\r\nimport { SpeechConfigImpl } from \"./SpeechConfig.js\";\r\n\r\n/**\r\n * Intent recognizer.\r\n * @class\r\n */\r\nexport class IntentRecognizer extends Recognizer {\r\n    private privDisposedIntentRecognizer: boolean;\r\n    private privAddedIntents: string[][];\r\n    private privAddedLmIntents: { [id: string]: AddedLmIntent };\r\n    private privUmbrellaIntent: AddedLmIntent;\r\n\r\n    /**\r\n     * Initializes an instance of the IntentRecognizer.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The set of configuration properties.\r\n     * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\r\n        const configImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, new IntentConnectionFactory());\r\n        this.privAddedIntents = [];\r\n        this.privAddedLmIntents = {};\r\n\r\n        this.privDisposedIntentRecognizer = false;\r\n        this.privProperties = configImpl.properties;\r\n\r\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage), PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member IntentRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: IntentRecognizer, event: IntentRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member IntentRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: IntentRecognizer, event: IntentRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member IntentRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: IntentRecognizer, event: IntentRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member IntentRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} the spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member IntentRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * Note: Please use a token derived from your LanguageUnderstanding subscription key for the Intent recognizer.\r\n     * @member IntentRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - Authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this IntentRecognizer.\r\n     * @member IntentRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their\r\n     * values defined for this IntentRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts intent recognition, and stops after the first utterance is recognized.\r\n     * The task returns the recognition text and intent as result.\r\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\r\n     * so it is suitable only for single shot recognition like command or query.\r\n     * For long-running recognition, use StartContinuousRecognitionAsync() instead.\r\n     * @member IntentRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the recognition has finished with an IntentRecognitionResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: IntentRecognitionResult) => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\r\n            const context: IIntentContext = this.buildSpeechContext();\r\n\r\n            this.privReco.speechContext.setSection(\"intent\", context.Intent);\r\n            this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\r\n\r\n            const intentReco: IntentServiceRecognizer = this.privReco as IntentServiceRecognizer;\r\n            intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\r\n        }\r\n\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * @member IntentRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\r\n            const context: IIntentContext = this.buildSpeechContext();\r\n\r\n            this.privReco.speechContext.setSection(\"intent\", context.Intent);\r\n            this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\r\n\r\n            const intentReco: IntentServiceRecognizer = this.privReco as IntentServiceRecognizer;\r\n            intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\r\n        }\r\n\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous intent recognition.\r\n     * @member IntentRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition with keyword spotting, until stopKeywordRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK.\r\n     * This functionality is currently not included in the SDK itself.\r\n     * @member IntentRecognizer.prototype.startKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param {KeywordRecognitionModel} model - The keyword recognition model that specifies the keyword to be recognized.\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startKeywordRecognitionAsync(model: KeywordRecognitionModel, cb?: () => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        if (!!err) {\r\n            err(\"Not yet implemented.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK.\r\n     * This functionality is currently not included in the SDK itself.\r\n     * @member IntentRecognizer.prototype.stopKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopKeywordRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e as string);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a phrase that should be recognized as intent.\r\n     * @member IntentRecognizer.prototype.addIntent\r\n     * @function\r\n     * @public\r\n     * @param {string} intentId - A String that represents the identifier of the intent to be recognized.\r\n     * @param {string} phrase - A String that specifies the phrase representing the intent.\r\n     */\r\n    public addIntent(simplePhrase: string, intentId?: string): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n        Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\r\n        Contracts.throwIfNullOrWhitespace(simplePhrase, \"simplePhrase\");\r\n\r\n        this.privAddedIntents.push([intentId, simplePhrase]);\r\n    }\r\n\r\n    /**\r\n     * Adds an intent from Language Understanding service for recognition.\r\n     * @member IntentRecognizer.prototype.addIntentWithLanguageModel\r\n     * @function\r\n     * @public\r\n     * @param {string} intentId - A String that represents the identifier of the intent\r\n     * to be recognized. Ignored if intentName is empty.\r\n     * @param {string} model - The intent model from Language Understanding service.\r\n     * @param {string} intentName - The intent name defined in the intent model. If it\r\n     * is empty, all intent names defined in the model will be added.\r\n     */\r\n    public addIntentWithLanguageModel(intentId: string, model: LanguageUnderstandingModel, intentName?: string): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n        Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        const modelImpl: LanguageUnderstandingModelImpl = model as LanguageUnderstandingModelImpl;\r\n        Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\r\n\r\n        this.privAddedLmIntents[intentId] = new AddedLmIntent(modelImpl, intentName);\r\n    }\r\n\r\n    /**\r\n     * @summary Adds all intents from the specified Language Understanding Model.\r\n     * @member IntentRecognizer.prototype.addAllIntents\r\n     * @function\r\n     * @public\r\n     * @function\r\n     * @public\r\n     * @param {LanguageUnderstandingModel} model - The language understanding model containing the intents.\r\n     * @param {string} intentId - A custom id String to be returned in the IntentRecognitionResult's getIntentId() method.\r\n     */\r\n    public addAllIntents(model: LanguageUnderstandingModel, intentId?: string): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        const modelImpl: LanguageUnderstandingModelImpl = model as LanguageUnderstandingModelImpl;\r\n        Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\r\n\r\n        this.privUmbrellaIntent = new AddedLmIntent(modelImpl, intentId);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member IntentRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new IntentServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedIntentRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedIntentRecognizer = true;\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    private buildSpeechContext(): IIntentContext {\r\n        let appId: string;\r\n        let region: string;\r\n        let subscriptionKey: string;\r\n        const refGrammers: string[] = [];\r\n\r\n        if (undefined !== this.privUmbrellaIntent) {\r\n            appId = this.privUmbrellaIntent.modelImpl.appId;\r\n            region = this.privUmbrellaIntent.modelImpl.region;\r\n            subscriptionKey = this.privUmbrellaIntent.modelImpl.subscriptionKey;\r\n        }\r\n\r\n        // Build the reference grammer array.\r\n        for (const intentId of Object.keys(this.privAddedLmIntents)) {\r\n            const addedLmIntent: AddedLmIntent = this.privAddedLmIntents[intentId];\r\n\r\n            // validate all the same model, region, and key...\r\n            if (appId === undefined) {\r\n                appId = addedLmIntent.modelImpl.appId;\r\n            } else {\r\n                if (appId !== addedLmIntent.modelImpl.appId) {\r\n                    throw new Error(\"Intents must all be from the same LUIS model\");\r\n                }\r\n            }\r\n\r\n            if (region === undefined) {\r\n                region = addedLmIntent.modelImpl.region;\r\n            } else {\r\n                if (region !== addedLmIntent.modelImpl.region) {\r\n                    throw new Error(\"Intents must all be from the same LUIS model in a single region\");\r\n                }\r\n            }\r\n\r\n            if (subscriptionKey === undefined) {\r\n                subscriptionKey = addedLmIntent.modelImpl.subscriptionKey;\r\n            } else {\r\n                if (subscriptionKey !== addedLmIntent.modelImpl.subscriptionKey) {\r\n                    throw new Error(\"Intents must all use the same subscription key\");\r\n                }\r\n            }\r\n\r\n            const grammer: string = \"luis/\" + appId + \"-PRODUCTION#\" + intentId;\r\n            refGrammers.push(grammer);\r\n        }\r\n\r\n        return {\r\n            Intent: {\r\n                id: appId,\r\n                key: (subscriptionKey === undefined) ? this.privProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]) : subscriptionKey,\r\n                provider: \"LUIS\",\r\n            },\r\n            ReferenceGrammars: (undefined === this.privUmbrellaIntent) ? refGrammers : [\"luis/\" + appId + \"-PRODUCTION\"],\r\n        };\r\n    }\r\n}\r\n\r\ninterface IIntentContext {\r\n    Intent: {\r\n        id: string;\r\n        key: string;\r\n        provider: string;\r\n    };\r\n    ReferenceGrammars: string[];\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Output format\r\n * @class VoiceProfileType\r\n */\r\nexport enum VoiceProfileType {\r\n\r\n    /**\r\n     * Text independent speaker identification\r\n     * @member VoiceProfileType.TextIndependentIdentification\r\n     */\r\n    TextIndependentIdentification,\r\n\r\n    /**\r\n     * Text dependent speaker verification\r\n     * @member VoiceProfileType.TextDependentVerification\r\n     */\r\n    TextDependentVerification,\r\n\r\n    /**\r\n     * Text independent speaker verification\r\n     * @member VoiceProfileType.TextIndependentVerification\r\n     */\r\n    TextIndependentVerification,\r\n}\r\n", "//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nimport { HeaderNames } from \"../common.speech/HeaderNames.js\";\r\nimport {\r\n    ConnectionMessage as IntConnectionMessage,\r\n    MessageType\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    PropertyCollection\r\n} from \"./PropertyCollection.js\";\r\nimport { PropertyId } from \"./PropertyId.js\";\r\n\r\n/**\r\n * ConnectionMessage represents implementation specific messages sent to and received from\r\n * the speech service. These messages are provided for debugging purposes and should not\r\n * be used for production use cases with the Azure Cognitive Services Speech Service.\r\n * Messages sent to and received from the Speech Service are subject to change without\r\n * notice. This includes message contents, headers, payloads, ordering, etc.\r\n * Added in version 1.11.0.\r\n */\r\nexport abstract class ConnectionMessage {\r\n    /**\r\n     * The message path.\r\n     */\r\n    public abstract get path(): string;\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a text message.\r\n     * See also IsBinaryMessage().\r\n     */\r\n    public abstract get isTextMessage(): boolean;\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a binary message.\r\n     * See also GetBinaryMessage().\r\n     */\r\n    public abstract get isBinaryMessage(): boolean;\r\n\r\n    /**\r\n     * Gets the text message payload. Typically the text message content-type is\r\n     * application/json. To determine other content-types use\r\n     * Properties.GetProperty(\"Content-Type\").\r\n     */\r\n    public abstract get TextMessage(): string;\r\n\r\n    /**\r\n     * Gets the binary message payload.\r\n     */\r\n    public abstract get binaryMessage(): ArrayBuffer;\r\n\r\n    /**\r\n     * A collection of properties and their values defined for this <see cref=\"ConnectionMessage\"/>.\r\n     * Message headers can be accessed via this collection (e.g. \"Content-Type\").\r\n     */\r\n    public abstract get properties(): PropertyCollection;\r\n\r\n    /**\r\n     * Returns a string that represents the connection message.\r\n     */\r\n    public abstract toString(): string;\r\n}\r\n\r\nexport class ConnectionMessageImpl {\r\n\r\n    private privConnectionMessage: IntConnectionMessage;\r\n    private privProperties: PropertyCollection;\r\n\r\n    public constructor(message: IntConnectionMessage) {\r\n        this.privConnectionMessage = message;\r\n        this.privProperties = new PropertyCollection();\r\n        if (!!this.privConnectionMessage.headers[HeaderNames.ConnectionId]) {\r\n            this.privProperties.setProperty(PropertyId.Speech_SessionId, this.privConnectionMessage.headers[HeaderNames.ConnectionId]);\r\n        }\r\n\r\n        Object.keys(this.privConnectionMessage.headers).forEach((header: string): void => {\r\n            this.privProperties.setProperty(header, this.privConnectionMessage.headers[header]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The message path.\r\n     */\r\n    public get path(): string {\r\n        return this.privConnectionMessage.headers[Object.keys(this.privConnectionMessage.headers).find((key: string): boolean => key.toLowerCase() === \"path\".toLowerCase())];\r\n    }\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a text message.\r\n     * See also IsBinaryMessage().\r\n     */\r\n    public get isTextMessage(): boolean {\r\n        return this.privConnectionMessage.messageType === MessageType.Text;\r\n    }\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a binary message.\r\n     * See also GetBinaryMessage().\r\n     */\r\n    public get isBinaryMessage(): boolean {\r\n        return this.privConnectionMessage.messageType === MessageType.Binary;\r\n    }\r\n\r\n    /**\r\n     * Gets the text message payload. Typically the text message content-type is\r\n     * application/json. To determine other content-types use\r\n     * Properties.GetProperty(\"Content-Type\").\r\n     */\r\n    public get TextMessage(): string {\r\n        return this.privConnectionMessage.textBody;\r\n    }\r\n\r\n    /**\r\n     * Gets the binary message payload.\r\n     */\r\n    public get binaryMessage(): ArrayBuffer {\r\n        return this.privConnectionMessage.binaryBody;\r\n    }\r\n\r\n    /**\r\n     * A collection of properties and their values defined for this <see cref=\"ConnectionMessage\"/>.\r\n     * Message headers can be accessed via this collection (e.g. \"Content-Type\").\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Returns a string that represents the connection message.\r\n     */\r\n    public toString(): string {\r\n        return \"\";\r\n    }\r\n}\r\n", "//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport {\r\n    ServiceRecognizerBase,\r\n    SynthesisAdapterBase,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    ConnectionEvent,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionMessageSentEvent,\r\n    IDetachable,\r\n    marshalPromiseToCallbacks,\r\n    ServiceEvent,\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    ConnectionMessageImpl\r\n} from \"./ConnectionMessage.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConnectionMessageEventArgs,\r\n    ConversationTranscriber,\r\n    Recognizer,\r\n    ServiceEventArgs,\r\n    SpeechSynthesizer,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Connection is a proxy class for managing connection to the speech service of the specified Recognizer.\r\n * By default, a Recognizer autonomously manages connection to service when needed.\r\n * The Connection class provides additional methods for users to explicitly open or close a connection and\r\n * to subscribe to connection status changes.\r\n * The use of Connection is optional, and mainly for scenarios where fine tuning of application\r\n * behavior based on connection status is needed. Users can optionally call Open() to manually set up a connection\r\n * in advance before starting recognition on the Recognizer associated with this Connection.\r\n * If the Recognizer needs to connect or disconnect to service, it will\r\n * setup or shutdown the connection independently. In this case the Connection will be notified by change of connection\r\n * status via Connected/Disconnected events.\r\n * Added in version 1.2.1.\r\n */\r\nexport class Connection {\r\n    private privInternalData: ServiceRecognizerBase | SynthesisAdapterBase;\r\n    private privEventListener: IDetachable;\r\n    private privServiceEventListener: IDetachable;\r\n\r\n    /**\r\n     * Gets the Connection instance from the specified recognizer.\r\n     * @param recognizer The recognizer associated with the connection.\r\n     * @return The Connection instance of the recognizer.\r\n     */\r\n    public static fromRecognizer(recognizer: Recognizer | ConversationTranscriber): Connection {\r\n        const recoBase = recognizer.internalData as ServiceRecognizerBase;\r\n        const ret: Connection = new Connection();\r\n\r\n        ret.privInternalData = recoBase;\r\n        ret.setupEvents();\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Gets the Connection instance from the specified synthesizer.\r\n     * @param synthesizer The synthesizer associated with the connection.\r\n     * @return The Connection instance of the synthesizer.\r\n     */\r\n    public static fromSynthesizer(synthesizer: SpeechSynthesizer): Connection {\r\n        const synthBase: SynthesisAdapterBase = synthesizer.internalData as SynthesisAdapterBase;\r\n\r\n        const ret: Connection = new Connection();\r\n\r\n        ret.privInternalData = synthBase;\r\n        ret.setupEvents();\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Starts to set up connection to the service.\r\n     * Users can optionally call openConnection() to manually set up a connection in advance before starting recognition on the\r\n     * Recognizer associated with this Connection. After starting recognition, calling Open() will have no effect\r\n     *\r\n     * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\r\n     * be notified when the connection is established.\r\n     */\r\n    public openConnection(cb?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privInternalData.connect(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Closes the connection the service.\r\n     * Users can optionally call closeConnection() to manually shutdown the connection of the associated Recognizer.\r\n     *\r\n     * If closeConnection() is called during recognition, recognition will fail and cancel with an error.\r\n     */\r\n    public closeConnection(cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.privInternalData instanceof SynthesisAdapterBase) {\r\n            throw new Error(\"Disconnecting a synthesizer's connection is currently not supported\");\r\n        } else {\r\n            marshalPromiseToCallbacks(this.privInternalData.disconnect(), cb, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Appends a parameter in a message to service.\r\n     * Added in version 1.12.1.\r\n     * @param path The path of the network message.\r\n     * @param propertyName Name of the property\r\n     * @param propertyValue Value of the property. This is a json string.\r\n     */\r\n    public setMessageProperty(path: string, propertyName: string, propertyValue: string | object): void {\r\n        Contracts.throwIfNullOrWhitespace(propertyName, \"propertyName\");\r\n\r\n        if (this.privInternalData instanceof ServiceRecognizerBase) {\r\n            if (path.toLowerCase() !== \"speech.context\") {\r\n                throw new Error(\"Only speech.context message property sets are currently supported for recognizer\");\r\n            } else {\r\n                this.privInternalData.speechContext.setSection(propertyName, propertyValue);\r\n            }\r\n        } else if (this.privInternalData instanceof SynthesisAdapterBase) {\r\n            if (path.toLowerCase() !== \"synthesis.context\") {\r\n                throw new Error(\"Only synthesis.context message property sets are currently supported for synthesizer\");\r\n            } else {\r\n                this.privInternalData.synthesisContext.setSection(propertyName, propertyValue);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends a message to the speech service.\r\n     * Added in version 1.13.0.\r\n     * @param path The WebSocket path of the message\r\n     * @param payload The payload of the message. This is a json string or a ArrayBuffer.\r\n     * @param success A callback to indicate success.\r\n     * @param error A callback to indicate an error.\r\n     */\r\n    public sendMessageAsync(path: string, payload: string | ArrayBuffer, success?: () => void, error?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privInternalData.sendNetworkMessage(path, payload), success, error);\r\n    }\r\n\r\n    /**\r\n     * Any message from service that is not being processed by any other top level recognizers.\r\n     *\r\n     * Will be removed in 2.0.\r\n     */\r\n    public receivedServiceMessage: (args: ServiceEventArgs) => void;\r\n\r\n    /**\r\n     * Any message received from the Speech Service.\r\n     */\r\n    public messageReceived: (args: ConnectionMessageEventArgs) => void;\r\n\r\n    /**\r\n     * Any message sent to the Speech Service.\r\n     */\r\n    public messageSent: (args: ConnectionMessageEventArgs) => void;\r\n\r\n    /**\r\n     * The Connected event to indicate that the recognizer is connected to service.\r\n     */\r\n    public connected: (args: ConnectionEventArgs) => void;\r\n\r\n    /**\r\n     * The Disconnected event to indicate that the recognizer is disconnected from service.\r\n     */\r\n    public disconnected: (args: ConnectionEventArgs) => void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     */\r\n    public close(): void {\r\n        /* eslint-disable no-empty */\r\n    }\r\n\r\n    private setupEvents(): void {\r\n        this.privEventListener = this.privInternalData.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionEstablishedEvent\") {\r\n                if (!!this.connected) {\r\n                    this.connected(new ConnectionEventArgs(connectionEvent.connectionId));\r\n                }\r\n            } else if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                if (!!this.disconnected) {\r\n                    this.disconnected(new ConnectionEventArgs(connectionEvent.connectionId));\r\n                }\r\n            } else if (connectionEvent.name === \"ConnectionMessageSentEvent\") {\r\n                if (!!this.messageSent) {\r\n                    this.messageSent(new ConnectionMessageEventArgs(new ConnectionMessageImpl((connectionEvent as ConnectionMessageSentEvent).message)));\r\n                }\r\n            } else if (connectionEvent.name === \"ConnectionMessageReceivedEvent\") {\r\n                if (!!this.messageReceived) {\r\n                    this.messageReceived(new ConnectionMessageEventArgs(new ConnectionMessageImpl((connectionEvent as ConnectionMessageReceivedEvent).message)));\r\n                }\r\n            }\r\n        });\r\n\r\n        this.privServiceEventListener = this.privInternalData.serviceEvents.attach((e: ServiceEvent): void => {\r\n            if (!!this.receivedServiceMessage) {\r\n                this.receivedServiceMessage(new ServiceEventArgs(e.jsonString, e.name));\r\n            }\r\n        });\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    TranslationConnectionFactory,\r\n    TranslationServiceRecognizer\r\n} from \"../common.speech/Exports.js\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Connection } from \"./Connection.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    AutoDetectSourceLanguageConfig,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognitionResult,\r\n    TranslationSynthesisEventArgs\r\n} from \"./Exports.js\";\r\nimport { SpeechTranslationConfig, SpeechTranslationConfigImpl } from \"./SpeechTranslationConfig.js\";\r\n\r\n/**\r\n * Translation recognizer\r\n * @class TranslationRecognizer\r\n */\r\nexport class TranslationRecognizer extends Recognizer {\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member TranslationRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: TranslationRecognizer, event: TranslationRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * The event synthesizing signals that a translation synthesis result is received.\r\n     * @member TranslationRecognizer.prototype.synthesizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesizing: (sender: TranslationRecognizer, event: TranslationSynthesisEventArgs) => void;\r\n\r\n    private privDisposedTranslationRecognizer: boolean;\r\n\r\n    /**\r\n     * Initializes an instance of the TranslationRecognizer.\r\n     * @constructor\r\n     * @param {SpeechTranslationConfig} speechConfig - Set of properties to configure this recognizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\r\n     * @param {IConnectionFactory} connectionFactory - An optional connection factory to use to generate the endpoint URIs, headers to set, etc...\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig, connectionFactory?: IConnectionFactory) {\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, connectionFactory || new TranslationConnectionFactory());\r\n\r\n        this.privDisposedTranslationRecognizer = false;\r\n\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\r\n            Contracts.throwIfNullOrWhitespace(\r\n                this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice),\r\n                PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\r\n        }\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages),\r\n            PropertyId[PropertyId.SpeechServiceConnection_TranslationToLanguages]);\r\n\r\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(\r\n            PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n    }\r\n\r\n    /**\r\n     * TranslationRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechTranslationConfig} speechTranslationConfig - an set of initial properties for this recognizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public static FromConfig(speechTranslationConfig: SpeechTranslationConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): TranslationRecognizer {\r\n        const speechTranslationConfigImpl: SpeechTranslationConfigImpl = speechTranslationConfig as SpeechTranslationConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechTranslationConfigImpl.properties);\r\n        return new TranslationRecognizer(speechTranslationConfig, audioConfig);\r\n    }\r\n\r\n    /**\r\n     * Gets the language name that was set when the recognizer was created.\r\n     * @member TranslationRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} Gets the language name that was set when the recognizer was created.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets target languages for translation that were set when the recognizer was created.\r\n     * The language is specified in BCP-47 format. The translation will provide translated text for each of language.\r\n     * @member TranslationRecognizer.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @returns {string[]} Gets target languages for translation that were set when the recognizer was created.\r\n     */\r\n    public get targetLanguages(): string[] {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n    }\r\n\r\n    /**\r\n     * Gets the name of output voice.\r\n     * @member TranslationRecognizer.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} the name of output voice.\r\n     */\r\n    public get voiceName(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this TranslationRecognizer.\r\n     * @member TranslationRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this TranslationRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - Authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, and stops after the first utterance is recognized.\r\n     * The task returns the translation text as result.\r\n     * Note: recognizeOnceAsync returns when the first utterance has been recognized, so it is suitable only\r\n     * for single shot recognition like command or query. For long-running recognition,\r\n     * use startContinuousRecognitionAsync() instead.\r\n     * @member TranslationRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the result when the translation has completed.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: TranslationRecognitionResult) => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive translation results.\r\n     * @member TranslationRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous recognition and translation.\r\n     * @member TranslationRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * dynamically remove a language from list of target language\r\n     * (can be used while recognition is ongoing)\r\n     * @member TranslationRecognizer.prototype.removeTargetLanguage\r\n     * @function\r\n     * @param lang - language to be removed\r\n     * @public\r\n     */\r\n    public removeTargetLanguage(lang: string): void {\r\n        Contracts.throwIfNullOrUndefined(lang, \"language to be removed\");\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            const languages: string[] = this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n            const index: number = languages.indexOf(lang);\r\n            if (index > -1) {\r\n                languages.splice(index, 1);\r\n                this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n                this.updateLanguages(languages);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * dynamically add a language to list of target language\r\n     * (can be used while recognition is ongoing)\r\n     * @member TranslationRecognizer.prototype.addTargetLanguage\r\n     * @function\r\n     * @param lang - language to be added\r\n     * @public\r\n     */\r\n    public addTargetLanguage(lang: string): void {\r\n        Contracts.throwIfNullOrUndefined(lang, \"language to be added\");\r\n        let languages: string[] = [];\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            languages = this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n            if (!languages.includes(lang)) {\r\n                languages.push(lang);\r\n                this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n            }\r\n        } else {\r\n            this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, lang);\r\n            languages = [lang];\r\n        }\r\n        this.updateLanguages(languages);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member TranslationRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * handles ConnectionEstablishedEvent for conversation translation scenarios.\r\n     * @member TranslationRecognizer.prototype.onConnection\r\n     * @function\r\n     * @public\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public onConnection(): void { }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedTranslationRecognizer) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposedTranslationRecognizer = true;\r\n\r\n        if (disposing) {\r\n            await this.implRecognizerStop();\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new TranslationServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n\r\n    private updateLanguages(languages: string[]): void {\r\n        const conn: Connection = Connection.fromRecognizer(this);\r\n        if (!!conn) {\r\n            conn.setMessageProperty(\"speech.context\", \"translationcontext\", {to: languages});\r\n            conn.sendMessageAsync(\"event\", JSON.stringify({\r\n                id: \"translation\",\r\n                name: \"updateLanguage\",\r\n                to: languages\r\n                }));\r\n        }\r\n    }\r\n\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection } from \"./Exports.js\";\r\n\r\n/**\r\n * Represents collection of parameters and their values.\r\n * @class Translations\r\n */\r\nexport class Translations {\r\n    // Use an PropertyCollection internally, just wrapping it to hide the | enum syntax it has.\r\n    private privMap: PropertyCollection = new PropertyCollection();\r\n\r\n    /**\r\n     * Get the languages in the object in a String array.\r\n     * @member Translations.prototype.languages\r\n     * @function\r\n     * @public\r\n     * @returns {string[]} languages in translations object.\r\n     */\r\n    public get languages(): string[] {\r\n        return this.privMap.keys;\r\n    }\r\n\r\n    /**\r\n     * Returns the parameter value in type String. The parameter must have the same type as String.\r\n     * Currently only String, int and bool are allowed.\r\n     * If the name is not available, the specified defaultValue is returned.\r\n     * @member Translations.prototype.get\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} def - The default value which is returned if the parameter is not available in the collection.\r\n     * @returns {string} value of the parameter.\r\n     */\r\n    public get(key: string, def?: string): string {\r\n        return this.privMap.getProperty(key, def);\r\n    }\r\n\r\n    /**\r\n     * Sets the String value of the parameter specified by name.\r\n     * @member Translations.prototype.set\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} value - The value of the parameter.\r\n     */\r\n    public set(key: string, value: string): void {\r\n        this.privMap.setProperty(key, value);\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the possible reasons a recognition result might not be recognized.\r\n * @class NoMatchReason\r\n */\r\nexport enum NoMatchReason {\r\n\r\n    /**\r\n     * Indicates that speech was detected, but not recognized.\r\n     * @member NoMatchReason.NotRecognized\r\n     */\r\n    NotRecognized,\r\n\r\n    /**\r\n     * Indicates that the start of the audio stream contained only silence,\r\n     * and the service timed out waiting for speech.\r\n     * @member NoMatchReason.InitialSilenceTimeout\r\n     */\r\n    InitialSilenceTimeout,\r\n\r\n    /**\r\n     * Indicates that the start of the audio stream contained only noise,\r\n     * and the service timed out waiting for speech.\r\n     * @member NoMatchReason.InitialBabbleTimeout\r\n     */\r\n    InitialBabbleTimeout,\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognitionStatus, SimpleSpeechPhrase } from \"../../src/common.speech/Exports.js\";\r\nimport { IntentRecognitionResult, NoMatchReason, SpeechRecognitionResult, TranslationRecognitionResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Contains detailed information for NoMatch recognition results.\r\n * @class NoMatchDetails\r\n */\r\nexport class NoMatchDetails {\r\n    private privReason: NoMatchReason;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {NoMatchReason} reason - The no-match reason.\r\n     */\r\n    private constructor(reason: NoMatchReason) {\r\n        this.privReason = reason;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of NoMatchDetails object for the NoMatch SpeechRecognitionResults.\r\n     * @member NoMatchDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {SpeechRecognitionResult | IntentRecognitionResult | TranslationRecognitionResult}\r\n     * result - The recognition result that was not recognized.\r\n     * @returns {NoMatchDetails} The no match details object being created.\r\n     */\r\n    public static fromResult(result: SpeechRecognitionResult | IntentRecognitionResult | TranslationRecognitionResult): NoMatchDetails {\r\n        const simpleSpeech: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(result.json);\r\n\r\n        let reason: NoMatchReason = NoMatchReason.NotRecognized;\r\n\r\n        switch (simpleSpeech.RecognitionStatus) {\r\n            case RecognitionStatus.BabbleTimeout:\r\n                reason = NoMatchReason.InitialBabbleTimeout;\r\n                break;\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n                reason = NoMatchReason.InitialSilenceTimeout;\r\n                break;\r\n            default:\r\n                reason = NoMatchReason.NotRecognized;\r\n                break;\r\n        }\r\n\r\n        return new NoMatchDetails(reason);\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member NoMatchDetails.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {NoMatchReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): NoMatchReason {\r\n        return this.privReason;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { CancellationErrorCode, CancellationReason, TranslationRecognitionResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Define payload of speech recognition canceled result events.\r\n * @class TranslationRecognitionCanceledEventArgs\r\n */\r\nexport class TranslationRecognitionCanceledEventArgs {\r\n    private privResult: TranslationRecognitionResult;\r\n    private privSessionId: string;\r\n    private privCancelReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} sessionid - The session id.\r\n     * @param {CancellationReason} cancellationReason - The cancellation reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {TranslationRecognitionResult} result - The result.\r\n     */\r\n    public constructor(\r\n        sessionid: string,\r\n        cancellationReason: CancellationReason,\r\n        errorDetails: string,\r\n        errorCode: CancellationErrorCode,\r\n        result: TranslationRecognitionResult) {\r\n        this.privCancelReason = cancellationReason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privResult = result;\r\n        this.privSessionId = sessionid;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {TranslationRecognitionResult} the recognition result.\r\n     */\r\n    public get result(): TranslationRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n\r\n    /**\r\n     * Specifies the session identifier.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.sessionId\r\n     * @function\r\n     * @public\r\n     * @returns {string} the session identifier.\r\n     */\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privCancelReason;\r\n    }\r\n\r\n    /**\r\n     * The error code in case of an unsuccessful recognition.\r\n     * Added in version 1.1.0.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    public get errorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { CancellationEventArgs } from \"./CancellationEventArgs.js\";\r\nimport { CancellationErrorCode, CancellationReason, IntentRecognitionEventArgs, IntentRecognitionResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Define payload of intent recognition canceled result events.\r\n * @class IntentRecognitionCanceledEventArgs\r\n */\r\nexport class IntentRecognitionCanceledEventArgs extends IntentRecognitionEventArgs implements CancellationEventArgs {\r\n    private privReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {CancellationReason} result - The result of the intent recognition.\r\n     * @param {string} offset - The offset.\r\n     * @param {IntentRecognitionResult} sessionId - The session id.\r\n     */\r\n    public constructor(\r\n        reason: CancellationReason,\r\n        errorDetails: string,\r\n        errorCode: CancellationErrorCode,\r\n        result?: IntentRecognitionResult,\r\n        offset?: number,\r\n        sessionId?: string) {\r\n        super(result, offset, sessionId);\r\n\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member IntentRecognitionCanceledEventArgs.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * The error code in case of an unsuccessful recognition.\r\n     * Added in version 1.1.0.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    public get errorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member IntentRecognitionCanceledEventArgs.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Contains detailed information about why a result was canceled.\r\n * @class CancellationDetailsBase\r\n */\r\nexport class CancellationDetailsBase {\r\n    private privReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {CancellationReason} reason - The cancellation reason.\r\n     * @param {string} errorDetails - The error details, if provided.\r\n     */\r\n    protected constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member CancellationDetailsBase.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member CancellationDetailsBase.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    /**\r\n     * The error code in case of an unsuccessful recognition.\r\n     * Added in version 1.1.0.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    public get ErrorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { CancellationErrorCodePropertyName, EnumTranslation, SimpleSpeechPhrase } from \"../common.speech/Exports.js\";\r\nimport { CancellationDetailsBase } from \"./CancellationDetailsBase.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    RecognitionResult,\r\n    SpeechSynthesisResult\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Contains detailed information about why a result was canceled.\r\n * @class CancellationDetails\r\n */\r\nexport class CancellationDetails extends CancellationDetailsBase {\r\n\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of CancellationDetails object for the canceled RecognitionResult.\r\n     * @member CancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {RecognitionResult | SpeechSynthesisResult} result - The result that was canceled.\r\n     * @returns {CancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: RecognitionResult | SpeechSynthesisResult): CancellationDetails {\r\n        let reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (result instanceof RecognitionResult && !!result.json) {\r\n            const simpleSpeech: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(result.json);\r\n            reason = EnumTranslation.implTranslateCancelResult(simpleSpeech.RecognitionStatus);\r\n        }\r\n\r\n        if (!!result.properties) {\r\n            errorCode = CancellationErrorCode[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError]) as keyof typeof CancellationErrorCode];\r\n        }\r\n\r\n        return new CancellationDetails(reason, result.errorDetails || EnumTranslation.implTranslateErrorDetails(errorCode), errorCode);\r\n    }\r\n\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines error code in case that CancellationReason is Error.\r\n * Added in version 1.1.0.\r\n */\r\nexport enum CancellationErrorCode {\r\n    /**\r\n     * Indicates that no error occurred during speech recognition.\r\n     */\r\n    NoError,\r\n\r\n    /**\r\n     * Indicates an authentication error.\r\n     */\r\n    AuthenticationFailure,\r\n\r\n    /**\r\n     * Indicates that one or more recognition parameters are invalid.\r\n     */\r\n    BadRequestParameters,\r\n\r\n    /**\r\n     * Indicates that the number of parallel requests exceeded the number of allowed\r\n     * concurrent transcriptions for the subscription.\r\n     */\r\n    TooManyRequests,\r\n\r\n    /**\r\n     * Indicates a connection error.\r\n     */\r\n    ConnectionFailure,\r\n\r\n    /**\r\n     * Indicates a time-out error when waiting for response from service.\r\n     */\r\n    ServiceTimeout,\r\n\r\n    /**\r\n     * Indicates that an error is returned by the service.\r\n     */\r\n    ServiceError,\r\n\r\n    /**\r\n     * Indicates an unexpected runtime error.\r\n     */\r\n    RuntimeError,\r\n\r\n    /**\r\n     * Indicates an quota overrun on existing key.\r\n     */\r\n    Forbidden,\r\n}\r\n", "//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport { SessionEventArgs } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines payload for connection events like Connected/Disconnected.\r\n * Added in version 1.2.0\r\n */\r\nexport class ConnectionEventArgs extends SessionEventArgs {\r\n}\r\n", "//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport { SessionEventArgs } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines payload for any Service message event\r\n * Added in version 1.9.0\r\n */\r\n\r\nexport class ServiceEventArgs extends SessionEventArgs {\r\n    private privJsonResult: string;\r\n    private privEventName: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} json - json payload of the USP message.\r\n     */\r\n    public constructor(json: string,  name: string, sessionId?: string) {\r\n        super(sessionId);\r\n        this.privJsonResult = json;\r\n        this.privEventName = name;\r\n    }\r\n\r\n    public get jsonString(): string {\r\n        return this.privJsonResult;\r\n    }\r\n\r\n    public get eventName(): string {\r\n        return this.privEventName;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    DynamicGrammarBuilder,\r\n    ServiceRecognizerBase,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    ConversationTranscriber,\r\n    MeetingTranscriber,\r\n    Recognizer\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Allows additions of new phrases to improve speech recognition.\r\n *\r\n * Phrases added to the recognizer are effective at the start of the next recognition, or the next time the SpeechSDK must reconnect\r\n * to the speech service.\r\n */\r\nexport class PhraseListGrammar {\r\n    private privGrammerBuilder: DynamicGrammarBuilder;\r\n\r\n    private constructor(recogBase: ServiceRecognizerBase) {\r\n        this.privGrammerBuilder = recogBase.dynamicGrammar;\r\n    }\r\n\r\n    /**\r\n     * Creates a PhraseListGrammar from a given speech recognizer. Will accept any recognizer that derives from @class Recognizer.\r\n     * @param recognizer The recognizer to add phrase lists to.\r\n     */\r\n    public static fromRecognizer(recognizer: Recognizer | ConversationTranscriber | MeetingTranscriber): PhraseListGrammar {\r\n        const recoBase = recognizer.internalData as ServiceRecognizerBase;\r\n        return new PhraseListGrammar(recoBase);\r\n    }\r\n\r\n    /**\r\n     * Adds a single phrase to the current recognizer.\r\n     * @param phrase Phrase to add.\r\n     */\r\n    public addPhrase(phrase: string): void {\r\n        this.privGrammerBuilder.addPhrase(phrase);\r\n    }\r\n\r\n    /**\r\n     * Adds multiple phrases to the current recognizer.\r\n     * @param phrases Array of phrases to add.\r\n     */\r\n    public addPhrases(phrases: string[]): void {\r\n        this.privGrammerBuilder.addPhrase(phrases);\r\n    }\r\n\r\n    /**\r\n     * Clears all phrases added to the current recognizer.\r\n     */\r\n    public clear(): void {\r\n        this.privGrammerBuilder.clearPhrases();\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { PropertyCollection, PropertyId, ServicePropertyChannel, SpeechConfigImpl } from \"./Exports.js\";\r\nimport { OutputFormat } from \"./OutputFormat.js\";\r\n\r\n/**\r\n * Class that defines base configurations for dialog service connector\r\n * @class DialogServiceConfig\r\n */\r\nexport abstract class DialogServiceConfig {\r\n\r\n    /**\r\n     * Creates an instance of DialogService config.\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member DialogServiceConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string | PropertyId, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member DialogServiceConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string | PropertyId, def?: string): string;\r\n\r\n    /**\r\n     * @member DialogServiceConfig.prototype.setServiceProperty\r\n     * @function\r\n     * @public\r\n     * @param {name} The name of the property.\r\n     * @param {value} Value to set.\r\n     * @param {channel} The channel used to pass the specified property to service.\r\n     * @summary Sets a property value that will be passed to service using the specified channel.\r\n     */\r\n    public abstract setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server.\r\n     * @param proxyPort The port number of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param porxyPort The port number of the proxy server.\r\n     * @param proxyUserName The user name of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n\r\n    /**\r\n     * Returns the configured language.\r\n     * @member DialogServiceConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get speechRecognitionLanguage(): string;\r\n\r\n    /**\r\n     * Gets/Sets the input language.\r\n     * @member DialogServiceConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language to use for recognition.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Sets the corresponding backend application identifier.\r\n     * @member DialogServiceConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to set.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public set applicationId(value: string) { }\r\n\r\n    public static get DialogTypes(): { BotFramework: string; CustomCommands: string } {\r\n        return {\r\n            BotFramework: \"bot_framework\",\r\n            CustomCommands: \"custom_commands\"\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Dialog Service configuration.\r\n * @class DialogServiceConfigImpl\r\n */\r\nexport class DialogServiceConfigImpl extends DialogServiceConfig {\r\n\r\n    private privSpeechConfig: SpeechConfigImpl;\r\n\r\n    /**\r\n     * Creates an instance of dialogService config.\r\n     */\r\n    public constructor() {\r\n        super();\r\n        this.privSpeechConfig = new SpeechConfigImpl();\r\n    }\r\n\r\n    /**\r\n     * Provides access to custom properties.\r\n     * @member DialogServiceConfigImpl.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The properties.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privSpeechConfig.properties;\r\n    }\r\n\r\n    /**\r\n     * Gets the speech recognition language.\r\n     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechConfig.speechRecognitionLanguage;\r\n    }\r\n\r\n    /**\r\n     * Sets the speech recognition language.\r\n     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language to set.\r\n     */\r\n    public set speechRecognitionLanguage(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.privSpeechConfig.speechRecognitionLanguage = value;\r\n    }\r\n\r\n    public get outputFormat(): OutputFormat {\r\n        return this.privSpeechConfig.outputFormat;\r\n    }\r\n\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privSpeechConfig.outputFormat = value;\r\n    }\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member DialogServiceConfigImpl.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {PropertyId | string} name - The property to set.\r\n     * @param {string} value - The value.\r\n     */\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        this.privSpeechConfig.setProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member DialogServiceConfigImpl.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {PropertyId | string} name - The property to get.\r\n     * @param {string} def - The default value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public getProperty(name: string | PropertyId, def?: string): string {\r\n        void def;\r\n        return this.privSpeechConfig.getProperty(name);\r\n    }\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param proxyPort The port number of the proxy server.\r\n     * @param proxyUserName The user name of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName?: string, proxyPassword?: string): void {\r\n        this.setProperty(PropertyId.SpeechServiceConnection_ProxyHostName, proxyHostName);\r\n        this.setProperty(PropertyId.SpeechServiceConnection_ProxyPort, `${proxyPort}`);\r\n        if (proxyUserName) {\r\n            this.setProperty(PropertyId.SpeechServiceConnection_ProxyUserName, proxyUserName);\r\n        }\r\n        if (proxyPassword) {\r\n            this.setProperty(PropertyId.SpeechServiceConnection_ProxyPassword, proxyPassword);\r\n        }\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void {\r\n        void channel;\r\n        this.privSpeechConfig.setServiceProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member DialogServiceConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig.js\";\r\nimport { PropertyId } from \"./Exports.js\";\r\n\r\n/**\r\n * Class that defines configurations for the dialog service connector object for using a Bot Framework backend.\r\n * @class BotFrameworkConfig\r\n */\r\nexport class BotFrameworkConfig extends DialogServiceConfigImpl {\r\n\r\n    /**\r\n     * Creates an instance of BotFrameworkConfig.\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates a bot framework configuration instance with the provided subscription information.\r\n     * @member BotFrameworkConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param subscription Subscription key associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\r\n     * resource name.\r\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\r\n     */\r\n    public static fromSubscription(subscription: string, region: string, botId?: string): BotFrameworkConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n\r\n        if (botId) {\r\n            botFrameworkConfig.setProperty(PropertyId.Conversation_ApplicationId, botId);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates a bot framework configuration instance for the specified authorization token and region.\r\n     * Note: The caller must ensure that an authorization token is valid. Before an authorization token expires, the\r\n     * caller must refresh it by setting the authorizationToken property on the corresponding\r\n     * DialogServiceConnector instance created with this config. The contents of configuration objects are copied\r\n     * when connectors are created, so setting authorizationToken on a DialogServiceConnector will not update the\r\n     * original configuration's authorization token. Create a new configuration instance or set the\r\n     * SpeechServiceAuthorization_Token property to update an existing instance if it will be used to create\r\n     * further DialogServiceConnectors.\r\n     * @member BotFrameworkConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param authorizationToken The authorization token associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\r\n     * resource name.\r\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\r\n     */\r\n    public static fromAuthorizationToken(\r\n        authorizationToken: string, region: string, botId?: string\r\n    ): BotFrameworkConfig {\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n\r\n        if (botId) {\r\n            botFrameworkConfig.setProperty(PropertyId.Conversation_ApplicationId, botId);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of a BotFrameworkConfig.\r\n     * This method is intended only for users who use a non-default service host. The standard resource path will be\r\n     * assumed. For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n     * Note: To use an authorization token with fromHost, use fromHost(URL) and then set the AuthorizationToken\r\n     * property on the created BotFrameworkConfig instance.\r\n     * Note: Added in version 1.15.0.\r\n     * @member BotFrameworkConfig.fromHost\r\n     * @function\r\n     * @public\r\n     * @param {URL | string} host - If a URL is provided, the fully-qualified host with protocol (e.g.\r\n     * wss://your.host.com:1234) will be used. If a string is provided, it will be embedded in\r\n     * wss://{host}.convai.speech.azure.us.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization\r\n     * token must be set.\r\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\r\n     * resource name.\r\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\r\n     */\r\n    public static fromHost(\r\n        host: URL | string,\r\n        subscriptionKey?: string,\r\n        botId?: string): BotFrameworkConfig {\r\n\r\n        void botId;\r\n        Contracts.throwIfNullOrUndefined(host, \"host\");\r\n        const resolvedHost: URL = host instanceof URL ? host : new URL(`wss://${host}.convai.speech.azure.us`);\r\n        Contracts.throwIfNullOrUndefined(resolvedHost, \"resolvedHost\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Host, resolvedHost.toString());\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of a BotFrameworkConfig.\r\n     * This method is intended only for users who use a non-standard service endpoint or parameters.\r\n     * Note: The query parameters specified in the endpoint URL are not changed, even if they are set by any other APIs.\r\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n     * fromEndpoint method, and then set authorizationToken=\"token\" on the created BotFrameworkConfig instance to\r\n     * use the authorization token.\r\n     * Note: Added in version 1.15.0.\r\n     * @member BotFrameworkConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization\r\n     * token must be set.\r\n     * @returns {BotFrameworkConfig} - A new bot framework configuration instance using the provided endpoint.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey?: string): BotFrameworkConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.toString());\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig.js\";\r\nimport { PropertyId } from \"./Exports.js\";\r\n\r\n/**\r\n * Class that defines configurations for the dialog service connector object for using a CustomCommands backend.\r\n * @class CustomCommandsConfig\r\n */\r\nexport class CustomCommandsConfig extends DialogServiceConfigImpl {\r\n\r\n    /**\r\n     * Creates an instance of CustomCommandsConfig.\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the bot framework config with the specified subscription and region.\r\n     * @member CustomCommandsConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param applicationId Speech Commands application id.\r\n     * @param subscription Subscription key associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {CustomCommandsConfig} A new bot framework config.\r\n     */\r\n    public static fromSubscription(applicationId: string, subscription: string, region: string): CustomCommandsConfig {\r\n        Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\r\n        Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const customCommandsConfig: CustomCommandsConfig = new DialogServiceConfigImpl();\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.CustomCommands);\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return customCommandsConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the bot framework config with the specified Speech Commands application id, authorization token and region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * As configuration values are copied when creating a new recognizer, the new token value will not apply to recognizers that have already been created.\r\n     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member CustomCommandsConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param applicationId Speech Commands application id.\r\n     * @param authorizationToken The authorization token associated with the application.\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {CustomCommandsConfig} A new speech commands config.\r\n     */\r\n    public static fromAuthorizationToken(applicationId: string, authorizationToken: string, region: string): CustomCommandsConfig {\r\n        Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const customCommandsConfig: CustomCommandsConfig = new DialogServiceConfigImpl();\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.CustomCommands);\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return customCommandsConfig;\r\n    }\r\n\r\n    /**\r\n     * Sets the corresponding backend application identifier.\r\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to set.\r\n     */\r\n    public set applicationId(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.setProperty(PropertyId.Conversation_ApplicationId, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the corresponding backend application identifier.\r\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to get.\r\n     */\r\n    public get applicationId(): string {\r\n        return this.getProperty(PropertyId.Conversation_ApplicationId);\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class QueryParameterNames {\r\n    public static BotId: string = \"botid\";\r\n    public static CustomSpeechDeploymentId: string = \"cid\";\r\n    public static CustomVoiceDeploymentId: string = \"deploymentId\";\r\n    public static EnableAudioLogging: string = \"storeAudio\";\r\n    public static EnableLanguageId: string = \"lidEnabled\";\r\n    public static EnableWordLevelTimestamps: string = \"wordLevelTimestamps\";\r\n    public static EndSilenceTimeoutMs: string = \"endSilenceTimeoutMs\";\r\n    public static SegmentationSilenceTimeoutMs: string = \"segmentationSilenceTimeoutMs\";\r\n    public static Format: string = \"format\";\r\n    public static InitialSilenceTimeoutMs: string = \"initialSilenceTimeoutMs\";\r\n    public static Language: string = \"language\";\r\n    public static Profanity: string = \"profanity\";\r\n    public static RequestBotStatusMessages: string = \"enableBotMessageStatus\";\r\n    public static StableIntermediateThreshold: string = \"stableIntermediateThreshold\";\r\n    public static StableTranslation: string = \"stableTranslation\";\r\n    public static TestHooks: string = \"testhooks\";\r\n    public static Postprocessing: string = \"postprocessing\";\r\n    public static CtsMeetingId: string = \"meetingId\";\r\n    public static CtsDeviceId: string = \"deviceId\";\r\n    public static CtsIsParticipant: string = \"isParticipant\";\r\n    public static EnableAvatar: string = \"enableTalkingAvatar\";\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ServicePropertiesPropertyName,\r\n} from \"../common.speech/Exports.js\";\r\nimport { IConnection, IStringDictionary } from \"../common/Exports.js\";\r\nimport { PropertyId } from \"../sdk/Exports.js\";\r\nimport { AuthInfo, IConnectionFactory, RecognizerConfig } from \"./Exports.js\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames.js\";\r\n\r\nexport abstract class ConnectionFactoryBase implements IConnectionFactory {\r\n\r\n    public static getHostSuffix(region: string): string {\r\n        if (!!region) {\r\n            if (region.toLowerCase().startsWith(\"china\")) {\r\n                return \".azure.cn\";\r\n            }\r\n            if (region.toLowerCase().startsWith(\"usgov\")) {\r\n                return \".azure.us\";\r\n            }\r\n        }\r\n        return \".microsoft.com\";\r\n    }\r\n\r\n    public abstract create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection;\r\n\r\n    protected setCommonUrlParams(\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        const propertyIdToParameterMap: Map<number, string> = new Map([\r\n            [PropertyId.Speech_SegmentationSilenceTimeoutMs, QueryParameterNames.SegmentationSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_EnableAudioLogging, QueryParameterNames.EnableAudioLogging],\r\n            [PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs, QueryParameterNames.EndSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs, QueryParameterNames.InitialSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceResponse_PostProcessingOption, QueryParameterNames.Postprocessing],\r\n            [PropertyId.SpeechServiceResponse_ProfanityOption, QueryParameterNames.Profanity],\r\n            [PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, QueryParameterNames.EnableWordLevelTimestamps],\r\n            [PropertyId.SpeechServiceResponse_StablePartialResultThreshold, QueryParameterNames.StableIntermediateThreshold],\r\n        ]);\r\n\r\n        propertyIdToParameterMap.forEach((parameterName: string, propertyId: PropertyId): void => {\r\n            this.setUrlParameter(propertyId, parameterName, config, queryParams, endpoint);\r\n        });\r\n\r\n\r\n        const serviceProperties: IStringDictionary<string> = JSON.parse(config.parameters.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        Object.keys(serviceProperties).forEach((value: string): void => {\r\n            queryParams[value] = serviceProperties[value];\r\n        });\r\n    }\r\n\r\n    protected setUrlParameter(\r\n        propId: PropertyId,\r\n        parameterName: string,\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        const value: string = config.parameters.getProperty(propId, undefined);\r\n\r\n        // FIXME: The .search() check will incorrectly match parameter name anywhere in the string\r\n        //        including e.g. the path portion, or even as a substring of other query parameters\r\n        if (value && (!endpoint || endpoint.search(parameterName) === -1)) {\r\n            queryParams[parameterName] = value.toLocaleLowerCase();\r\n        }\r\n    }\r\n\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport { OutputFormatPropertyName } from \"../common.speech/Exports.js\";\r\nimport { IConnection, IStringDictionary } from \"../common/Exports.js\";\r\nimport { DialogServiceConfig, OutputFormat, PropertyId } from \"../sdk/Exports.js\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase.js\";\r\nimport { AuthInfo, RecognizerConfig, WebsocketMessageFormatter } from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames.js\";\r\n\r\nexport class DialogConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private static readonly ApiKey: string = \"api\";\r\n    private static readonly BaseUrl: string = \"convai.speech\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        const applicationId: string = config.parameters.getProperty(PropertyId.Conversation_ApplicationId, \"\");\r\n        const dialogType: string = config.parameters.getProperty(PropertyId.Conversation_DialogType);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-US\");\r\n        const requestTurnStatus: string = config.parameters.getProperty(PropertyId.Conversation_Request_Bot_Status_Messages, \"true\");\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        queryParams[HeaderNames.ConnectionId] = connectionId;\r\n        queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n        queryParams[QueryParameterNames.Language] = language;\r\n        queryParams[QueryParameterNames.RequestBotStatusMessages] = requestTurnStatus;\r\n        if (applicationId) {\r\n            queryParams[QueryParameterNames.BotId] = applicationId;\r\n            if (dialogType === DialogServiceConfig.DialogTypes.CustomCommands) {\r\n                queryParams[HeaderNames.CustomCommandsAppId] = applicationId;\r\n            }\r\n        }\r\n\r\n        const resourceInfix: string =\r\n            dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"commands/\"\r\n            : \"\";\r\n        const version: string =\r\n            dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"v1\"\r\n            : dialogType === DialogServiceConfig.DialogTypes.BotFramework ? \"v3\"\r\n            : \"v0\";\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (authInfo.token != null && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n\r\n        // The URL used for connection is chosen in a priority order of specification:\r\n        //  1. If a custom endpoint is provided, that URL is used verbatim.\r\n        //  2. If a custom host is provided (e.g. \"wss://my.custom.endpoint.com:1123\"), a URL is constructed from it.\r\n        //  3. If no custom connection details are provided, a URL is constructed from default values.\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, \"\");\r\n        if (!endpoint) {\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            const host: string = config.parameters.getProperty(\r\n                PropertyId.SpeechServiceConnection_Host,\r\n                `wss://${region}.${DialogConnectionFactory.BaseUrl}${hostSuffix}`);\r\n            const standardizedHost: string = host.endsWith(\"/\") ? host : host + \"/\";\r\n            endpoint = `${standardizedHost}${resourceInfix}${DialogConnectionFactory.ApiKey}/${version}`;\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { DialogConnectionFactory } from \"../common.speech/DialogConnectorFactory.js\";\r\nimport {\r\n    DialogServiceAdapter,\r\n    IAgentConfig,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    Deferred,\r\n    marshalPromiseToCallbacks\r\n} from \"../common/Exports.js\";\r\nimport { ActivityReceivedEventArgs } from \"./ActivityReceivedEventArgs.js\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig.js\";\r\nimport {\r\n    AudioConfig,\r\n    PropertyCollection,\r\n    Recognizer,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult\r\n} from \"./Exports.js\";\r\nimport { PropertyId } from \"./PropertyId.js\";\r\nimport { TurnStatusReceivedEventArgs } from \"./TurnStatusReceivedEventArgs.js\";\r\n\r\n/**\r\n * Dialog Service Connector\r\n * @class DialogServiceConnector\r\n */\r\nexport class DialogServiceConnector extends Recognizer {\r\n    private privIsDisposed: boolean;\r\n    private isTurnComplete: boolean;\r\n\r\n    /**\r\n     * Initializes an instance of the DialogServiceConnector.\r\n     * @constructor\r\n     * @param {DialogServiceConfig} dialogConfig - Set of properties to configure this recognizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\r\n     */\r\n    public constructor(dialogConfig: DialogServiceConfig, audioConfig?: AudioConfig) {\r\n        const dialogServiceConfigImpl = dialogConfig as DialogServiceConfigImpl;\r\n        Contracts.throwIfNull(dialogConfig, \"dialogConfig\");\r\n\r\n        super(audioConfig, dialogServiceConfigImpl.properties, new DialogConnectionFactory());\r\n\r\n        this.isTurnComplete = true;\r\n        this.privIsDisposed = false;\r\n        this.privProperties = dialogServiceConfigImpl.properties.clone();\r\n\r\n        const agentConfig = this.buildAgentConfig();\r\n        this.privReco.agentConfig.set(agentConfig);\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member DialogServiceConnector.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: DialogServiceConnector, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member DialogServiceConfig.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: DialogServiceConnector, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member DialogServiceConnector.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: DialogServiceConnector, event: SpeechRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * The event activityReceived signals that an activity has been received.\r\n     * @member DialogServiceConnector.prototype.activityReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public activityReceived: (sender: DialogServiceConnector, event: ActivityReceivedEventArgs) => void;\r\n\r\n    /**\r\n     * The event turnStatusReceived signals that a turn status message has been received. These messages are\r\n     * associated with both an interaction and a conversation. They are used to notify the client in the event\r\n     * of an interaction failure with the dialog backend, e.g. in the event of a network issue, timeout, crash,\r\n     * or other problem.\r\n     * @member DialogServiceConnector.prototype.turnStatusReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public turnStatusReceived: (sender: DialogServiceConnector, event: TurnStatusReceivedEventArgs) => void;\r\n\r\n    /**\r\n     * Starts a connection to the service.\r\n     * Users can optionally call connect() to manually set up a connection in advance, before starting interactions.\r\n     *\r\n     * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\r\n     * be notified when the connection is established.\r\n     * @member DialogServiceConnector.prototype.connect\r\n     * @function\r\n     * @public\r\n     */\r\n    public connect(cb?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privReco.connect(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Closes the connection the service.\r\n     * Users can optionally call disconnect() to manually shutdown the connection of the associated DialogServiceConnector.\r\n     *\r\n     * If disconnect() is called during a recognition, recognition will fail and cancel with an error.\r\n     */\r\n    public disconnect(cb?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privReco.disconnect(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member DialogServiceConnector.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Sets the authorization token used to communicate with the service.\r\n     * @member DialogServiceConnector.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this DialogServiceConnector.\r\n     * @member DialogServiceConnector.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this DialogServiceConnector.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /** Gets the template for the activity generated by service from speech.\r\n     * Properties from the template will be stamped on the generated activity.\r\n     * It can be empty\r\n     */\r\n    public get speechActivityTemplate(): string {\r\n        return this.properties.getProperty(PropertyId.Conversation_Speech_Activity_Template);\r\n    }\r\n\r\n    /** Sets the template for the activity generated by service from speech.\r\n     * Properties from the template will be stamped on the generated activity.\r\n     * It can be null or empty.\r\n     * Note: it has to be a valid Json object.\r\n     */\r\n    public set speechActivityTemplate(speechActivityTemplate: string) {\r\n        this.properties.setProperty(PropertyId.Conversation_Speech_Activity_Template, speechActivityTemplate);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and stops after the first utterance is recognized.\r\n     * @member DialogServiceConnector.prototype.listenOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the result when the reco has completed.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public listenOnceAsync(cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\r\n        if (this.isTurnComplete) {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            const callbackHolder = async (): Promise<SpeechRecognitionResult> => {\r\n                await this.privReco.connect();\r\n                await this.implRecognizerStop();\r\n                this.isTurnComplete = false;\r\n\r\n                const ret: Deferred<SpeechRecognitionResult> = new Deferred<SpeechRecognitionResult>();\r\n                await this.privReco.recognize(RecognitionMode.Conversation, ret.resolve, ret.reject);\r\n\r\n                const e: SpeechRecognitionResult = await ret.promise;\r\n                await this.implRecognizerStop();\r\n\r\n                return e;\r\n            };\r\n\r\n            const retPromise: Promise<SpeechRecognitionResult> = callbackHolder();\r\n\r\n            retPromise.catch((): void => {\r\n                // Destroy the recognizer.\r\n                // We've done all we can here.\r\n                // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                this.dispose(true).catch((): void => { });\r\n            });\r\n\r\n            marshalPromiseToCallbacks(retPromise.finally((): void => {\r\n                this.isTurnComplete = true;\r\n            }), cb, err);\r\n        }\r\n    }\r\n\r\n    public sendActivityAsync(activity: string, cb?: () => void, errCb?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks((this.privReco as DialogServiceAdapter).sendMessage(activity), cb, errCb);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member DialogServiceConnector.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privIsDisposed);\r\n\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, err);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privIsDisposed = true;\r\n            await this.implRecognizerStop();\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const audioSource: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new DialogServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\r\n    }\r\n\r\n    private buildAgentConfig(): IAgentConfig {\r\n        const communicationType = this.properties.getProperty(\"Conversation_Communication_Type\", \"Default\");\r\n\r\n        return {\r\n            botInfo: {\r\n                commType: communicationType,\r\n                commandsCulture: undefined,\r\n                connectionId: this.properties.getProperty(PropertyId.Conversation_Agent_Connection_Id),\r\n                conversationId: this.properties.getProperty(PropertyId.Conversation_Conversation_Id, undefined),\r\n                fromId: this.properties.getProperty(PropertyId.Conversation_From_Id, undefined),\r\n                ttsAudioFormat: this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)\r\n            },\r\n            version: 0.2\r\n        };\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { PullAudioOutputStream } from \"./Audio/AudioOutputStream.js\";\r\n\r\ninterface IActivity {\r\n    conversation?: any;\r\n    id?: string;\r\n    replyToId?: string;\r\n    type?: string;\r\n    text?: string;\r\n    speak?: any;\r\n}\r\n\r\n/**\r\n * Defines contents of received message/events.\r\n * @class ActivityReceivedEventArgs\r\n */\r\nexport class ActivityReceivedEventArgs {\r\n    private privActivity: IActivity;\r\n    private privAudioStream: PullAudioOutputStream;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {any} activity - The activity..\r\n     */\r\n    public constructor(activity: any, audioStream?: PullAudioOutputStream) {\r\n        this.privActivity = activity as IActivity;\r\n        this.privAudioStream = audioStream;\r\n    }\r\n\r\n    /**\r\n     * Gets the received activity\r\n     * @member ActivityReceivedEventArgs.prototype.activity\r\n     * @function\r\n     * @public\r\n     * @returns {any} the received activity.\r\n     */\r\n    public get activity(): any {\r\n        return this.privActivity;\r\n    }\r\n\r\n    public get audioStream(): PullAudioOutputStream {\r\n        return this.privAudioStream;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport interface ITurnStatusResponsePayload {\r\n    interactionId: string;\r\n    conversationId: string;\r\n    statusCode: any;\r\n}\r\n\r\nexport class TurnStatusResponsePayload implements ITurnStatusResponsePayload {\r\n    private privMessageStatusResponse: ITurnStatusResponsePayload;\r\n\r\n    private constructor(json: string) {\r\n        this.privMessageStatusResponse = JSON.parse(json) as ITurnStatusResponsePayload;\r\n    }\r\n\r\n    public static fromJSON(json: string): TurnStatusResponsePayload {\r\n        return new TurnStatusResponsePayload(json);\r\n    }\r\n\r\n    public get interactionId(): string {\r\n        return this.privMessageStatusResponse.interactionId;\r\n    }\r\n\r\n    public get conversationId(): string {\r\n        return this.privMessageStatusResponse.conversationId;\r\n    }\r\n\r\n    public get statusCode(): any {\r\n        // Payloads may contain a limited set of textual representations or a numeric status\r\n        // code. The textual values are here converted into numeric ones.\r\n        switch (this.privMessageStatusResponse.statusCode) {\r\n            case \"Success\":\r\n                return 200;\r\n            case \"Failed\":\r\n                return 400;\r\n            case \"TimedOut\":\r\n                return 429;\r\n            default:\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n                return this.privMessageStatusResponse.statusCode;\r\n        }\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ITurnStatusResponsePayload,\r\n    TurnStatusResponsePayload\r\n    } from \"../common.speech/ServiceMessages/TurnStatusPayload.js\";\r\n\r\n/**\r\n * Defines contents of received message/events.\r\n * @class TurnStatusReceivedEventArgs\r\n */\r\nexport class TurnStatusReceivedEventArgs {\r\n    private privTurnStatus: ITurnStatusResponsePayload;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} turnStatus - The JSON-encoded turn status message.\r\n     */\r\n    public constructor(turnStatus: string) {\r\n        this.privTurnStatus = TurnStatusResponsePayload.fromJSON(turnStatus);\r\n    }\r\n\r\n    /**\r\n     * Gets the interaction identifier associated with this turn status event.\r\n     * @member TurnStatusReceivedEventArgs.prototype.interactionId\r\n     * @function\r\n     * @public\r\n     * @returns {any} the received interaction id.\r\n     */\r\n    public get interactionId(): any {\r\n        return this.privTurnStatus.interactionId;\r\n    }\r\n\r\n    /**\r\n     * Gets the conversation identifier associated with this turn status event.\r\n     * @member TurnStatusReceivedEventArgs.prototype.conversationId\r\n     * @function\r\n     * @public\r\n     * @returns {any} the received conversation id.\r\n     */\r\n    public get conversationId(): any {\r\n        return this.privTurnStatus.conversationId;\r\n    }\r\n\r\n    /**\r\n     * Gets the received turn status code.\r\n     * @member TurnStatusReceivedEventArgs.prototype.statusCode\r\n     * @function\r\n     * @public\r\n     * @returns {number} the received turn status.\r\n     */\r\n    public get statusCode(): number {\r\n        return this.privTurnStatus.statusCode; // eslint-disable-line @typescript-eslint/no-unsafe-return\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines channels used to pass property settings to service.\r\n * Added in version 1.7.0.\r\n */\r\nexport enum ServicePropertyChannel {\r\n    /**\r\n     * Uses URI query parameter to pass property settings to service.\r\n     */\r\n    UriQueryParameter = 0.\r\n}\r\n", "// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Profanity option.\r\n * Added in version 1.7.0.\r\n */\r\nexport enum ProfanityOption {\r\n    Masked = 0,\r\n    Removed = 1,\r\n    Raw = 2\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"../../common/Error.js\";\r\nimport { AudioStreamFormat } from \"../Exports.js\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat.js\";\r\n\r\ntype AudioDataTypedArray = Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array;\r\n/**\r\n * Base audio player class\r\n * TODO: Plays only PCM for now.\r\n * @class\r\n */\r\nexport class BaseAudioPlayer {\r\n\r\n    private audioContext: AudioContext = null;\r\n    private gainNode: GainNode = null;\r\n    private audioFormat: AudioStreamFormatImpl;\r\n    private autoUpdateBufferTimer: any = 0;\r\n    private samples: Float32Array;\r\n    private startTime: number;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {AudioStreamFormat} audioFormat audio stream format recognized by the player.\r\n     */\r\n    public constructor(audioFormat?: AudioStreamFormat) {\r\n        if (audioFormat === undefined) {\r\n            audioFormat = AudioStreamFormat.getDefaultInputFormat();\r\n        }\r\n        this.init(audioFormat);\r\n    }\r\n\r\n    /**\r\n     * play Audio sample\r\n     * @param newAudioData audio data to be played.\r\n     */\r\n    public playAudioSample(newAudioData: ArrayBuffer, cb?: () => void, err?: (error: string) => void): void {\r\n        try {\r\n            this.ensureInitializedContext();\r\n            const audioData = this.formatAudioData(newAudioData);\r\n            const newSamplesData = new Float32Array(this.samples.length + audioData.length);\r\n            newSamplesData.set(this.samples, 0);\r\n            newSamplesData.set(audioData, this.samples.length);\r\n            this.samples = newSamplesData;\r\n            if (!!cb) {\r\n                cb();\r\n            }\r\n        } catch (e) {\r\n            if (!!err) {\r\n                err(e as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * stops audio and clears the buffers\r\n     */\r\n    public stopAudio(cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.audioContext !== null) {\r\n            this.samples = new Float32Array();\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n            clearInterval(this.autoUpdateBufferTimer);\r\n            this.audioContext.close().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n            this.audioContext = null;\r\n        }\r\n    }\r\n\r\n    private init(audioFormat: AudioStreamFormat): void {\r\n        this.audioFormat = audioFormat as AudioStreamFormatImpl;\r\n        this.samples = new Float32Array();\r\n    }\r\n\r\n    private ensureInitializedContext(): void {\r\n        if (this.audioContext === null) {\r\n            this.createAudioContext();\r\n            const timerPeriod = 200;\r\n            this.autoUpdateBufferTimer = setInterval((): void => {\r\n                this.updateAudioBuffer();\r\n            }, timerPeriod);\r\n        }\r\n    }\r\n\r\n    private createAudioContext(): void {\r\n        // new ((window as any).AudioContext || (window as any).webkitAudioContext)();\r\n        this.audioContext = AudioStreamFormatImpl.getAudioContext();\r\n\r\n        // TODO: Various examples shows this gain node, it does not seem to be needed unless we plan\r\n        // to control the volume, not likely\r\n        this.gainNode = this.audioContext.createGain();\r\n        this.gainNode.gain.value = 1;\r\n        this.gainNode.connect(this.audioContext.destination);\r\n        this.startTime = this.audioContext.currentTime;\r\n    }\r\n\r\n    private formatAudioData(audioData: ArrayBuffer): Float32Array {\r\n        switch (this.audioFormat.bitsPerSample) {\r\n            case 8:\r\n                return this.formatArrayBuffer(new Int8Array(audioData), 128);\r\n            case 16:\r\n                return this.formatArrayBuffer(new Int16Array(audioData), 32768);\r\n            case 32:\r\n                return this.formatArrayBuffer(new Int32Array(audioData), 2147483648);\r\n            default:\r\n                throw new InvalidOperationError(\"Only WAVE_FORMAT_PCM (8/16/32 bps) format supported at this time\");\r\n        }\r\n    }\r\n\r\n    private formatArrayBuffer(audioData: AudioDataTypedArray, maxValue: number): Float32Array {\r\n        const float32Data = new Float32Array(audioData.length);\r\n        for (let i = 0; i < audioData.length; i++) {\r\n            float32Data[i] = audioData[i] / maxValue;\r\n        }\r\n        return float32Data;\r\n    }\r\n\r\n    private updateAudioBuffer(): void {\r\n        if (this.samples.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const channelCount = this.audioFormat.channels;\r\n        const bufferSource = this.audioContext.createBufferSource();\r\n        const frameCount = this.samples.length / channelCount;\r\n        const audioBuffer = this.audioContext.createBuffer(channelCount, frameCount, this.audioFormat.samplesPerSec);\r\n\r\n        // TODO: Should we do the conversion in the pushAudioSample instead?\r\n        for (let channel = 0; channel < channelCount; channel++) {\r\n            // Fill in individual channel data\r\n            let channelOffset = channel;\r\n            const audioData = audioBuffer.getChannelData(channel);\r\n            for (let i = 0; i < this.samples.length; i++, channelOffset += channelCount) {\r\n                audioData[i] = this.samples[channelOffset];\r\n            }\r\n        }\r\n\r\n        if (this.startTime < this.audioContext.currentTime) {\r\n            this.startTime = this.audioContext.currentTime;\r\n        }\r\n\r\n        bufferSource.buffer = audioBuffer;\r\n        bufferSource.connect(this.gainNode);\r\n        bufferSource.start(this.startTime);\r\n\r\n        // Make sure we play the next sample after the current one.\r\n        this.startTime += audioBuffer.duration;\r\n\r\n        // Clear the samples for the next pushed data.\r\n        this.samples = new Float32Array();\r\n    }\r\n\r\n    private async playAudio(audioData: ArrayBuffer): Promise<void> {\r\n        if (this.audioContext === null) {\r\n            this.createAudioContext();\r\n        }\r\n        const source: AudioBufferSourceNode = this.audioContext.createBufferSource();\r\n        const destination: AudioDestinationNode = this.audioContext.destination;\r\n        await this.audioContext.decodeAudioData(audioData, (newBuffer: AudioBuffer): void => {\r\n            source.buffer = newBuffer;\r\n            source.connect(destination);\r\n            source.start(0);\r\n        });\r\n    }\r\n}\r\n", "//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport {\r\n    ConnectionMessage\r\n} from \"./Exports.js\";\r\n\r\nexport class ConnectionMessageEventArgs {\r\n\r\n    private privConnectionMessage: ConnectionMessage;\r\n\r\n    public constructor(message: ConnectionMessage) {\r\n        this.privConnectionMessage = message;\r\n    }\r\n\r\n    /**\r\n     * Gets the <see cref=\"ConnectionMessage\"/> associated with this <see cref=\"ConnectionMessageEventArgs\"/>.\r\n     */\r\n    public get message(): ConnectionMessage {\r\n        return this.privConnectionMessage;\r\n    }\r\n\r\n    /**\r\n     * Returns a string that represents the connection message event.\r\n     */\r\n    public toString(): string {\r\n        return \"Message: \" + this.privConnectionMessage.toString();\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { VoiceProfileType } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines Voice Profile class for Speaker Recognition\r\n * @class VoiceProfile\r\n */\r\nexport class VoiceProfile {\r\n    private privId: string;\r\n    private privProfileType: VoiceProfileType;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} profileId - profileId of this Voice Profile.\r\n     * @param {VoiceProfileType} profileType - profileType of this Voice Profile.\r\n     */\r\n    public constructor(profileId: string, profileType: VoiceProfileType) {\r\n        this.privId = profileId;\r\n        this.privProfileType = profileType;\r\n    }\r\n\r\n    /**\r\n     * profileId of this Voice Profile instance\r\n     * @member VoiceProfile.prototype.profileId\r\n     * @function\r\n     * @public\r\n     * @returns {string} profileId of this Voice Profile instance.\r\n     */\r\n    public get profileId(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    /**\r\n     * profileType of this Voice Profile instance\r\n     * @member VoiceProfile.prototype.profileType\r\n     * @function\r\n     * @public\r\n     * @returns {VoiceProfileType} profile type of this Voice Profile instance.\r\n     */\r\n    public get profileType(): VoiceProfileType {\r\n        return this.privProfileType;\r\n    }\r\n\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { CancellationErrorCodePropertyName } from \"../common.speech/Exports.js\";\r\nimport {\r\n    CancellationDetailsBase,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    ResultReason\r\n} from \"./Exports.js\";\r\n\r\nexport interface EnrollmentResultDetails {\r\n    profileId: string;\r\n    enrollmentsCount: number;\r\n    enrollmentsLength: number;\r\n    enrollmentsSpeechLength: number;\r\n    remainingEnrollmentsCount: number;\r\n    remainingEnrollmentsSpeechLength: number;\r\n    audioLength: number;\r\n    audioSpeechLength: number;\r\n    enrollmentStatus: string;\r\n}\r\n\r\nexport interface EnrollmentResultJSON {\r\n    profileId: string;\r\n    enrollmentsCount: number;\r\n    enrollmentsLength: string;\r\n    enrollmentsSpeechLength: string;\r\n    remainingEnrollmentsCount: number;\r\n    remainingEnrollmentsSpeechLength: string;\r\n    audioLength: string;\r\n    audioSpeechLength: string;\r\n    enrollmentStatus: string;\r\n    remainingEnrollments?: number;\r\n    identificationProfileId?: string;\r\n    verificationProfileId?: string;\r\n}\r\n\r\n/**\r\n * Output format\r\n * @class VoiceProfileEnrollmentResult\r\n */\r\nexport class VoiceProfileEnrollmentResult {\r\n    private privReason: ResultReason;\r\n    private privDetails: EnrollmentResultDetails;\r\n    private privProperties: PropertyCollection;\r\n    private privErrorDetails: string;\r\n\r\n    public constructor(reason: ResultReason, json: string, statusText: string) {\r\n        this.privReason = reason;\r\n        this.privProperties = new PropertyCollection();\r\n        if (this.privReason !== ResultReason.Canceled) {\r\n            if (!!json) {\r\n                this.privDetails = JSON.parse(json) as EnrollmentResultDetails;\r\n                if (this.privDetails.enrollmentStatus.toLowerCase() === \"enrolling\") {\r\n                    this.privReason = ResultReason.EnrollingVoiceProfile;\r\n                }\r\n            }\r\n        } else {\r\n            this.privErrorDetails = statusText;\r\n            this.privProperties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.ServiceError]);\r\n        }\r\n    }\r\n\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get enrollmentsCount(): number {\r\n        return this.privDetails.enrollmentsCount;\r\n    }\r\n\r\n    public get enrollmentsLength(): number {\r\n        return this.privDetails.enrollmentsLength;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get enrollmentResultDetails(): EnrollmentResultDetails {\r\n        return this.privDetails;\r\n    }\r\n\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    public static FromIdentificationProfileList(json: { value: EnrollmentResultJSON[] }): VoiceProfileEnrollmentResult[] {\r\n        const results: VoiceProfileEnrollmentResult[] = [];\r\n        for (const item of json.value) {\r\n            const reason: ResultReason = item.enrollmentStatus.toLowerCase() === \"enrolling\" ?\r\n                ResultReason.EnrollingVoiceProfile : item.enrollmentStatus.toLowerCase() === \"enrolled\" ?\r\n                ResultReason.EnrolledVoiceProfile : ResultReason.Canceled;\r\n            const result = new VoiceProfileEnrollmentResult(reason, null, null);\r\n            result.privDetails = this.getIdentificationDetails(item) as EnrollmentResultDetails;\r\n            results.push(result);\r\n        }\r\n        return results;\r\n    }\r\n\r\n    public static FromVerificationProfileList(json: { value: EnrollmentResultJSON[] }): VoiceProfileEnrollmentResult[] {\r\n        const results: VoiceProfileEnrollmentResult[] = [];\r\n        for (const item of json.value) {\r\n            const reason: ResultReason = item.enrollmentStatus.toLowerCase() === \"enrolling\" ?\r\n                ResultReason.EnrollingVoiceProfile : item.enrollmentStatus.toLowerCase() === \"enrolled\" ?\r\n                ResultReason.EnrolledVoiceProfile : ResultReason.Canceled;\r\n            const result = new VoiceProfileEnrollmentResult(reason, null, null);\r\n            result.privDetails = this.getVerificationDetails(item) as EnrollmentResultDetails;\r\n            results.push(result);\r\n        }\r\n        return results;\r\n    }\r\n\r\n    private static getIdentificationDetails(json: EnrollmentResultJSON): unknown {\r\n        return {\r\n            audioLength: json.audioLength ? parseFloat(json.audioLength) : 0,\r\n            audioSpeechLength: json.audioSpeechLength ? parseFloat(json.audioSpeechLength) : 0,\r\n            enrollmentStatus: json.enrollmentStatus,\r\n            enrollmentsCount: json.enrollmentsCount || 0,\r\n            enrollmentsLength: json.enrollmentsLength ? parseFloat(json.enrollmentsLength) : 0,\r\n            enrollmentsSpeechLength: json.enrollmentsSpeechLength ? parseFloat(json.enrollmentsSpeechLength) : 0,\r\n            profileId: json.profileId || json.identificationProfileId,\r\n            remainingEnrollmentsSpeechLength: json.remainingEnrollmentsSpeechLength ? parseFloat(json.remainingEnrollmentsSpeechLength) : 0\r\n        };\r\n    }\r\n\r\n    private static getVerificationDetails(json: EnrollmentResultJSON): unknown {\r\n        return {\r\n            audioLength: json.audioLength ? parseFloat(json.audioLength) : 0,\r\n            audioSpeechLength: json.audioSpeechLength ? parseFloat(json.audioSpeechLength) : 0,\r\n            enrollmentStatus: json.enrollmentStatus,\r\n            enrollmentsCount: json.enrollmentsCount,\r\n            enrollmentsLength: json.enrollmentsLength ? parseFloat(json.enrollmentsLength) : 0,\r\n            enrollmentsSpeechLength: json.enrollmentsSpeechLength ? parseFloat(json.enrollmentsSpeechLength) : 0,\r\n            profileId: json.profileId || json.verificationProfileId,\r\n            remainingEnrollmentsCount: json.remainingEnrollments || json.remainingEnrollmentsCount,\r\n            remainingEnrollmentsSpeechLength: json.remainingEnrollmentsSpeechLength ? parseFloat(json.remainingEnrollmentsSpeechLength) : 0\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * @class VoiceProfileEnrollmentCancellationDetails\r\n */\r\nexport class VoiceProfileEnrollmentCancellationDetails extends CancellationDetailsBase {\r\n\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of VoiceProfileEnrollmentCancellationDetails object for the canceled VoiceProfileEnrollmentResult.\r\n     * @member VoiceProfileEnrollmentCancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfileEnrollmentResult} result - The result that was canceled.\r\n     * @returns {VoiceProfileEnrollmentCancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: VoiceProfileEnrollmentResult): VoiceProfileEnrollmentCancellationDetails {\r\n        const reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (!!result.properties) {\r\n            errorCode = (CancellationErrorCode as any)[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError])]; //eslint-disable-line\r\n        }\r\n\r\n        return new VoiceProfileEnrollmentCancellationDetails(reason, result.errorDetails, errorCode);\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { CancellationErrorCodePropertyName } from \"../common.speech/Exports.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    CancellationDetailsBase,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    ResultReason\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Output format\r\n * @class VoiceProfileResult\r\n */\r\nexport class VoiceProfileResult {\r\n    private privReason: ResultReason;\r\n    private privProperties: PropertyCollection;\r\n    private privErrorDetails: string;\r\n\r\n    public constructor(reason: ResultReason, statusText: string) {\r\n        this.privReason = reason;\r\n        this.privProperties = new PropertyCollection();\r\n        if (reason === ResultReason.Canceled) {\r\n            Contracts.throwIfNullOrUndefined(statusText, \"statusText\");\r\n            this.privErrorDetails = statusText;\r\n            this.privProperties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.ServiceError]);\r\n        }\r\n    }\r\n\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n\r\n/**\r\n * @class VoiceProfileCancellationDetails\r\n */\r\nexport class VoiceProfileCancellationDetails extends CancellationDetailsBase {\r\n\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of VoiceProfileCancellationDetails object for the canceled VoiceProfileResult.\r\n     * @member VoiceProfileCancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfileResult} result - The result that was canceled.\r\n     * @returns {VoiceProfileCancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: VoiceProfileResult): VoiceProfileCancellationDetails {\r\n        const reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (!!result.properties) {\r\n            errorCode = (CancellationErrorCode as any)[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError])]; //eslint-disable-line\r\n        }\r\n\r\n        return new VoiceProfileCancellationDetails(reason, result.errorDetails, errorCode);\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    ResultReason,\r\n    VoiceProfileResult\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Output format\r\n * @class VoiceProfilePhraseResult\r\n */\r\nexport class VoiceProfilePhraseResult extends VoiceProfileResult {\r\n    private privPhrases: string[] = [];\r\n    private privType: string;\r\n\r\n    public constructor(reason: ResultReason, statusText: string, type: string, phraseArray: string[]) {\r\n        super(reason, statusText);\r\n        Contracts.throwIfNullOrUndefined(phraseArray, \"phrase array\");\r\n        this.privType = type;\r\n        if (!!phraseArray && !!phraseArray[0]) {\r\n            this.privPhrases = phraseArray;\r\n        }\r\n    }\r\n\r\n    public get phrases(): string[] {\r\n        return this.privPhrases;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privType;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IRestResponse\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    VoiceProfileConnectionFactory,\r\n    VoiceServiceRecognizer\r\n} from \"../common.speech/Exports.js\";\r\nimport { AudioConfig, AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    AudioInputStream,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    ResultReason,\r\n    VoiceProfile,\r\n    VoiceProfileEnrollmentResult,\r\n    VoiceProfilePhraseResult,\r\n    VoiceProfileResult,\r\n    VoiceProfileType\r\n} from \"./Exports.js\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig.js\";\r\n\r\n/**\r\n * Defines VoiceProfileClient class for Speaker Recognition\r\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\r\n * @class VoiceProfileClient\r\n */\r\nexport class VoiceProfileClient extends Recognizer {\r\n    protected privProperties: PropertyCollection;\r\n    private privVoiceAdapter: VoiceServiceRecognizer;\r\n    private privDisposedVoiceAdapter: boolean;\r\n\r\n    /**\r\n     * VoiceProfileClient constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer (authentication key, region, &c)\r\n     */\r\n    public constructor(speechConfig: SpeechConfig) {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        super(AudioConfig.fromStreamInput(AudioInputStream.createPushStream()), speechConfigImpl.properties, new VoiceProfileConnectionFactory());\r\n\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n        this.privVoiceAdapter = this.privReco as VoiceServiceRecognizer;\r\n        this.privDisposedVoiceAdapter = false;\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this VoiceProfileClient.\r\n     * @member VoiceProfileClient.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this VoiceProfileClient.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member VoiceProfileClient.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member VoiceProfileClient.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Create a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.createProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfileType} profileType Type of Voice Profile to be created\r\n     * @param {string} lang Language string (locale) for Voice Profile\r\n     * @return {Promise<VoiceProfile>} - Promise of a VoiceProfile.\r\n     */\r\n    public async createProfileAsync(profileType: VoiceProfileType, lang: string): Promise<VoiceProfile> {\r\n        const profileIds: string[] = await this.privVoiceAdapter.createProfile(profileType, lang);\r\n        return new VoiceProfile(profileIds[0], profileType);\r\n    }\r\n\r\n    /**\r\n     * Get current information of a voice profile\r\n     * @member VoiceProfileClient.prototype.retrieveEnrollmentResultAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to retrieve info for\r\n     * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\r\n     */\r\n    public async retrieveEnrollmentResultAsync(profile: VoiceProfile): Promise<VoiceProfileEnrollmentResult> {\r\n        return this.privVoiceAdapter.retrieveEnrollmentResult(profile);\r\n    }\r\n\r\n    /**\r\n     * Get all voice profiles on account with given voice profile type\r\n     * @member VoiceProfileClient.prototype.getAllProfilesAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfileType} profileType profile type (identification/verification) for which to list profiles\r\n     * @return {Promise<VoiceProfileEnrollmentResult[]>} - Promise of an array of VoiceProfileEnrollmentResults.\r\n     */\r\n    public async getAllProfilesAsync(profileType: VoiceProfileType): Promise<VoiceProfileEnrollmentResult[]> {\r\n        return this.privVoiceAdapter.getAllProfiles(profileType);\r\n        /*\r\n        const result: { json: { value: EnrollmentResultJSON[] } } = await this.privAdapter.getProfiles(profileType);\r\n        if (profileType === VoiceProfileType.TextIndependentIdentification) {\r\n            return VoiceProfileEnrollmentResult.FromIdentificationProfileList(result.json);\r\n        }\r\n        return VoiceProfileEnrollmentResult.FromVerificationProfileList(result.json);\r\n        */\r\n    }\r\n\r\n    /**\r\n     * Get valid authorization phrases for voice profile enrollment\r\n     * @member VoiceProfileClient.prototype.getActivationPhrasesAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfileType} profileType Profile Type to get activation phrases for\r\n     * @param {string} lang Language string (locale) for Voice Profile\r\n     */\r\n    public async getActivationPhrasesAsync(profileType: VoiceProfileType, lang: string): Promise<VoiceProfilePhraseResult> {\r\n        return this.privVoiceAdapter.getActivationPhrases(profileType, lang);\r\n    }\r\n\r\n    /**\r\n     * Create a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.enrollProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to create enrollment for\r\n     * @param {AudioConfig} audioConfig source info from which to create enrollment\r\n     * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\r\n     */\r\n    public async enrollProfileAsync(profile: VoiceProfile, audioConfig: AudioConfig): Promise<VoiceProfileEnrollmentResult> {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"audioConfig\");\r\n        this.audioConfig = audioConfig;\r\n        this.privVoiceAdapter.SpeakerAudioSource = configImpl;\r\n\r\n        return this.privVoiceAdapter.enrollProfile(profile);\r\n    }\r\n\r\n    /**\r\n     * Delete a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.deleteProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to be deleted\r\n     * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\r\n     */\r\n    public async deleteProfileAsync(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        return this.privVoiceAdapter.deleteProfile(profile);\r\n    }\r\n\r\n    /**\r\n     * Remove all enrollments for a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.resetProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to be reset\r\n     * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\r\n     */\r\n    public async resetProfileAsync(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        return this.privVoiceAdapter.resetProfile(profile);\r\n    }\r\n\r\n    /**\r\n     * Clean up object and close underlying connection\r\n     * @member VoiceProfileClient.prototype.close\r\n     * @function\r\n     * @async\r\n     * @public\r\n     */\r\n    public async close(): Promise<void> {\r\n        await this.dispose(true);\r\n    }\r\n\r\n    protected createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new VoiceServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedVoiceAdapter) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposedVoiceAdapter = true;\r\n\r\n        if (disposing) {\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.properties);\r\n    }\r\n\r\n    private getResult(result: IRestResponse, successReason: ResultReason): VoiceProfileResult {\r\n        const response: VoiceProfileResult =\r\n            new VoiceProfileResult(\r\n                result.ok ? successReason : ResultReason.Canceled,\r\n                result.statusText\r\n            );\r\n        return (response);\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeakerRecognitionConnectionFactory,\r\n    SpeakerServiceRecognizer,\r\n    SpeechServiceConfig\r\n} from \"../common.speech/Exports.js\";\r\nimport { SpeakerRecognitionModel } from \"./SpeakerRecognitionModel.js\";\r\nimport { AudioConfig, AudioConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeakerIdentificationModel,\r\n    SpeakerRecognitionResult,\r\n    SpeakerVerificationModel,\r\n} from \"./Exports.js\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig.js\";\r\n\r\n/**\r\n * Defines SpeakerRecognizer class for Speaker Recognition\r\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\r\n * @class SpeakerRecognizer\r\n */\r\nexport class SpeakerRecognizer extends Recognizer {\r\n    protected privProperties: PropertyCollection;\r\n    private privDisposedSpeakerRecognizer: boolean;\r\n    private privAudioConfigImpl: AudioConfigImpl;\r\n    /**\r\n     * Initializes an instance of the SpeakerRecognizer.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The set of configuration properties.\r\n     * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig: AudioConfig) {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\r\n        const configImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, new SpeakerRecognitionConnectionFactory());\r\n        this.privAudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNull(this.privAudioConfigImpl, \"audioConfig\");\r\n\r\n        this.privDisposedSpeakerRecognizer = false;\r\n        this.privProperties = configImpl.properties;\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member SpeakerRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member SpeakerRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this SpeakerRecognizer.\r\n     * @member SpeakerRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeakerRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Get recognition result for model using given audio\r\n     * @member SpeakerRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {SpeakerIdentificationModel | SpeakerVerificationModel} model Model containing Voice Profiles to be identified\r\n     * @param cb - Callback invoked once result is returned.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public async recognizeOnceAsync(model: SpeakerIdentificationModel | SpeakerVerificationModel): Promise<SpeakerRecognitionResult> {\r\n        Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);\r\n\r\n        return this.recognizeSpeakerOnceAsyncImpl(model);\r\n    }\r\n\r\n    /**\r\n     * Included for compatibility\r\n     * @member SpeakerRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     * @async\r\n     */\r\n    public async close(): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);\r\n        await this.dispose(true);\r\n    }\r\n\r\n    protected async recognizeSpeakerOnceAsyncImpl(model: SpeakerRecognitionModel): Promise<SpeakerRecognitionResult> {\r\n        Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);\r\n\r\n        await this.implRecognizerStop();\r\n        const result: SpeakerRecognitionResult = await this.privReco.recognizeSpeaker(model);\r\n        await this.implRecognizerStop();\r\n\r\n        return result;\r\n    }\r\n\r\n    protected async implRecognizerStop(): Promise<void> {\r\n        if (this.privReco) {\r\n            await this.privReco.stopRecognizing();\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new SpeakerServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedSpeakerRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedSpeakerRecognizer = true;\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { SpeakerRecognitionModel } from \"./SpeakerRecognitionModel.js\";\r\nimport {\r\n    VoiceProfile,\r\n    VoiceProfileType,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines SpeakerIdentificationModel class for Speaker Recognition\r\n * Model contains a set of profiles against which to identify speaker(s)\r\n * @class SpeakerIdentificationModel\r\n */\r\nexport class SpeakerIdentificationModel implements SpeakerRecognitionModel {\r\n    private privVoiceProfiles: VoiceProfile[] = [];\r\n    private privProfileIds: string[] = [];\r\n\r\n    private constructor(profiles: VoiceProfile[]) {\r\n        Contracts.throwIfNullOrUndefined(profiles, \"VoiceProfiles\");\r\n        if (profiles.length === 0) {\r\n            throw new Error(\"Empty Voice Profiles array\");\r\n        }\r\n        for (const profile of profiles) {\r\n            if (profile.profileType !== VoiceProfileType.TextIndependentIdentification) {\r\n                throw new Error(\"Identification model can only be created from Identification profile: \" + profile.profileId);\r\n            }\r\n            this.privVoiceProfiles.push(profile);\r\n            this.privProfileIds.push(profile.profileId);\r\n        }\r\n    }\r\n    public static fromProfiles(profiles: VoiceProfile[]): SpeakerIdentificationModel {\r\n        return new SpeakerIdentificationModel(profiles);\r\n    }\r\n\r\n    public get voiceProfileIds(): string {\r\n        return this.privProfileIds.join(\",\");\r\n    }\r\n\r\n    public get profileIds(): string[] {\r\n        return this.privProfileIds;\r\n    }\r\n\r\n    public get scenario(): string {\r\n        return \"TextIndependentIdentification\";\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { SpeakerRecognitionModel } from \"./SpeakerRecognitionModel.js\";\r\nimport {\r\n    VoiceProfile,\r\n    VoiceProfileType,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines SpeakerVerificationModel class for Speaker Recognition\r\n * Model contains a profile against which to verify a speaker\r\n * @class SpeakerVerificationModel\r\n */\r\nexport class SpeakerVerificationModel implements SpeakerRecognitionModel {\r\n    private privVoiceProfile: VoiceProfile;\r\n\r\n    private constructor(profile: VoiceProfile) {\r\n        Contracts.throwIfNullOrUndefined(profile, \"VoiceProfile\");\r\n        if (profile.profileType === VoiceProfileType.TextIndependentIdentification) {\r\n            throw new Error(\"Verification model cannot be created from Identification profile\");\r\n        }\r\n        this.privVoiceProfile = profile;\r\n    }\r\n\r\n    public static fromProfile(profile: VoiceProfile): SpeakerVerificationModel {\r\n        return new SpeakerVerificationModel(profile);\r\n    }\r\n\r\n    public get voiceProfile(): VoiceProfile {\r\n        return this.privVoiceProfile;\r\n    }\r\n\r\n    public get profileIds(): string[] {\r\n        return [ this.voiceProfile.profileId ];\r\n    }\r\n\r\n    public get scenario(): string {\r\n        if (this.voiceProfile.profileType === VoiceProfileType.TextDependentVerification) {\r\n            return \"TextDependentVerification\";\r\n        } else {\r\n            return \"TextIndependentVerification\";\r\n        }\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Language Identification mode\r\n * @class LanguageIdMode\r\n */\r\nexport enum LanguageIdMode {\r\n\r\n    /**\r\n     * Detect language at audio start\r\n     * @member LanguageIdMode.AtStart\r\n     */\r\n    AtStart,\r\n\r\n    /**\r\n     * Continuously detect language\r\n     * @member LanguageIdMode.Continuous\r\n     */\r\n    Continuous,\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AutoDetectSourceLanguagesOpenRangeOptionName } from \"../common.speech/Exports.js\";\r\nimport {Contracts} from \"./Contracts.js\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SourceLanguageConfig,\r\n} from \"./Exports.js\";\r\nimport { LanguageIdMode } from \"./LanguageIdMode.js\";\r\n\r\n/**\r\n * Language auto detect configuration.\r\n * @class AutoDetectSourceLanguageConfig\r\n * Added in version 1.13.0.\r\n */\r\nexport class AutoDetectSourceLanguageConfig {\r\n    private privProperties: PropertyCollection;\r\n    private privLanguageIdMode: LanguageIdMode;\r\n\r\n    private constructor() {\r\n        this.privProperties = new PropertyCollection();\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, \"AtStart\");\r\n        this.privLanguageIdMode = LanguageIdMode.AtStart;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromOpenRange\r\n     * @function\r\n     * @public\r\n     * Only [[SpeechSynthesizer]] supports source language auto detection from open range,\r\n     * for [[Recognizer]], please use AutoDetectSourceLanguageConfig with specific source languages.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with open range.\r\n     */\r\n    public static fromOpenRange(): AutoDetectSourceLanguageConfig {\r\n        const config = new AutoDetectSourceLanguageConfig();\r\n        config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, AutoDetectSourceLanguagesOpenRangeOptionName);\r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string[]} languages Comma-separated string of languages (eg. \"en-US,fr-FR\") to populate properties of config.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given languages.\r\n     */\r\n    public static fromLanguages(languages: string[]): AutoDetectSourceLanguageConfig {\r\n        Contracts.throwIfArrayEmptyOrWhitespace(languages, \"languages\");\r\n        const config = new AutoDetectSourceLanguageConfig();\r\n        config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, languages.join());\r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromSourceLanguageConfigs\r\n     * @function\r\n     * @public\r\n     * @param {SourceLanguageConfig[]} configs SourceLanguageConfigs to populate properties of config.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given SourceLanguageConfigs.\r\n     */\r\n    public static fromSourceLanguageConfigs(configs: SourceLanguageConfig[]): AutoDetectSourceLanguageConfig {\r\n        if (configs.length < 1) {\r\n            throw new Error(\"Expected non-empty SourceLanguageConfig array.\");\r\n        }\r\n        const autoConfig = new AutoDetectSourceLanguageConfig();\r\n        const langs: string[] = [];\r\n        configs.forEach((config: SourceLanguageConfig): void => {\r\n            langs.push(config.language);\r\n            if (config.endpointId !== undefined && config.endpointId !== \"\") {\r\n                const customProperty = config.language + PropertyId.SpeechServiceConnection_EndpointId.toString();\r\n                autoConfig.properties.setProperty(customProperty, config.endpointId);\r\n            }\r\n        });\r\n        autoConfig.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, langs.join());\r\n\r\n        return autoConfig;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @return {PropertyCollection} Properties of the config.\r\n     * @summary Gets an auto detected language config properties\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.prototype.mode\r\n     * @function\r\n     * @public\r\n     * @param {LanguageIdMode} mode LID mode desired.\r\n     * @summary Sets LID operation to desired mode\r\n     */\r\n    public set mode(mode: LanguageIdMode) {\r\n        if (mode === LanguageIdMode.Continuous) {\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"2\");\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, \"Continuous\");\r\n        } else { // LanguageIdMode.AtStart\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"1\");\r\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, \"AtStart\");\r\n        }\r\n        this.privLanguageIdMode = mode;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    SpeechRecognitionResult,\r\n    ConversationTranscriptionResult\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Output format\r\n * @class AutoDetectSourceLanguageResult\r\n */\r\nexport class AutoDetectSourceLanguageResult {\r\n\r\n    private privLanguage: string;\r\n    private privLanguageDetectionConfidence: string;\r\n\r\n    private constructor(language: string, languageDetectionConfidence: string) {\r\n        Contracts.throwIfNullOrUndefined(language, \"language\");\r\n        Contracts.throwIfNullOrUndefined(languageDetectionConfidence, \"languageDetectionConfidence\");\r\n        this.privLanguage = language;\r\n        this.privLanguageDetectionConfidence = languageDetectionConfidence;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of AutoDetectSourceLanguageResult object from a SpeechRecognitionResult instance.\r\n     * @member AutoDetectSourceLanguageResult.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {SpeechRecognitionResult} result - The recognition result.\r\n     * @returns {AutoDetectSourceLanguageResult} AutoDetectSourceLanguageResult object being created.\r\n     */\r\n    public static fromResult(result: SpeechRecognitionResult): AutoDetectSourceLanguageResult {\r\n        return new AutoDetectSourceLanguageResult(result.language, result.languageDetectionConfidence);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of AutoDetectSourceLanguageResult object from a ConversationTranscriptionResult instance.\r\n     * @member AutoDetectSourceLanguageResult.fromConversationTranscriptionResult\r\n     * @function\r\n     * @public\r\n     * @param {ConversationTranscriptionResult} result - The transcription result.\r\n     * @returns {AutoDetectSourceLanguageResult} AutoDetectSourceLanguageResult object being created.\r\n     */\r\n        public static fromConversationTranscriptionResult(result: ConversationTranscriptionResult): AutoDetectSourceLanguageResult {\r\n            return new AutoDetectSourceLanguageResult(result.language, result.languageDetectionConfidence);\r\n        }\r\n\r\n    public get language(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get languageDetectionConfidence(): string {\r\n        return this.privLanguageDetectionConfidence;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\n\r\n/**\r\n * Source Language configuration.\r\n * @class SourceLanguageConfig\r\n */\r\nexport class SourceLanguageConfig {\r\n    private privLanguage: string;\r\n    private privEndpointId: string;\r\n\r\n    private constructor(language: string, endpointId?: string) {\r\n        Contracts.throwIfNullOrUndefined(language, \"language\");\r\n        this.privLanguage = language;\r\n        this.privEndpointId = endpointId;\r\n    }\r\n\r\n    /**\r\n     * @member SourceLanguageConfig.fromLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} language language (eg. \"en-US\") value of config.\r\n     * @param {string?} endpointId endpointId of model bound to given language of config.\r\n     * @return {SourceLanguageConfig} Instance of SourceLanguageConfig\r\n     * @summary Creates an instance of the SourceLanguageConfig with the given language and optional endpointId.\r\n     * Added in version 1.13.0.\r\n     */\r\n    public static fromLanguage(language: string, endpointId?: string): SourceLanguageConfig {\r\n        return new SourceLanguageConfig(language, endpointId);\r\n    }\r\n\r\n    public get language(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get endpointId(): string {\r\n        return this.privEndpointId;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { CancellationErrorCodePropertyName, SpeakerResponse } from \"../common.speech/Exports.js\";\r\nimport {\r\n    CancellationDetailsBase,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n} from \"./Exports.js\";\r\n\r\nexport enum SpeakerRecognitionResultType {\r\n    Verify,\r\n    Identify\r\n}\r\n\r\n/**\r\n * Output format\r\n * @class SpeakerRecognitionResult\r\n */\r\nexport class SpeakerRecognitionResult {\r\n    private privReason: ResultReason;\r\n    private privProperties: PropertyCollection;\r\n    private privProfileId: string;\r\n    private privScore: number;\r\n    private privErrorDetails: string;\r\n\r\n    public constructor(response: SpeakerResponse, resultReason: ResultReason = ResultReason.RecognizedSpeaker, cancellationErrorCode: CancellationErrorCode = CancellationErrorCode.NoError, errorDetails: string = \"\") {\r\n        this.privProperties = new PropertyCollection();\r\n        const resultType = response.scenario === \"TextIndependentIdentification\" ? SpeakerRecognitionResultType.Identify : SpeakerRecognitionResultType.Verify;\r\n        this.privReason = resultReason;\r\n        if (this.privReason !== ResultReason.Canceled) {\r\n            if (resultType === SpeakerRecognitionResultType.Identify) {\r\n                this.privProfileId = response.identificationResult.identifiedProfile.profileId;\r\n                this.privScore = response.identificationResult.identifiedProfile.score;\r\n                this.privReason = ResultReason.RecognizedSpeakers;\r\n            } else {\r\n                this.privScore = response.verificationResult.score;\r\n                if (response.verificationResult.recognitionResult.toLowerCase() !== \"accept\") {\r\n                    this.privReason = ResultReason.NoMatch;\r\n                }\r\n                if (response.verificationResult.profileId !== undefined && response.verificationResult.profileId !== \"\") {\r\n                    this.privProfileId = response.verificationResult.profileId;\r\n                }\r\n            }\r\n        } else {\r\n            this.privErrorDetails = errorDetails;\r\n            this.privProperties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[cancellationErrorCode]);\r\n        }\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_JsonResult, JSON.stringify(response));\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get profileId(): string {\r\n        return this.privProfileId;\r\n    }\r\n\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    public get score(): number {\r\n        return this.privScore;\r\n    }\r\n}\r\n\r\n/**\r\n * @class SpeakerRecognitionCancellationDetails\r\n */\r\nexport class SpeakerRecognitionCancellationDetails extends CancellationDetailsBase {\r\n\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of SpeakerRecognitionCancellationDetails object for the canceled SpeakerRecognitionResult\r\n     * @member SpeakerRecognitionCancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {SpeakerRecognitionResult} result - The result that was canceled.\r\n     * @returns {SpeakerRecognitionCancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: SpeakerRecognitionResult): SpeakerRecognitionCancellationDetails {\r\n        const reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (!!result.properties) {\r\n            errorCode = CancellationErrorCode[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError]) as keyof typeof CancellationErrorCode];\r\n        }\r\n\r\n        return new SpeakerRecognitionCancellationDetails(reason, result.errorDetails, errorCode);\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ConversationConnectionConfig,\r\n    ConversationManager,\r\n    ConversationReceivedTranslationEventArgs,\r\n    ConversationRecognizer,\r\n    ConversationRecognizerFactory,\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IAuthentication,\r\n    IInternalConversation,\r\n    IInternalParticipant,\r\n    InternalParticipants,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs,\r\n    TranscriberRecognizer\r\n} from \"../../common.speech/Exports.js\";\r\nimport {\r\n    IDisposable,\r\n    IErrorMessages,\r\n    marshalPromiseToCallbacks\r\n} from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    ConversationTranslator,\r\n    Participant,\r\n    ParticipantChangedReason,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SpeechTranslationConfig,\r\n} from \"../Exports.js\";\r\nimport { SpeechTranslationConfigImpl } from \"../SpeechTranslationConfig.js\";\r\nimport { Callback, ConversationInfo, ConversationProperties, IConversation } from \"./IConversation.js\";\r\nimport { IParticipant, IUser, TranscriptionParticipant } from \"./IParticipant.js\";\r\n\r\nexport abstract class Conversation implements IConversation {\r\n\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    public abstract get authorizationToken(): string;\r\n\r\n    public abstract get config(): SpeechTranslationConfig;\r\n\r\n    public abstract get conversationId(): string;\r\n    public abstract get conversationInfo(): ConversationInfo;\r\n    public abstract get properties(): PropertyCollection;\r\n    public abstract get speechRecognitionLanguage(): string;\r\n    public abstract get participants(): Participant[];\r\n    public abstract set authorizationToken(value: string);\r\n    public abstract get isConnected(): boolean;\r\n\r\n    /**\r\n     * Create a conversation\r\n     * @param speechConfig\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public static createConversationAsync(speechConfig: SpeechTranslationConfig, arg2?: string | Callback, arg3?: Callback, arg4?: Callback): Conversation {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"config\"));\r\n        Contracts.throwIfNullOrUndefined(speechConfig.region, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Region\"));\r\n        if (!speechConfig.subscriptionKey && !speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceAuthorization_Token])) {\r\n            Contracts.throwIfNullOrUndefined(speechConfig.subscriptionKey, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Key\"));\r\n        }\r\n        let conversationImpl: ConversationImpl;\r\n        let cb: Callback;\r\n        let err: Callback;\r\n        if (typeof arg2 === \"string\") {\r\n            conversationImpl = new ConversationImpl(speechConfig, arg2);\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            marshalPromiseToCallbacks((async (): Promise<void> => {})(), arg3, arg4);\r\n        } else {\r\n            conversationImpl = new ConversationImpl(speechConfig);\r\n            cb = arg2;\r\n            err = arg3;\r\n            conversationImpl.createConversationAsync(\r\n                ((): void => {\r\n                    if (!!cb) {\r\n                        cb();\r\n                    }\r\n                }),\r\n                (error: any): void => {\r\n                    if (!!err) {\r\n                        err(error);\r\n                    }\r\n                });\r\n        }\r\n        return conversationImpl;\r\n\r\n    }\r\n\r\n    /** Start a conversation. */\r\n    public abstract startConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Delete a conversation. After this no one will be able to join the conversation. */\r\n    public abstract deleteConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** End a conversation. */\r\n    public abstract endConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Lock a conversation. This will prevent new participants from joining. */\r\n    public abstract lockConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Add Participant to Conversation. */\r\n    public abstract addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute all other participants in the conversation. After this no other participants will\r\n     * have their speech recognitions broadcast, nor be able to send text messages.\r\n     */\r\n    public abstract muteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Remove a participant from a conversation using the user id, Participant or User object\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unlocks a conversation. */\r\n    public abstract unlockConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unmute all other participants in the conversation. */\r\n    public abstract unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Unmute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n}\r\n\r\nexport class ConversationImpl extends Conversation implements IDisposable {\r\n\r\n    private privConfig: SpeechTranslationConfig;\r\n    private privProperties: PropertyCollection;\r\n    private privLanguage: string;\r\n    private privToken: string;\r\n    private privIsDisposed: boolean;\r\n    private privRoom: IInternalConversation;\r\n    private privManager: ConversationManager;\r\n    private privConversationRecognizer: ConversationRecognizer;\r\n    private privIsConnected: boolean;\r\n    private privParticipants: InternalParticipants;\r\n    private privIsReady: boolean;\r\n    private privConversationTranslator: ConversationTranslator;\r\n    private privTranscriberRecognizer: TranscriberRecognizer;\r\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\r\n    private privConversationId: string;\r\n    private readonly privTextMessageMaxLength: number;\r\n\r\n    /**\r\n     * Create a conversation impl\r\n     * @param speechConfig\r\n     * @param {string} id - optional conversationId\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, id?: string) {\r\n        super();\r\n        this.privIsConnected = false;\r\n        this.privIsDisposed = false;\r\n        this.privConversationId = \"\";\r\n        this.privProperties = new PropertyCollection();\r\n        this.privManager = new ConversationManager();\r\n\r\n        // check the speech language\r\n        const language: string = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n        if (!language) {\r\n            speechConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], ConversationConnectionConfig.defaultLanguageCode);\r\n        }\r\n        this.privLanguage = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        if (!id) {\r\n            // check the target language(s)\r\n            if (speechConfig.targetLanguages.length === 0) {\r\n                speechConfig.addTargetLanguage(this.privLanguage);\r\n            }\r\n\r\n            // check the profanity setting: speech and conversationTranslator should be in sync\r\n            const profanity: string = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceResponse_ProfanityOption]);\r\n            if (!profanity) {\r\n                speechConfig.setProfanity(ProfanityOption.Masked);\r\n            }\r\n            // check the nickname: it should pass this regex: ^\\w+([\\s-][\\w\\(\\)]+)*$\"\r\n            // TODO: specify the regex required. Nicknames must be unique or get the duplicate nickname error\r\n            // TODO: check what the max length is and if a truncation is required or if the service handles it without an error\r\n            let hostNickname: string = speechConfig.getProperty(PropertyId[PropertyId.ConversationTranslator_Name]);\r\n            if (hostNickname === undefined || hostNickname === null) {\r\n                hostNickname = \"Host\";\r\n            }\r\n            Contracts.throwIfNullOrTooLong(hostNickname, \"nickname\", 50);\r\n            Contracts.throwIfNullOrTooShort(hostNickname, \"nickname\", 2);\r\n            speechConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Name], hostNickname);\r\n\r\n        } else {\r\n            this.privConversationId = id;\r\n        }\r\n\r\n        // save the speech config for future usage\r\n        this.privConfig = speechConfig;\r\n\r\n        // save the config properties\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n        this.privProperties = configImpl.properties.clone();\r\n        this.privIsConnected = false;\r\n        this.privParticipants = new InternalParticipants();\r\n        this.privIsReady = false;\r\n        this.privTextMessageMaxLength = 1000;\r\n    }\r\n\r\n    // get the internal data about a conversation\r\n    public get room(): IInternalConversation {\r\n        return this.privRoom;\r\n    }\r\n\r\n    // get the wrapper for connecting to the websockets\r\n    public get connection(): ConversationRecognizer {\r\n        return this.privConversationRecognizer; // this.privConnection;\r\n    }\r\n\r\n    // get the config\r\n    public get config(): SpeechTranslationConfig {\r\n        return this.privConfig;\r\n    }\r\n\r\n    // get the conversation Id\r\n    public get conversationId(): string {\r\n        return this.privRoom ? this.privRoom.roomId : this.privConversationId;\r\n    }\r\n\r\n    // get the properties\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    // get the speech language\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get isMutedByHost(): boolean {\r\n        return this.privParticipants.me?.isHost ? false : this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    public get isConnected(): boolean {\r\n        return this.privIsConnected && this.privIsReady;\r\n    }\r\n\r\n    public get participants(): Participant[] {\r\n        return this.toParticipants(true);\r\n    }\r\n\r\n    public get me(): Participant {\r\n        return this.toParticipant(this.privParticipants.me);\r\n    }\r\n\r\n    public get host(): Participant {\r\n        return this.toParticipant(this.privParticipants.host);\r\n    }\r\n\r\n    public get transcriberRecognizer(): TranscriberRecognizer {\r\n        return this.privTranscriberRecognizer;\r\n    }\r\n\r\n    public get conversationInfo(): ConversationInfo {\r\n        const convId: string = this.conversationId;\r\n        const p: TranscriptionParticipant[] = this.participants.map((part: Participant): TranscriptionParticipant => (\r\n            {\r\n                id: part.id,\r\n                preferredLanguage: part.preferredLanguage,\r\n                voice: part.voice\r\n            }\r\n        ));\r\n        const props: ConversationProperties = {};\r\n        for (const key of ConversationConnectionConfig.transcriptionEventKeys) {\r\n            const val: string = this.properties.getProperty(key, \"\");\r\n            if (val !== \"\") {\r\n                props[key] = val;\r\n            }\r\n        }\r\n        const info: ConversationInfo = { id: convId, participants: p, conversationProperties: props };\r\n        return info;\r\n    }\r\n\r\n    private get canSend(): boolean {\r\n        return this.privIsConnected && !this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    private get canSendAsHost(): boolean {\r\n        return this.privIsConnected && this.privParticipants.me?.isHost;\r\n    }\r\n\r\n    // get / set the speech auth token\r\n    // eslint-disable-next-line @typescript-eslint/member-ordering\r\n    public get authorizationToken(): string {\r\n        return this.privToken;\r\n    }\r\n\r\n    public set authorizationToken(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"authorizationToken\");\r\n        this.privToken = value;\r\n    }\r\n\r\n    public set conversationTranslator(conversationTranslator: ConversationTranslator) {\r\n        this.privConversationTranslator = conversationTranslator;\r\n    }\r\n\r\n    public onToken(token: IAuthentication): void {\r\n        this.privConversationTranslator.onToken(token);\r\n    }\r\n\r\n    /**\r\n     * Create a new conversation as Host\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public createConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            this.privManager.createOrJoin(this.privProperties, undefined,\r\n                ((room: IInternalConversation): void => {\r\n                    if (!room) {\r\n                        this.handleError(new Error(this.privErrors.permissionDeniedConnect), err);\r\n                    }\r\n                    this.privRoom = room;\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts a new conversation as host.\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public startConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // check if there is already a recognizer\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            // check if there is conversation data available\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedConnect);\r\n            // connect to the conversation websocket\r\n            this.privParticipants.meId = this.privRoom.participantId;\r\n            this.privConversationRecognizer = ConversationRecognizerFactory.fromConfig(this, this.privConfig);\r\n\r\n            // Because ConversationTranslator manually sets up and manages the connection, Conversation\r\n            // has to forward serviceRecognizer connection events that usually get passed automatically\r\n            this.privConversationRecognizer.connected = this.onConnected;\r\n            this.privConversationRecognizer.disconnected = this.onDisconnected;\r\n            this.privConversationRecognizer.canceled = this.onCanceled;\r\n\r\n            this.privConversationRecognizer.participantUpdateCommandReceived = this.onParticipantUpdateCommandReceived;\r\n            this.privConversationRecognizer.lockRoomCommandReceived = this.onLockRoomCommandReceived;\r\n            this.privConversationRecognizer.muteAllCommandReceived = this.onMuteAllCommandReceived;\r\n            this.privConversationRecognizer.participantJoinCommandReceived = this.onParticipantJoinCommandReceived;\r\n            this.privConversationRecognizer.participantLeaveCommandReceived = this.onParticipantLeaveCommandReceived;\r\n            this.privConversationRecognizer.translationReceived = this.onTranslationReceived;\r\n            this.privConversationRecognizer.participantsListReceived = this.onParticipantsListReceived;\r\n            this.privConversationRecognizer.conversationExpiration = this.onConversationExpiration;\r\n\r\n            this.privConversationRecognizer.connect(this.privRoom.token,\r\n                ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Join a conversation as a participant.\r\n     * @param { IParticipant } participant - participant to add\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void {\r\n        Contracts.throwIfNullOrUndefined(participant, \"Participant\");\r\n        marshalPromiseToCallbacks(this.addParticipantImplAsync(participant), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Join a conversation as a participant.\r\n     * @param conversation\r\n     * @param nickname\r\n     * @param lang\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public joinConversationAsync(conversationId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // TODO\r\n            // if (!!this.privConversationRecognizer) {\r\n            //     throw new Error(this.privErrors.permissionDeniedStart);\r\n            // }\r\n            Contracts.throwIfNullOrWhitespace(conversationId, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversationId\"));\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrWhitespace(lang, this.privErrors.invalidArgs.replace(\"{arg}\", \"language\"));\r\n            // join the conversation\r\n            this.privManager.createOrJoin(this.privProperties, conversationId,\r\n                ((room: IInternalConversation): void => {\r\n                    Contracts.throwIfNullOrUndefined(room, this.privErrors.permissionDeniedConnect);\r\n                    this.privRoom = room;\r\n                    this.privConfig.authorizationToken = room.cognitiveSpeechAuthToken;\r\n                    // join callback\r\n                    if (!!cb) {\r\n                        cb(room.cognitiveSpeechAuthToken);\r\n                    }\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes a conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public deleteConversationAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.deleteConversationImplAsync(), cb, err);\r\n    }\r\n\r\n    public async deleteConversationImplAsync(): Promise<void> {\r\n            Contracts.throwIfNullOrUndefined(this.privProperties, this.privErrors.permissionDeniedConnect);\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.token, this.privErrors.permissionDeniedConnect);\r\n            await this.privManager.leave(this.privProperties, this.privRoom.token);\r\n\r\n            this.dispose();\r\n    }\r\n\r\n    /**\r\n     * Issues a request to close the client websockets\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public endConversationAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.endConversationImplAsync(), cb, err);\r\n    }\r\n\r\n    public endConversationImplAsync(): Promise<void> {\r\n        return this.close(true);\r\n    }\r\n\r\n    /**\r\n     * Issues a request to lock the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public lockConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"lock\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getLockCommand(true),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privConversationRecognizer, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the user's permissions\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(true),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute a participant in the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, true), ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to remove a participant from the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            if (!!this.privTranscriberRecognizer && userId.hasOwnProperty(\"id\")) {\r\n                // Assume this is a transcription participant\r\n                marshalPromiseToCallbacks(this.removeParticipantImplAsync(userId as IParticipant), cb, err);\r\n            } else {\r\n                Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n                Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n                if (!this.canSendAsHost) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"remove\")), err);\r\n                }\r\n                let participantId = \"\";\r\n                if (typeof userId === \"string\") {\r\n                    participantId = userId;\r\n                } else if (userId.hasOwnProperty(\"id\")) {\r\n                    const participant: IParticipant = userId as IParticipant;\r\n                    participantId = participant.id;\r\n                } else if (userId.hasOwnProperty(\"userId\")) {\r\n                    const user: IUser = userId as IUser;\r\n                    participantId = user.userId;\r\n                }\r\n                Contracts.throwIfNullOrWhitespace(participantId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n                // check the participant exists\r\n                const index: number = this.participants.findIndex((p: Participant): boolean => p.id === participantId);\r\n                if (index === -1) {\r\n                    this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n                }\r\n                if (!!this.privConversationRecognizer) {\r\n                    this.privConversationRecognizer.sendRequest(this.getEjectCommand(participantId), ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                        ((error: any): void => {\r\n                            this.handleError(error, err);\r\n                        }));\r\n                }\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unlock the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unlockConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unlock\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getLockCommand(false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n                }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute all participants in the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unmute all\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute a participant in the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send a text message\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", \"message\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // TODO: is a max length check required?\r\n            if (message.length > this.privTextMessageMaxLength) {\r\n                this.handleError(new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"message length\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMessageCommand(message), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set translated to languages\r\n     * @param {string[]} languages - languages to translate to\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public setTranslatedLanguagesAsync(languages: string[], cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfArrayEmptyOrWhitespace(languages, this.privErrors.invalidArgs.replace(\"{arg}\", \"languages\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getSetTranslateToLanguagesCommand(languages),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change nickname\r\n     * @param {string} nickname - new nickname for the room\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public changeNicknameAsync(nickname: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getChangeNicknameCommand(nickname),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(): void {\r\n        if (this.isDisposed) {\r\n            return;\r\n        }\r\n        this.privIsDisposed = true;\r\n        if (!!this.config) {\r\n            this.config.close();\r\n        }\r\n        this.privConfig = undefined;\r\n        this.privLanguage = undefined;\r\n        this.privProperties = undefined;\r\n        this.privRoom = undefined;\r\n        this.privToken = undefined;\r\n        this.privManager = undefined;\r\n        this.privIsConnected = false;\r\n        this.privIsReady = false;\r\n        this.privParticipants = undefined;\r\n    }\r\n\r\n    public async connectTranscriberRecognizer(recognizer: TranscriberRecognizer): Promise<void> {\r\n        if (!!this.privTranscriberRecognizer) {\r\n            await this.privTranscriberRecognizer.close();\r\n        }\r\n        await recognizer.enforceAudioGating();\r\n        this.privTranscriberRecognizer = recognizer;\r\n        this.privTranscriberRecognizer.conversation = this;\r\n    }\r\n\r\n    public getKeepAlive(): string {\r\n        const nickname: string = (!!this.me) ? this.me.displayName : \"default_nickname\";\r\n        return JSON.stringify({\r\n            id: \"0\",\r\n            nickname,\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.keepAlive\r\n        });\r\n    }\r\n\r\n    /** websocket callbacks */\r\n    /* eslint-disable @typescript-eslint/typedef */\r\n    private onConnected = (e: ConnectionEventArgs): void => {\r\n        this.privIsConnected = true;\r\n        try {\r\n            if (!!this.privConversationTranslator?.sessionStarted) {\r\n                this.privConversationTranslator.sessionStarted(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onDisconnected = (e: ConnectionEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.sessionStopped) {\r\n                this.privConversationTranslator.sessionStopped(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        } finally {\r\n            void this.close(false);\r\n        }\r\n    };\r\n\r\n    private onCanceled = (r: ConversationRecognizer, e: ConversationTranslationCanceledEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.canceled) {\r\n                this.privConversationTranslator.canceled(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantUpdateCommandReceived = (r: ConversationRecognizer, e: ParticipantAttributeEventArgs): void => {\r\n        try {\r\n            const updatedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.id);\r\n            if (updatedParticipant !== undefined) {\r\n\r\n                switch (e.key) {\r\n                    case ConversationTranslatorCommandTypes.changeNickname:\r\n                        updatedParticipant.displayName = e.value as string;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setUseTTS:\r\n                        updatedParticipant.isUsingTts = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setProfanityFiltering:\r\n                        updatedParticipant.profanity = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setMute:\r\n                        updatedParticipant.isMuted = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setTranslateToLanguages:\r\n                        updatedParticipant.translateToLanguages = e.value as string[];\r\n                        break;\r\n                }\r\n                this.privParticipants.addOrUpdateParticipant(updatedParticipant);\r\n\r\n                if (!!this.privConversationTranslator) {\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                            [this.toParticipant(updatedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onLockRoomCommandReceived = (): void => {\r\n        // TODO\r\n    };\r\n\r\n    private onMuteAllCommandReceived = (r: ConversationRecognizer, e: MuteAllEventArgs): void => {\r\n        try {\r\n            this.privParticipants.participants.forEach((p: IInternalParticipant): boolean => p.isMuted = (p.isHost ? false : e.isMuted));\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                        this.toParticipants(false), e.sessionId));\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantJoinCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(e.participant);\r\n            if (newParticipant !== undefined) {\r\n                if (!!this.privConversationTranslator) {\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation,\r\n                            [this.toParticipant(newParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantLeaveCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const ejectedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.participant.id);\r\n            if (ejectedParticipant !== undefined) {\r\n                // remove the participant from the internal participants list\r\n                this.privParticipants.deleteParticipant(e.participant.id);\r\n                if (!!this.privConversationTranslator) {\r\n                    // notify subscribers that the participant has left the conversation\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.LeftConversation,\r\n                            [this.toParticipant(ejectedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onTranslationReceived = (r: ConversationRecognizer, e: ConversationReceivedTranslationEventArgs): void => {\r\n        try {\r\n            switch (e.command) {\r\n                case ConversationTranslatorMessageTypes.final:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.transcribed(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.partial:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.transcribing(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.instantMessage:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.textMessageReceived(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantsListReceived = (r: ConversationRecognizer, e: ParticipantsListEventArgs): void => {\r\n        try {\r\n            // check if the session token needs to be updated\r\n            if (e.sessionToken !== undefined && e.sessionToken !== null) {\r\n                this.privRoom.token = e.sessionToken;\r\n            }\r\n            // save the participants\r\n            this.privParticipants.participants = [...e.participants];\r\n            // enable the conversation\r\n            if (this.privParticipants.me !== undefined) {\r\n                this.privIsReady = true;\r\n            }\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation, this.toParticipants(true), e.sessionId));\r\n            }\r\n            // if this is the host, update the nickname if needed\r\n            if (this.me.isHost) {\r\n                const nickname: string = this.privConversationTranslator?.properties.getProperty(PropertyId.ConversationTranslator_Name);\r\n                if (nickname !== undefined && nickname.length > 0 && nickname !== this.me.displayName) {\r\n                    // issue a change nickname request\r\n                    this.changeNicknameAsync(nickname);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onConversationExpiration = (r: ConversationRecognizer, e: ConversationExpirationEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.conversationExpiration(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n    /* eslint-enable @typescript-eslint/typedef */\r\n\r\n    private addParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(participant);\r\n        if (newParticipant !== undefined) {\r\n            if (!!this.privTranscriberRecognizer) {\r\n                const conversationInfo = this.conversationInfo;\r\n                conversationInfo.participants = [participant];\r\n                return this.privTranscriberRecognizer.pushConversationEvent(conversationInfo, \"join\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        this.privParticipants.deleteParticipant(participant.id);\r\n        const conversationInfo = this.conversationInfo;\r\n        conversationInfo.participants = [participant];\r\n        return this.privTranscriberRecognizer.pushConversationEvent(conversationInfo, \"leave\");\r\n    }\r\n\r\n    private async close(dispose: boolean): Promise<void> {\r\n        try {\r\n            this.privIsConnected = false;\r\n            await this.privConversationRecognizer?.close();\r\n            this.privConversationRecognizer = undefined;\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.dispose();\r\n            }\r\n        } catch (e) {\r\n            // ignore error\r\n            throw e;\r\n        }\r\n        if (dispose) {\r\n            this.dispose();\r\n        }\r\n    }\r\n\r\n    /** Helpers */\r\n    private handleCallback(cb: () => void, err: (message: string) => void): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e as string);\r\n                }\r\n            }\r\n            cb = undefined;\r\n        }\r\n    }\r\n\r\n    private handleError(error: any, err: (message: string) => void): void {\r\n        if (!!err) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error;\r\n                err(typedError.name + \": \" + typedError.message);\r\n\r\n            } else {\r\n                err(error as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Participant Helpers */\r\n    private toParticipants(includeHost: boolean): Participant[] {\r\n\r\n        const participants: Participant[] = this.privParticipants.participants.map((p: IInternalParticipant): Participant => ( this.toParticipant(p) ) );\r\n        if (!includeHost) {\r\n            return participants.filter((p: Participant): boolean => p.isHost === false);\r\n        } else {\r\n            return participants;\r\n        }\r\n    }\r\n\r\n    private toParticipant(p: IInternalParticipant): Participant {\r\n        return new Participant(p.id, p.avatar, p.displayName, p.isHost, p.isMuted, p.isUsingTts, p.preferredLanguage, p.voice);\r\n    }\r\n\r\n    private getMuteAllCommand(isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMuteAll,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getMuteCommand(participantId: string, isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMute,\r\n            // eslint-disable-next-line object-shorthand\r\n            participantId: participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getLockCommand(isLocked: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setLockState,\r\n            participantId: this.privRoom.participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isLocked\r\n        });\r\n    }\r\n\r\n    private getEjectCommand(participantId: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.ejectParticipant,\r\n            // eslint-disable-next-line object-shorthand\r\n            participantId: participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n        });\r\n    }\r\n\r\n    private getSetTranslateToLanguagesCommand(languages: string[]): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setTranslateToLanguages,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: languages\r\n        });\r\n    }\r\n\r\n    private getChangeNicknameCommand(nickname: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.changeNickname,\r\n            nickname,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: nickname\r\n        });\r\n    }\r\n\r\n    private getMessageCommand(message: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n        Contracts.throwIfNullOrWhitespace(message, \"message\");\r\n\r\n        return JSON.stringify({\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            text: message,\r\n            type: ConversationTranslatorMessageTypes.instantMessage\r\n        });\r\n    }\r\n\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    AudioConfig,\r\n    SpeechTranslationConfig\r\n} from \"../Exports.js\";\r\nimport { Callback } from \"./IConversation.js\";\r\n\r\nexport class ConversationCommon {\r\n\r\n    protected privAudioConfig: AudioConfig;\r\n    protected privSpeechTranslationConfig: SpeechTranslationConfig;\r\n\r\n    public constructor(audioConfig?: AudioConfig) {\r\n        this.privAudioConfig = audioConfig;\r\n    }\r\n\r\n    protected handleCallback(cb: Callback, err: Callback): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }\r\n            cb = undefined;\r\n        }\r\n    }\r\n\r\n    protected handleError(error: any, err: Callback): void {\r\n        if (!!err) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error;\r\n                err(typedError.name + \": \" + typedError.message);\r\n\r\n            } else {\r\n                err(error);\r\n            }\r\n        }\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { SessionEventArgs } from \"../Exports.js\";\r\n\r\nexport class ConversationExpirationEventArgs extends SessionEventArgs {\r\n    private privExpirationTime: number;\r\n\r\n    public constructor(expirationTime: number, sessionId?: string) {\r\n        super(sessionId);\r\n        this.privExpirationTime = expirationTime;\r\n    }\r\n\r\n    /** How much longer until the conversation expires (in minutes). */\r\n    public get expirationTime(): number {\r\n        return this.privExpirationTime;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { SessionEventArgs } from \"../Exports.js\";\r\nimport { ParticipantChangedReason } from \"./Exports.js\";\r\nimport { IParticipant } from \"./IParticipant.js\";\r\n\r\nexport class ConversationParticipantsChangedEventArgs extends SessionEventArgs {\r\n    private privReason: ParticipantChangedReason;\r\n    private privParticipant: IParticipant[];\r\n\r\n    public constructor(reason: ParticipantChangedReason, participants: IParticipant[], sessionId?: string) {\r\n        super(sessionId);\r\n        this.privReason = reason;\r\n        this.privParticipant = participants;\r\n    }\r\n\r\n    public get reason(): ParticipantChangedReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get participants(): IParticipant[] {\r\n        return this.privParticipant;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { CancellationEventArgsBase } from \"../CancellationEventArgsBase.js\";\r\n\r\nexport class ConversationTranslationCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { RecognitionEventArgs } from \"../Exports.js\";\r\nimport { ConversationTranslationResult } from \"./Exports.js\";\r\n\r\nexport class ConversationTranslationEventArgs extends RecognitionEventArgs {\r\n    private privResult: ConversationTranslationResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {ConversationTranslationResult} result - The translation recognition result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: ConversationTranslationResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @returns {ConversationTranslationResult} the recognition result.\r\n     */\r\n    public get result(): ConversationTranslationResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { PropertyCollection } from \"../PropertyCollection.js\";\r\nimport { ResultReason } from \"../ResultReason.js\";\r\nimport { TranslationRecognitionResult } from \"../TranslationRecognitionResult.js\";\r\nimport { Translations } from \"../Translations.js\";\r\n\r\nexport class ConversationTranslationResult extends TranslationRecognitionResult {\r\n    private privId: string;\r\n    private privOrigLang: string;\r\n\r\n    public constructor(participantId: string,\r\n                       translations: Translations,\r\n                       originalLanguage?: string,\r\n                       resultId?: string,\r\n                       reason?: ResultReason,\r\n                       text?: string,\r\n                       duration?: number,\r\n                       offset?: number,\r\n                       errorDetails?: string,\r\n                       json?: string,\r\n                       properties?: PropertyCollection) {\r\n        super(translations, resultId, reason, text, duration, offset, undefined, undefined, errorDetails, json, properties);\r\n        this.privId = participantId;\r\n        this.privOrigLang = originalLanguage;\r\n    }\r\n\r\n    /**\r\n     * The unique identifier for the participant this result is for.\r\n     */\r\n    public get participantId(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    /**\r\n     * The original language this result was in.\r\n     */\r\n    public get originalLang(): string {\r\n        return this.privOrigLang;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IStringDictionary } from \"./IDictionary.js\";\r\n\r\n/**\r\n * String helper functions\r\n */\r\nexport class StringUtils {\r\n\r\n    /**\r\n     * Formats a string by replacing the named {keys} in the string with the values contained in the replacement dictionary.\r\n     * @param format The format string that contains the parts to replace surrounded by {}. For example: \"wss://{region}.cts.speech.microsoft.com\".\r\n     * If your string needs to contain a { or } you can use the {{ and }} escape sequences respectively.\r\n     * @param replacements The dictionary of replacements. If a replacement is not found, it is replaced with an empty string\r\n     * @returns The formatted string. If you pass in a null or undefined format string, an empty string will be returned\r\n     */\r\n    public static formatString(format: string, replacements: IStringDictionary<string>): string {\r\n        if (!format) {\r\n            return \"\";\r\n        }\r\n\r\n        if (!replacements) {\r\n            return format;\r\n        }\r\n\r\n        let formatted: string = \"\";\r\n        let key: string = \"\";\r\n\r\n        const appendToFormatted = (str: string): void => {\r\n            formatted += str;\r\n        };\r\n        const appendToKey = (str: string): void => {\r\n            key += str;\r\n        };\r\n        let appendFunc: (str: string) => void = appendToFormatted;\r\n\r\n        for (let i = 0; i < format.length; i++) {\r\n            const c: string = format[i];\r\n            const next: string = i + 1 < format.length ? format[i + 1] : \"\";\r\n\r\n            switch (c) {\r\n                case \"{\":\r\n                    if (next === \"{\") {\r\n                        appendFunc(\"{\");\r\n                        i++;\r\n                    } else {\r\n                        appendFunc = appendToKey;\r\n                    }\r\n                    break;\r\n\r\n                case \"}\":\r\n                    if (next === \"}\") {\r\n                        appendFunc(\"}\");\r\n                        i++;\r\n                    } else {\r\n                        if (replacements.hasOwnProperty(key)) {\r\n                            formatted += replacements[key];\r\n                        }\r\n\r\n                        appendFunc = appendToFormatted;\r\n                        key = \"\";\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    appendFunc(c);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return formatted;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    RestConfigBase,\r\n    WebsocketConnection,\r\n} from \"../../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary,\r\n} from \"../../common/Exports.js\";\r\nimport { StringUtils } from \"../../common/StringUtils.js\";\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport {\r\n    PropertyId\r\n} from \"../../sdk/Exports.js\";\r\nimport {\r\n    ConversationImpl\r\n} from \"../../sdk/Transcription/Conversation.js\";\r\nimport { HeaderNames } from \"../HeaderNames.js\";\r\nimport { QueryParameterNames } from \"../QueryParameterNames.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./../ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    TranscriberConnectionFactory,\r\n    TranslationConnectionFactory,\r\n    WebsocketMessageFormatter,\r\n} from \"./../Exports.js\";\r\n\r\n/**\r\n * Connection factory for the conversation translator. Handles connecting to the regular translator endpoint,\r\n * as well as the virtual microphone array transcription endpoint\r\n */\r\nexport class ConversationTranslatorConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private static readonly CTS_VIRT_MIC_PATH: string = \"/speech/recognition/dynamicaudio\";\r\n\r\n    private privConvGetter: () => ConversationImpl;\r\n\r\n    public constructor(convGetter: () => ConversationImpl) {\r\n        super();\r\n\r\n        Contracts.throwIfNullOrUndefined(convGetter, \"convGetter\");\r\n        this.privConvGetter = convGetter;\r\n    }\r\n\r\n    public create(config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n        const isVirtMicArrayEndpoint = config.parameters.getProperty(\"ConversationTranslator_MultiChannelAudio\", \"\").toUpperCase() === \"TRUE\";\r\n\r\n        const convInfo = this.privConvGetter().room;\r\n        const region = convInfo.cognitiveSpeechRegion || config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"\");\r\n\r\n        const replacementValues: IStringDictionary<string> = {\r\n            hostSuffix: ConnectionFactoryBase.getHostSuffix(region),\r\n            path: ConversationTranslatorConnectionFactory.CTS_VIRT_MIC_PATH,\r\n            region: encodeURIComponent(region)\r\n        };\r\n        replacementValues[QueryParameterNames.Language] = encodeURIComponent(config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"\"));\r\n        replacementValues[QueryParameterNames.CtsMeetingId] = encodeURIComponent(convInfo.roomId);\r\n        replacementValues[QueryParameterNames.CtsDeviceId] = encodeURIComponent(convInfo.participantId);\r\n        replacementValues[QueryParameterNames.CtsIsParticipant] = convInfo.isHost ? \"\" : (\"&\" + QueryParameterNames.CtsIsParticipant);\r\n\r\n        let endpointUrl: string = \"\";\r\n        const queryParams: IStringDictionary<string> = {};\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (isVirtMicArrayEndpoint) {\r\n            // connecting to the conversation transcription virtual microphone array endpoint\r\n            endpointUrl = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\r\n            if (!endpointUrl) {\r\n                const hostName = config.parameters.getProperty(\r\n                    PropertyId.SpeechServiceConnection_Host,\r\n                    \"transcribe.{region}.cts.speech{hostSuffix}\");\r\n\r\n                endpointUrl = \"wss://\" + hostName + \"{path}\";\r\n            }\r\n\r\n            // because the region can change during a session, we support being passed a format string which we can then\r\n            // replace with the correct information.\r\n            endpointUrl = StringUtils.formatString(endpointUrl, replacementValues);\r\n\r\n            const parsedUrl = new URL(endpointUrl);\r\n            parsedUrl.searchParams.forEach((val: string, key: string): void => {\r\n                queryParams[key] = val;\r\n            });\r\n\r\n            const connFactory = new TranscriberConnectionFactory();\r\n            connFactory.setQueryParams(queryParams, config, endpointUrl);\r\n\r\n            // Some query parameters are required for the CTS endpoint, let's explicity set them here\r\n            queryParams[QueryParameterNames.CtsMeetingId] = replacementValues[QueryParameterNames.CtsMeetingId];\r\n            queryParams[QueryParameterNames.CtsDeviceId] = replacementValues[QueryParameterNames.CtsDeviceId];\r\n            if (!convInfo.isHost) {\r\n                queryParams[QueryParameterNames.CtsIsParticipant] = \"\"; // this doesn't have a value so set to an empty string\r\n            }\r\n\r\n            if (!(QueryParameterNames.Format in queryParams)) {\r\n                queryParams[QueryParameterNames.Format] = \"simple\";\r\n            }\r\n\r\n            parsedUrl.searchParams.forEach((val: string, key: string): void => {\r\n                parsedUrl.searchParams.set(key, queryParams[key]);\r\n                delete queryParams[key];\r\n            });\r\n\r\n            endpointUrl = parsedUrl.toString();\r\n\r\n        } else {\r\n            // connecting to regular translation endpoint\r\n            const connFactory = new TranslationConnectionFactory();\r\n\r\n            endpointUrl = connFactory.getEndpointUrl(config, true);\r\n            endpointUrl = StringUtils.formatString(endpointUrl, replacementValues);\r\n\r\n            connFactory.setQueryParams(queryParams, config, endpointUrl);\r\n        }\r\n\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n        headers[RestConfigBase.configParams.token] = convInfo.token;\r\n        if (!!authInfo.token) {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n\r\n        const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"\").toUpperCase() === \"TRUE\";\r\n        return new WebsocketConnection(endpointUrl, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ConversationConnectionConfig,\r\n    IAuthentication,\r\n    ServicePropertiesPropertyName,\r\n} from \"../../common.speech/Exports.js\";\r\nimport { ConversationTranslatorConnectionFactory } from \"../../common.speech/Transcription/ConversationTranslatorConnectionFactory.js\";\r\nimport {\r\n    IDisposable,\r\n    IErrorMessages,\r\n    IStringDictionary,\r\n    marshalPromiseToCallbacks\r\n} from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ServicePropertyChannel,\r\n    SessionEventArgs,\r\n    SpeechTranslationConfig,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognizer\r\n} from \"../Exports.js\";\r\nimport { ConversationImpl } from \"./Conversation.js\";\r\nimport {\r\n    ConversationCommon,\r\n    ConversationExpirationEventArgs,\r\n    ConversationHandler,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    IConversationTranslator,\r\n    Participant\r\n} from \"./Exports.js\";\r\nimport { Callback, IConversation } from \"./IConversation.js\";\r\n\r\nexport enum SpeechState {\r\n    Inactive, Connecting, Connected\r\n}\r\n\r\n// child class of TranslationRecognizer meant only for use with ConversationTranslator\r\nclass ConversationTranslationRecognizer extends TranslationRecognizer {\r\n    private privTranslator: ConversationTranslator;\r\n    private privSpeechState: SpeechState;\r\n\r\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig: AudioConfig, translator: ConversationTranslator, convGetter: () => ConversationImpl) {\r\n\r\n        super(speechConfig, audioConfig, new ConversationTranslatorConnectionFactory(convGetter));\r\n\r\n        this.privSpeechState = SpeechState.Inactive;\r\n        if (!!translator) {\r\n            this.privTranslator = translator;\r\n            this.sessionStarted = (): void => {\r\n                this.privSpeechState = SpeechState.Connected;\r\n            };\r\n\r\n            this.sessionStopped = (): void => {\r\n                this.privSpeechState = SpeechState.Inactive;\r\n            };\r\n\r\n            this.recognizing = (tr: TranslationRecognizer, e: TranslationRecognitionEventArgs): void => {\r\n                if (!!this.privTranslator.recognizing) {\r\n                    this.privTranslator.recognizing(this.privTranslator, e);\r\n                }\r\n            };\r\n\r\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\r\n            this.recognized = async (tr: TranslationRecognizer, e: TranslationRecognitionEventArgs): Promise<void> => {\r\n                // if there is an error connecting to the conversation service from the speech service the error will be returned in the ErrorDetails field.\r\n                if (e.result?.errorDetails) {\r\n                    await this.cancelSpeech();\r\n                    // TODO: format the error message contained in 'errorDetails'\r\n                    this.fireCancelEvent(e.result.errorDetails);\r\n                } else {\r\n                    if (!!this.privTranslator.recognized) {\r\n                        this.privTranslator.recognized(this.privTranslator, e);\r\n                    }\r\n                }\r\n                return;\r\n            };\r\n\r\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\r\n            this.canceled = async (): Promise<void> => {\r\n                if (this.privSpeechState !== SpeechState.Inactive) {\r\n                    try {\r\n                        await this.cancelSpeech();\r\n                    } catch (error) {\r\n                        this.privSpeechState = SpeechState.Inactive;\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    public get state(): SpeechState {\r\n        return this.privSpeechState;\r\n    }\r\n\r\n    public set state(newState: SpeechState) {\r\n        this.privSpeechState = newState;\r\n    }\r\n\r\n    public set authentication(token: IAuthentication) {\r\n        this.privReco.authentication = token;\r\n    }\r\n\r\n\r\n    public onConnection(): void {\r\n        this.privSpeechState = SpeechState.Connected;\r\n    }\r\n\r\n    public async onCancelSpeech(): Promise<void> {\r\n        this.privSpeechState = SpeechState.Inactive;\r\n        await this.cancelSpeech();\r\n    }\r\n\r\n    /**\r\n     * Fire a cancel event\r\n     * @param error\r\n     */\r\n    private fireCancelEvent(error: string): void {\r\n        try {\r\n            if (!!this.privTranslator.canceled) {\r\n                const cancelEvent: ConversationTranslationCanceledEventArgs = new ConversationTranslationCanceledEventArgs(\r\n                    CancellationReason.Error,\r\n                    error,\r\n                    CancellationErrorCode.RuntimeError\r\n                    );\r\n\r\n                this.privTranslator.canceled(this.privTranslator, cancelEvent);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private async cancelSpeech(): Promise<void> {\r\n        try {\r\n            this.stopContinuousRecognitionAsync();\r\n            await this.privReco?.disconnect();\r\n            this.privSpeechState = SpeechState.Inactive;\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Join, leave or connect to a conversation.\r\n */\r\nexport class ConversationTranslator extends ConversationCommon implements IConversationTranslator, IDisposable {\r\n\r\n    public canceled: (sender: ConversationHandler, event: ConversationTranslationCanceledEventArgs) => void;\r\n    public conversationExpiration: (sender: IConversationTranslator, event: ConversationExpirationEventArgs) => void;\r\n    public participantsChanged: (sender: IConversationTranslator, event: ConversationParticipantsChangedEventArgs) => void;\r\n    public sessionStarted: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n    public sessionStopped: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n    public textMessageReceived: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n\r\n    // Callbacks for whole conversation results\r\n    public transcribed: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n    public transcribing: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n\r\n    // Callbacks for detecting speech/translation results from self\r\n    public recognized: (sender: IConversationTranslator, event: TranslationRecognitionEventArgs) => void;\r\n    public recognizing: (sender: IConversationTranslator, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    private privSpeechRecognitionLanguage: string;\r\n    private privProperties: PropertyCollection;\r\n    private privIsDisposed: boolean;\r\n    private privCTRecognizer: ConversationTranslationRecognizer;\r\n    private privIsSpeaking: boolean;\r\n    private privConversation: ConversationImpl;\r\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\r\n    private privPlaceholderKey: string;\r\n    private privPlaceholderRegion: string;\r\n\r\n    public constructor(audioConfig?: AudioConfig) {\r\n        super(audioConfig);\r\n        this.privIsDisposed = false;\r\n        this.privIsSpeaking = false;\r\n        this.privPlaceholderKey = \"abcdefghijklmnopqrstuvwxyz012345\";\r\n        this.privPlaceholderRegion = \"westus\";\r\n        this.privProperties = new PropertyCollection();\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechRecognitionLanguage;\r\n    }\r\n\r\n    public get participants(): Participant[] {\r\n        return this.privConversation?.participants;\r\n    }\r\n\r\n    private get canSpeak(): boolean {\r\n\r\n        // is there a Conversation websocket available and has the Recognizer been set up\r\n        if (!this.privConversation.isConnected || !this.privCTRecognizer) {\r\n            return false;\r\n        }\r\n\r\n        // is the user already speaking\r\n        if (this.privIsSpeaking || this.privCTRecognizer.state === SpeechState.Connected || this.privCTRecognizer.state === SpeechState.Connecting) {\r\n            return false;\r\n        }\r\n\r\n        // is the user muted\r\n        if (this.privConversation.isMutedByHost) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public onToken(token: IAuthentication): void {\r\n        this.privCTRecognizer.authentication = token;\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string): void {\r\n        const currentProperties: IStringDictionary<string> = JSON.parse(this.privProperties.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        currentProperties[name] = value;\r\n\r\n        this.privProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\r\n    }\r\n\r\n    /**\r\n     * Join a conversation. If this is the host, pass in the previously created Conversation object.\r\n     * @param conversation\r\n     * @param nickname\r\n     * @param lang\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public joinConversationAsync(conversation: IConversation, nickname: string, cb?: Callback, err?: Callback): void;\r\n    public joinConversationAsync(conversationId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void;\r\n    public joinConversationAsync(conversation: string | IConversation, nickname: string, param1?: string | Callback, param2?: Callback, param3?: Callback): void {\r\n\r\n        try {\r\n\r\n            if (typeof conversation === \"string\") {\r\n\r\n                Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\r\n                Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n\r\n                if (!!this.privConversation) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedStart), param3);\r\n                }\r\n\r\n                let lang: string = param1 as string;\r\n                if (lang === undefined || lang === null || lang === \"\") {\r\n                    lang = ConversationConnectionConfig.defaultLanguageCode;\r\n                }\r\n\r\n                // create a placeholder config\r\n                this.privSpeechTranslationConfig = SpeechTranslationConfig.fromSubscription(\r\n                    this.privPlaceholderKey,\r\n                    this.privPlaceholderRegion);\r\n                this.privSpeechTranslationConfig.setProfanity(ProfanityOption.Masked);\r\n                this.privSpeechTranslationConfig.addTargetLanguage(lang);\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], lang);\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Name], nickname);\r\n\r\n                const propertyIdsToCopy: (string | PropertyId)[] = [\r\n                    PropertyId.SpeechServiceConnection_Host,\r\n                    PropertyId.ConversationTranslator_Host,\r\n                    PropertyId.SpeechServiceConnection_Endpoint,\r\n                    PropertyId.SpeechServiceConnection_ProxyHostName,\r\n                    PropertyId.SpeechServiceConnection_ProxyPassword,\r\n                    PropertyId.SpeechServiceConnection_ProxyPort,\r\n                    PropertyId.SpeechServiceConnection_ProxyUserName,\r\n                    \"ConversationTranslator_MultiChannelAudio\",\r\n                    \"ConversationTranslator_Region\"\r\n                ];\r\n\r\n                for (const prop of propertyIdsToCopy) {\r\n                    const value = this.privProperties.getProperty(prop);\r\n                    if (value) {\r\n                        const key = typeof prop === \"string\" ? prop : PropertyId[prop];\r\n                        this.privSpeechTranslationConfig.setProperty(key, value);\r\n                    }\r\n                }\r\n\r\n                const currentProperties  = JSON.parse(this.privProperties.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n                for (const prop of Object.keys(currentProperties)) {\r\n                    this.privSpeechTranslationConfig.setServiceProperty(prop, currentProperties[prop], ServicePropertyChannel.UriQueryParameter);\r\n                }\r\n\r\n                // join the conversation\r\n                this.privConversation = new ConversationImpl(this.privSpeechTranslationConfig);\r\n                this.privConversation.conversationTranslator = this;\r\n\r\n                this.privConversation.joinConversationAsync(\r\n                    conversation,\r\n                    nickname,\r\n                    lang,\r\n                    ((result: string): void => {\r\n\r\n                        if (!result) {\r\n                            this.handleError(new Error(this.privErrors.permissionDeniedConnect), param3);\r\n                        }\r\n\r\n                        this.privSpeechTranslationConfig.authorizationToken = result;\r\n                        this.privConversation.room.isHost = false;\r\n\r\n                        // connect to the ws\r\n                        this.privConversation.startConversationAsync(\r\n                            ((): void => {\r\n                                this.handleCallback(param2, param3);\r\n                            }),\r\n                            ((error: any): void => {\r\n                                this.handleError(error, param3);\r\n                            }));\r\n\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, param3);\r\n                    }));\r\n\r\n            } else if (typeof conversation === \"object\") {\r\n\r\n                Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\r\n                Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n\r\n                // save the nickname\r\n                this.privProperties.setProperty(PropertyId.ConversationTranslator_Name, nickname);\r\n                // ref the conversation object\r\n                this.privConversation = conversation as ConversationImpl;\r\n                // ref the conversation translator object\r\n                this.privConversation.conversationTranslator = this;\r\n                this.privConversation.room.isHost = true;\r\n\r\n                Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedConnect);\r\n                Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\r\n\r\n                this.privSpeechTranslationConfig = conversation.config;\r\n\r\n                this.handleCallback(param1 as Callback, param2);\r\n            } else {\r\n                this.handleError(\r\n                    new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"invalid conversation type\")),\r\n                    param2);\r\n            }\r\n\r\n        } catch (error) {\r\n            this.handleError(error, typeof param1 === \"string\" ? param3 : param2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Leave the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public leaveConversationAsync(cb?: Callback, err?: Callback): void {\r\n\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n\r\n            // stop the speech websocket\r\n            await this.cancelSpeech();\r\n            // stop the websocket\r\n            await this.privConversation.endConversationImplAsync();\r\n            // https delete request\r\n            await this.privConversation.deleteConversationImplAsync();\r\n            this.dispose();\r\n\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Send a text message\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\r\n\r\n        try {\r\n            Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", message));\r\n\r\n            this.privConversation.sendTextMessageAsync(message, cb, err);\r\n        } catch (error) {\r\n\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start speaking\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public startTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            try {\r\n                Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\r\n                Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\r\n\r\n                if (this.privCTRecognizer === undefined) {\r\n                    await this.connectTranslatorRecognizer();\r\n                }\r\n                Contracts.throwIfNullOrUndefined(this.privCTRecognizer, this.privErrors.permissionDeniedSend);\r\n\r\n                if (!this.canSpeak) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n                }\r\n\r\n                await this.startContinuousRecognition();\r\n\r\n                this.privIsSpeaking = true;\r\n            } catch (error) {\r\n                this.privIsSpeaking = false;\r\n                await this.cancelSpeech();\r\n                throw error;\r\n            }\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stop speaking\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public stopTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            try {\r\n                if (!this.privIsSpeaking) {\r\n                    // stop speech\r\n                    await this.cancelSpeech();\r\n                    return;\r\n                }\r\n\r\n                // stop the recognition but leave the websocket open\r\n                this.privIsSpeaking = false;\r\n                await new Promise((resolve: () => void, reject: (error: string) => void): void => {\r\n                    this.privCTRecognizer.stopContinuousRecognitionAsync(resolve, reject);\r\n                });\r\n\r\n            } catch (error) {\r\n                await this.cancelSpeech();\r\n            }\r\n        })(), cb, err);\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(reason?: string, success?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            if (this.isDisposed && !this.privIsSpeaking) {\r\n                return;\r\n            }\r\n            await this.cancelSpeech();\r\n            this.privIsDisposed = true;\r\n            this.privSpeechTranslationConfig.close();\r\n            this.privSpeechRecognitionLanguage = undefined;\r\n            this.privProperties = undefined;\r\n            this.privAudioConfig = undefined;\r\n            this.privSpeechTranslationConfig = undefined;\r\n            this.privConversation.dispose();\r\n            this.privConversation = undefined;\r\n        })(), success, err);\r\n    }\r\n\r\n    /**\r\n     * Cancel the speech websocket\r\n     */\r\n    private async cancelSpeech(): Promise<void> {\r\n        try {\r\n            this.privIsSpeaking = false;\r\n            await this.privCTRecognizer?.onCancelSpeech();\r\n            this.privCTRecognizer = undefined;\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Connect to the speech translation recognizer.\r\n     * Currently there is no language validation performed before sending the SpeechLanguage code to the service.\r\n     * If it's an invalid language the raw error will be: 'Error during WebSocket handshake: Unexpected response code: 400'\r\n     * e.g. pass in 'fr' instead of 'fr-FR', or a text-only language 'cy'\r\n     */\r\n    private async connectTranslatorRecognizer(): Promise<void> {\r\n        try {\r\n\r\n            if (this.privAudioConfig === undefined) {\r\n                this.privAudioConfig = AudioConfig.fromDefaultMicrophoneInput();\r\n            }\r\n\r\n            // clear the temp subscription key if it's a participant joining\r\n            if (this.privSpeechTranslationConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key])\r\n                === this.privPlaceholderKey) {\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Key], \"\");\r\n            }\r\n\r\n            const convGetter = (): ConversationImpl => this.privConversation;\r\n            this.privCTRecognizer = new ConversationTranslationRecognizer(this.privSpeechTranslationConfig, this.privAudioConfig, this, convGetter);\r\n        } catch (error) {\r\n            await this.cancelSpeech();\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle the start speaking request\r\n     */\r\n    private startContinuousRecognition(): Promise<void> {\r\n        return new Promise((resolve: () => void, reject: (error: string) => void): void => {\r\n            this.privCTRecognizer.startContinuousRecognitionAsync(resolve, reject);\r\n        });\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OutputFormatPropertyName,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    // SpeechConnectionFactory,\r\n    ConversationTranscriberConnectionFactory,\r\n    SpeechServiceConfig,\r\n    ConversationTranscriptionServiceRecognizer,\r\n} from \"../../common.speech/Exports.js\";\r\nimport { marshalPromiseToCallbacks } from \"../../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"../Audio/AudioConfig.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    AutoDetectSourceLanguageConfig,\r\n    ConversationTranscriptionEventArgs,\r\n    ConversationTranscriptionCanceledEventArgs,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n} from \"../Exports.js\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"../SpeechConfig.js\";\r\n\r\n/**\r\n * Performs speech recognition with speaker separation from microphone, file, or other audio input streams, and gets transcribed text as result.\r\n * @class ConversationTranscriber\r\n */\r\nexport class ConversationTranscriber extends Recognizer {\r\n    private privDisposedRecognizer: boolean;\r\n\r\n    /**\r\n     * ConversationTranscriber constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            speechConfigImpl.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        super(audioConfig, speechConfigImpl.properties, new ConversationTranscriberConnectionFactory());\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"2\");\r\n        this.privDisposedRecognizer = false;\r\n    }\r\n\r\n    /**\r\n     * ConversationTranscriber constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): ConversationTranscriber {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        const recognizer = new ConversationTranscriber(speechConfig, audioConfig);\r\n        return recognizer;\r\n    }\r\n\r\n    /**\r\n     * The event transcribing signals that an intermediate transcription result is received.\r\n     * @member ConversationTranscriber.prototype.transcribing\r\n     * @function\r\n     * @public\r\n     */\r\n    public transcribing: (sender: Recognizer, event: ConversationTranscriptionEventArgs) => void;\r\n\r\n    /**\r\n     * The event transcriber signals that a final recognition result is received.\r\n     * @member ConversationTranscriber.prototype.transcribed\r\n     * @function\r\n     * @public\r\n     */\r\n    public transcribed: (sender: Recognizer, event: ConversationTranscriptionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during transcription.\r\n     * @member ConversationTranscriber.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: Recognizer, event: ConversationTranscriptionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the endpoint id of a customized speech model that is used for transcription.\r\n     * @member ConversationTranscriber.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.\r\n     */\r\n    public get endpointId(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_EndpointId, \"00000000-0000-0000-0000-000000000000\");\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member ConversationTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member ConversationTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Gets the spoken language of transcription.\r\n     * @member ConversationTranscriber.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of transcription.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format of transcription.\r\n     * @member ConversationTranscriber.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} The output format of transcription.\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        if (this.properties.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) === OutputFormat[OutputFormat.Simple]) {\r\n            return OutputFormat.Simple;\r\n        } else {\r\n            return OutputFormat.Detailed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this conversation transcriber.\r\n     * @member ConversationTranscriber.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts conversation transcription, until stopTranscribingAsync() is called.\r\n     * User must subscribe to events to receive transcription results.\r\n     * @member ConversationTranscriber.prototype.startTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startTranscribingAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops conversation transcription.\r\n     * @member ConversationTranscriber.prototype.stopTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopTranscribingAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member ConversationTranscriber.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member SpeechRecognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n            await this.implRecognizerStop();\r\n        }\r\n\r\n        await super.dispose(disposing);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        recognizerConfig.isSpeakerDiarizationEnabled = true;\r\n        return new ConversationTranscriptionServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\n/* eslint-disable max-classes-per-file */\r\nimport { PropertyCollection } from \"../Exports.js\";\r\n\r\n/**\r\n * Represents a user in a conversation.\r\n * Added in version 1.4.0\r\n */\r\nexport interface IUser {\r\n    /** Gets the user's ID */\r\n    readonly userId: string;\r\n}\r\n\r\nexport class User implements IUser {\r\n    private privUserId: string;\r\n\r\n    public constructor(userId: string) {\r\n        this.privUserId = userId;\r\n    }\r\n\r\n    public get userId(): string {\r\n        return this.privUserId;\r\n    }\r\n}\r\n\r\nexport interface VoiceSignature {\r\n    Version: number;\r\n    Tag: string;\r\n    Data: string;\r\n}\r\n\r\nexport interface TranscriptionParticipant {\r\n    /** The unique identifier for the participant. */\r\n    readonly id: string;\r\n    /** The participant's preferred spoken language. */\r\n    readonly preferredLanguage: string;\r\n    /** The participant's voice signature */\r\n    readonly voice: string;\r\n}\r\n\r\n/**\r\n * Represents a participant in a conversation.\r\n * Added in version 1.4.0\r\n */\r\nexport interface IParticipant extends TranscriptionParticipant {\r\n    /** Gets the colour of the user's avatar as an HTML hex string (e.g. FF0000 for red). */\r\n    readonly avatar: string;\r\n    /**\r\n     * The participant's display name. Please note that there may be more than one participant\r\n     * with the same name. You can use <see cref=\"Id\"/> property to tell them apart.\r\n     */\r\n    readonly displayName: string;\r\n    /** Gets whether or not this participant is the host. */\r\n    readonly isHost: boolean;\r\n    /** Gets whether or not this participant is muted. */\r\n    readonly isMuted: boolean;\r\n    /** Gets whether or not the participant is using Text To Speech (TTS). */\r\n    readonly isUsingTts: boolean;\r\n    /** Contains properties of the participant. */\r\n    readonly properties: PropertyCollection;\r\n}\r\n\r\nexport class Participant implements IParticipant {\r\n    private privAvatar: string;\r\n    private privDisplayName: string;\r\n    private privId: string;\r\n    private privIsHost: boolean;\r\n    private privIsMuted: boolean;\r\n    private privIsUsingTts: boolean;\r\n    private privPreferredLanguage: string;\r\n    private privVoice: string;\r\n    private privProperties: PropertyCollection;\r\n\r\n    public constructor(id: string, avatar: string, displayName: string, isHost: boolean, isMuted: boolean, isUsingTts: boolean, preferredLanguage: string, voice?: string) {\r\n        this.privId = id;\r\n        this.privAvatar = avatar;\r\n        this.privDisplayName = displayName;\r\n        this.privIsHost = isHost;\r\n        this.privIsMuted = isMuted;\r\n        this.privIsUsingTts = isUsingTts;\r\n        this.privPreferredLanguage = preferredLanguage;\r\n        this.privVoice = voice;\r\n        this.privProperties = new PropertyCollection();\r\n    }\r\n\r\n    public get avatar(): string {\r\n        return this.privAvatar;\r\n    }\r\n\r\n    public get displayName(): string {\r\n        return this.privDisplayName;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public get preferredLanguage(): string {\r\n        return this.privPreferredLanguage;\r\n    }\r\n\r\n    public get isHost(): boolean {\r\n        return this.privIsHost;\r\n    }\r\n\r\n    public get isMuted(): boolean {\r\n        return this.privIsMuted;\r\n    }\r\n\r\n    public get isUsingTts(): boolean {\r\n        return this.privIsUsingTts;\r\n    }\r\n\r\n    public get voice(): string {\r\n        return this.privVoice;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public static From(id: string, language: string, voice: string): IParticipant {\r\n        return new Participant(id, \"\", id, false, false, false, language, voice);\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nexport enum ParticipantChangedReason {\r\n    /** Participant has joined the conversation. */\r\n    JoinedConversation,\r\n\r\n    /** Participant has left the conversation. This could be voluntary, or involuntary\r\n     * (e.g. they are experiencing networking issues).\r\n     */\r\n    LeftConversation,\r\n\r\n    /** The participants' state has changed (e.g. they became muted, changed their nickname). */\r\n    Updated\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ConversationConnectionConfig,\r\n    ConversationManager,\r\n    ConversationReceivedTranslationEventArgs,\r\n    ConversationRecognizer,\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IInternalConversation,\r\n    IInternalParticipant,\r\n    InternalParticipants,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs,\r\n    TranscriberRecognizer\r\n} from \"../../common.speech/Exports.js\";\r\nimport {\r\n    IDisposable,\r\n    IErrorMessages,\r\n    marshalPromiseToCallbacks\r\n} from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    ConversationTranslator,\r\n    Participant,\r\n    ParticipantChangedReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SpeechTranslationConfig,\r\n} from \"../Exports.js\";\r\nimport { SpeechTranslationConfigImpl } from \"../SpeechTranslationConfig.js\";\r\nimport { Callback, MeetingInfo, MeetingProperties, IMeeting } from \"./IMeeting.js\";\r\nimport { IParticipant, IUser, TranscriptionParticipant } from \"./IParticipant.js\";\r\n\r\nexport abstract class Meeting implements IMeeting {\r\n\r\n    protected constructor() {\r\n        return;\r\n    }\r\n\r\n    public abstract get authorizationToken(): string;\r\n\r\n    public abstract get config(): SpeechTranslationConfig;\r\n\r\n    public abstract get meetingId(): string;\r\n    public abstract get meetingInfo(): MeetingInfo;\r\n    public abstract get properties(): PropertyCollection;\r\n    public abstract get speechRecognitionLanguage(): string;\r\n    public abstract get participants(): Participant[];\r\n    public abstract set authorizationToken(value: string);\r\n    public abstract get isConnected(): boolean;\r\n\r\n    /**\r\n     * Create a meeting\r\n     * @param speechConfig\r\n     * @param meetingId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public static createMeetingAsync(speechConfig: SpeechTranslationConfig, meetingId: string, arg3?: Callback, arg4?: Callback): Meeting {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"config\"));\r\n        Contracts.throwIfNullOrUndefined(speechConfig.region, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Region\"));\r\n        Contracts.throwIfNull(meetingId, \"meetingId\");\r\n        if (meetingId.length === 0) {\r\n            throw new Error(\"meetingId cannot be empty\");\r\n        }\r\n        if (!speechConfig.subscriptionKey && !speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceAuthorization_Token])) {\r\n            Contracts.throwIfNullOrUndefined(speechConfig.subscriptionKey, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Key\"));\r\n        }\r\n        const meetingImpl = new MeetingImpl(speechConfig, meetingId);\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {})(), arg3, arg4);\r\n        return meetingImpl;\r\n    }\r\n\r\n    /** Start a meeting. */\r\n    public abstract startMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Delete a meeting. After this no one will be able to join the meeting. */\r\n    public abstract deleteMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** End a meeting. */\r\n    public abstract endMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Lock a meeting. This will prevent new participants from joining. */\r\n    public abstract lockMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Add Participant to Meeting. */\r\n    public abstract addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute all other participants in the Meeting. After this no other participants will\r\n     * have their speech recognitions broadcast, nor be able to send text messages.\r\n     */\r\n    public abstract muteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Remove a participant from a meeting using the user id, Participant or User object\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unlocks a meeting. */\r\n    public abstract unlockMeetingAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unmute all other participants in the meeting. */\r\n    public abstract unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Unmute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n}\r\n\r\nexport class MeetingImpl extends Meeting implements IDisposable {\r\n\r\n    private privConfig: SpeechTranslationConfig;\r\n    private privProperties: PropertyCollection;\r\n    private privLanguage: string;\r\n    private privToken: string;\r\n    private privIsDisposed: boolean;\r\n    private privRoom: IInternalConversation;\r\n    private privManager: ConversationManager;\r\n    private privConversationRecognizer: ConversationRecognizer;\r\n    private privIsConnected: boolean;\r\n    private privParticipants: InternalParticipants;\r\n    private privIsReady: boolean;\r\n    private privConversationTranslator: ConversationTranslator;\r\n    private privTranscriberRecognizer: TranscriberRecognizer;\r\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\r\n    private privConversationId: string;\r\n    private readonly privTextMessageMaxLength: number;\r\n\r\n    /**\r\n     * Create a Meeting impl\r\n     * @param speechConfig\r\n     * @param {string} id - optional conversationId\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, id: string) {\r\n        super();\r\n        this.privIsConnected = false;\r\n        this.privIsDisposed = false;\r\n        this.privConversationId = \"\";\r\n        this.privProperties = new PropertyCollection();\r\n        this.privManager = new ConversationManager();\r\n\r\n        // check the speech language\r\n        const language: string = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n        if (!language) {\r\n            speechConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], ConversationConnectionConfig.defaultLanguageCode);\r\n        }\r\n        this.privLanguage = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n        this.privConversationId = id;\r\n\r\n        // save the speech config for future usage\r\n        this.privConfig = speechConfig;\r\n\r\n        // save the config properties\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n        this.privProperties = configImpl.properties.clone();\r\n        this.privIsConnected = false;\r\n        this.privParticipants = new InternalParticipants();\r\n        this.privIsReady = false;\r\n        this.privTextMessageMaxLength = 1000;\r\n    }\r\n\r\n    // get the internal data about a conversation\r\n    public get room(): IInternalConversation {\r\n        return this.privRoom;\r\n    }\r\n\r\n    // get the wrapper for connecting to the websockets\r\n    public get connection(): ConversationRecognizer {\r\n        return this.privConversationRecognizer; // this.privConnection;\r\n    }\r\n\r\n    // get the config\r\n    public get config(): SpeechTranslationConfig {\r\n        return this.privConfig;\r\n    }\r\n\r\n    // get the meeting Id\r\n    public get meetingId(): string {\r\n        return this.privRoom ? this.privRoom.roomId : this.privConversationId;\r\n    }\r\n\r\n    // get the properties\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    // get the speech language\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get isMutedByHost(): boolean {\r\n        return this.privParticipants.me?.isHost ? false : this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    public get isConnected(): boolean {\r\n        return this.privIsConnected && this.privIsReady;\r\n    }\r\n\r\n    public get participants(): Participant[] {\r\n        return this.toParticipants(true);\r\n    }\r\n\r\n    public get me(): Participant {\r\n        return this.toParticipant(this.privParticipants.me);\r\n    }\r\n\r\n    public get host(): Participant {\r\n        return this.toParticipant(this.privParticipants.host);\r\n    }\r\n\r\n    public get transcriberRecognizer(): TranscriberRecognizer {\r\n        return this.privTranscriberRecognizer;\r\n    }\r\n\r\n    public get meetingInfo(): MeetingInfo {\r\n        const convId: string = this.meetingId;\r\n        const p: TranscriptionParticipant[] = this.participants.map((part: Participant): TranscriptionParticipant => (\r\n            {\r\n                id: part.id,\r\n                preferredLanguage: part.preferredLanguage,\r\n                voice: part.voice\r\n            }\r\n        ));\r\n        const props: MeetingProperties = {};\r\n        for (const key of ConversationConnectionConfig.transcriptionEventKeys) {\r\n            const val: string = this.properties.getProperty(key, \"\");\r\n            if (val !== \"\") {\r\n                props[key] = val;\r\n            }\r\n        }\r\n        const info: MeetingInfo = { id: convId, participants: p, meetingProperties: props };\r\n        return info;\r\n    }\r\n\r\n    private get canSend(): boolean {\r\n        return this.privIsConnected && !this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    private get canSendAsHost(): boolean {\r\n        return this.privIsConnected && this.privParticipants.me?.isHost;\r\n    }\r\n\r\n    // get / set the speech auth token\r\n    // eslint-disable-next-line @typescript-eslint/member-ordering\r\n    public get authorizationToken(): string {\r\n        return this.privToken;\r\n    }\r\n\r\n    public set authorizationToken(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"authorizationToken\");\r\n        this.privToken = value;\r\n    }\r\n\r\n    /**\r\n     * Create a new meeting as Host\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public createMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            this.privManager.createOrJoin(this.privProperties, undefined,\r\n                ((room: IInternalConversation): void => {\r\n                    if (!room) {\r\n                        this.handleError(new Error(this.privErrors.permissionDeniedConnect), err);\r\n                    }\r\n                    this.privRoom = room;\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts a new meeting as host.\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public startMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // check if there is already a recognizer\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            // check if there is conversation data available\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedConnect);\r\n            // connect to the conversation websocket\r\n            this.privParticipants.meId = this.privRoom.participantId;\r\n\r\n            // Because ConversationTranslator manually sets up and manages the connection, Conversation\r\n            // has to forward serviceRecognizer connection events that usually get passed automatically\r\n            this.privConversationRecognizer.connected = this.onConnected;\r\n            this.privConversationRecognizer.disconnected = this.onDisconnected;\r\n            this.privConversationRecognizer.canceled = this.onCanceled;\r\n\r\n            this.privConversationRecognizer.participantUpdateCommandReceived = this.onParticipantUpdateCommandReceived;\r\n            this.privConversationRecognizer.lockRoomCommandReceived = this.onLockRoomCommandReceived;\r\n            this.privConversationRecognizer.muteAllCommandReceived = this.onMuteAllCommandReceived;\r\n            this.privConversationRecognizer.participantJoinCommandReceived = this.onParticipantJoinCommandReceived;\r\n            this.privConversationRecognizer.participantLeaveCommandReceived = this.onParticipantLeaveCommandReceived;\r\n            this.privConversationRecognizer.translationReceived = this.onTranslationReceived;\r\n            this.privConversationRecognizer.participantsListReceived = this.onParticipantsListReceived;\r\n            this.privConversationRecognizer.conversationExpiration = this.onConversationExpiration;\r\n\r\n            this.privConversationRecognizer.connect(this.privRoom.token,\r\n                ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Join a meeting as a participant.\r\n     * @param { IParticipant } participant - participant to add\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void {\r\n        Contracts.throwIfNullOrUndefined(participant, \"Participant\");\r\n        marshalPromiseToCallbacks(this.addParticipantImplAsync(participant), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Join a meeting as a participant.\r\n     * @param meeting\r\n     * @param nickname\r\n     * @param lang\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public joinMeetingAsync(meetingId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // TODO\r\n            // if (!!this.privConversationRecognizer) {\r\n            //     throw new Error(this.privErrors.permissionDeniedStart);\r\n            // }\r\n            Contracts.throwIfNullOrWhitespace(meetingId, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversationId\"));\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrWhitespace(lang, this.privErrors.invalidArgs.replace(\"{arg}\", \"language\"));\r\n            // join the conversation\r\n            this.privManager.createOrJoin(this.privProperties, meetingId,\r\n                ((room: IInternalConversation): void => {\r\n                    Contracts.throwIfNullOrUndefined(room, this.privErrors.permissionDeniedConnect);\r\n                    this.privRoom = room;\r\n                    this.privConfig.authorizationToken = room.cognitiveSpeechAuthToken;\r\n                    // join callback\r\n                    if (!!cb) {\r\n                        cb(room.cognitiveSpeechAuthToken);\r\n                    }\r\n                }),\r\n                ((error: any): void => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes a meeting\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public deleteMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.deleteMeetingImplAsync(), cb, err);\r\n    }\r\n\r\n    public async deleteMeetingImplAsync(): Promise<void> {\r\n            Contracts.throwIfNullOrUndefined(this.privProperties, this.privErrors.permissionDeniedConnect);\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.token, this.privErrors.permissionDeniedConnect);\r\n            await this.privManager.leave(this.privProperties, this.privRoom.token);\r\n\r\n            this.dispose();\r\n    }\r\n\r\n    /**\r\n     * Issues a request to close the client websockets\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public endMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.endMeetingImplAsync(), cb, err);\r\n    }\r\n\r\n    public endMeetingImplAsync(): Promise<void> {\r\n        return this.close(true);\r\n    }\r\n\r\n    /**\r\n     * Issues a request to lock the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public lockMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"lock\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getLockCommand(true),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute the meeting\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privConversationRecognizer, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the user's permissions\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(true),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute a participant in the meeting\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, true), ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to remove a participant from the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            if (!!this.privTranscriberRecognizer && userId.hasOwnProperty(\"id\")) {\r\n                // Assume this is a transcription participant\r\n                marshalPromiseToCallbacks(this.removeParticipantImplAsync(userId as IParticipant), cb, err);\r\n            } else {\r\n                Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n                Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n                if (!this.canSendAsHost) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"remove\")), err);\r\n                }\r\n                let participantId = \"\";\r\n                if (typeof userId === \"string\") {\r\n                    participantId = userId;\r\n                } else if (userId.hasOwnProperty(\"id\")) {\r\n                    const participant: IParticipant = userId as IParticipant;\r\n                    participantId = participant.id;\r\n                } else if (userId.hasOwnProperty(\"userId\")) {\r\n                    const user: IUser = userId as IUser;\r\n                    participantId = user.userId;\r\n                }\r\n                Contracts.throwIfNullOrWhitespace(participantId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n                // check the participant exists\r\n                const index: number = this.participants.findIndex((p: Participant): boolean => p.id === participantId);\r\n                if (index === -1) {\r\n                    this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n                }\r\n                if (!!this.privConversationRecognizer) {\r\n                    this.privConversationRecognizer.sendRequest(this.getEjectCommand(participantId), ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                        ((error: any): void => {\r\n                            this.handleError(error, err);\r\n                        }));\r\n                }\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unlock the meeting\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unlockMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unlock\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getLockCommand(false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n                }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute all participants in the meeting\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unmute all\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute a participant in the meeting\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, false), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send a text message\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", \"message\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // TODO: is a max length check required?\r\n            if (message.length > this.privTextMessageMaxLength) {\r\n                this.handleError(new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"message length\")), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getMessageCommand(message), ((): void => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set translated to languages\r\n     * @param {string[]} languages - languages to translate to\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public setTranslatedLanguagesAsync(languages: string[], cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfArrayEmptyOrWhitespace(languages, this.privErrors.invalidArgs.replace(\"{arg}\", \"languages\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getSetTranslateToLanguagesCommand(languages),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change nickname\r\n     * @param {string} nickname - new nickname for the room\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public changeNicknameAsync(nickname: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            if (!!this.privConversationRecognizer) {\r\n                this.privConversationRecognizer.sendRequest(this.getChangeNicknameCommand(nickname),\r\n                    ((): void => {\r\n                        this.handleCallback(cb, err);\r\n                    }),\r\n                    ((error: any): void => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(): void {\r\n        if (this.isDisposed) {\r\n            return;\r\n        }\r\n        this.privIsDisposed = true;\r\n        if (!!this.config) {\r\n            this.config.close();\r\n        }\r\n        this.privConfig = undefined;\r\n        this.privLanguage = undefined;\r\n        this.privProperties = undefined;\r\n        this.privRoom = undefined;\r\n        this.privToken = undefined;\r\n        this.privManager = undefined;\r\n        this.privIsConnected = false;\r\n        this.privIsReady = false;\r\n        this.privParticipants = undefined;\r\n    }\r\n\r\n    public async connectTranscriberRecognizer(recognizer: TranscriberRecognizer): Promise<void> {\r\n        if (!!this.privTranscriberRecognizer) {\r\n            await this.privTranscriberRecognizer.close();\r\n        }\r\n        await recognizer.enforceAudioGating();\r\n        this.privTranscriberRecognizer = recognizer;\r\n        this.privTranscriberRecognizer.meeting = this;\r\n    }\r\n\r\n    public getKeepAlive(): string {\r\n        const nickname: string = (!!this.me) ? this.me.displayName : \"default_nickname\";\r\n        return JSON.stringify({\r\n            id: \"0\",\r\n            nickname,\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.keepAlive\r\n        });\r\n    }\r\n\r\n    /** websocket callbacks */\r\n    /* eslint-disable @typescript-eslint/typedef */\r\n    private onConnected = (e: ConnectionEventArgs): void => {\r\n        this.privIsConnected = true;\r\n        try {\r\n            if (!!this.privConversationTranslator?.sessionStarted) {\r\n                this.privConversationTranslator.sessionStarted(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onDisconnected = (e: ConnectionEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.sessionStopped) {\r\n                this.privConversationTranslator.sessionStopped(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        } finally {\r\n            void this.close(false);\r\n        }\r\n    };\r\n\r\n    private onCanceled = (r: ConversationRecognizer, e: ConversationTranslationCanceledEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.canceled) {\r\n                this.privConversationTranslator.canceled(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantUpdateCommandReceived = (r: ConversationRecognizer, e: ParticipantAttributeEventArgs): void => {\r\n        try {\r\n            const updatedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.id);\r\n            if (updatedParticipant !== undefined) {\r\n\r\n                switch (e.key) {\r\n                    case ConversationTranslatorCommandTypes.changeNickname:\r\n                        updatedParticipant.displayName = e.value as string;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setUseTTS:\r\n                        updatedParticipant.isUsingTts = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setProfanityFiltering:\r\n                        updatedParticipant.profanity = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setMute:\r\n                        updatedParticipant.isMuted = e.value as boolean;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setTranslateToLanguages:\r\n                        updatedParticipant.translateToLanguages = e.value as string[];\r\n                        break;\r\n                }\r\n                this.privParticipants.addOrUpdateParticipant(updatedParticipant);\r\n\r\n                if (!!this.privConversationTranslator) {\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                            [this.toParticipant(updatedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onLockRoomCommandReceived = (): void => {\r\n        // TODO\r\n    };\r\n\r\n    private onMuteAllCommandReceived = (r: ConversationRecognizer, e: MuteAllEventArgs): void => {\r\n        try {\r\n            this.privParticipants.participants.forEach((p: IInternalParticipant): boolean => p.isMuted = (p.isHost ? false : e.isMuted));\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                        this.toParticipants(false), e.sessionId));\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantJoinCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(e.participant);\r\n            if (newParticipant !== undefined) {\r\n                if (!!this.privConversationTranslator) {\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation,\r\n                            [this.toParticipant(newParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantLeaveCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const ejectedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.participant.id);\r\n            if (ejectedParticipant !== undefined) {\r\n                // remove the participant from the internal participants list\r\n                this.privParticipants.deleteParticipant(e.participant.id);\r\n                if (!!this.privConversationTranslator) {\r\n                    // notify subscribers that the participant has left the conversation\r\n                    this.privConversationTranslator.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.LeftConversation,\r\n                            [this.toParticipant(ejectedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onTranslationReceived = (r: ConversationRecognizer, e: ConversationReceivedTranslationEventArgs): void => {\r\n        try {\r\n            switch (e.command) {\r\n                case ConversationTranslatorMessageTypes.final:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.transcribed(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.partial:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.transcribing(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.instantMessage:\r\n                    if (!!this.privConversationTranslator) {\r\n                        this.privConversationTranslator.textMessageReceived(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onParticipantsListReceived = (r: ConversationRecognizer, e: ParticipantsListEventArgs): void => {\r\n        try {\r\n            // check if the session token needs to be updated\r\n            if (e.sessionToken !== undefined && e.sessionToken !== null) {\r\n                this.privRoom.token = e.sessionToken;\r\n            }\r\n            // save the participants\r\n            this.privParticipants.participants = [...e.participants];\r\n            // enable the conversation\r\n            if (this.privParticipants.me !== undefined) {\r\n                this.privIsReady = true;\r\n            }\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation, this.toParticipants(true), e.sessionId));\r\n            }\r\n            // if this is the host, update the nickname if needed\r\n            if (this.me.isHost) {\r\n                const nickname: string = this.privConversationTranslator?.properties.getProperty(PropertyId.ConversationTranslator_Name);\r\n                if (nickname !== undefined && nickname.length > 0 && nickname !== this.me.displayName) {\r\n                    // issue a change nickname request\r\n                    this.changeNicknameAsync(nickname);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n\r\n    private onConversationExpiration = (r: ConversationRecognizer, e: ConversationExpirationEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.conversationExpiration(this.privConversationTranslator, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    };\r\n    /* eslint-enable @typescript-eslint/typedef */\r\n\r\n    private addParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(participant);\r\n        if (newParticipant !== undefined) {\r\n            if (!!this.privTranscriberRecognizer) {\r\n                const meetingInfo = this.meetingInfo;\r\n                meetingInfo.participants = [participant];\r\n                return this.privTranscriberRecognizer.pushMeetingEvent(meetingInfo, \"join\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        this.privParticipants.deleteParticipant(participant.id);\r\n        const meetingInfo = this.meetingInfo;\r\n        meetingInfo.participants = [participant];\r\n        return this.privTranscriberRecognizer.pushMeetingEvent(meetingInfo, \"leave\");\r\n    }\r\n\r\n    private async close(dispose: boolean): Promise<void> {\r\n        try {\r\n            this.privIsConnected = false;\r\n            await this.privConversationRecognizer?.close();\r\n            this.privConversationRecognizer = undefined;\r\n            if (!!this.privConversationTranslator) {\r\n                this.privConversationTranslator.dispose();\r\n            }\r\n        } catch (e) {\r\n            // ignore error\r\n            throw e;\r\n        }\r\n        if (dispose) {\r\n            this.dispose();\r\n        }\r\n    }\r\n\r\n    /** Helpers */\r\n    private handleCallback(cb: () => void, err: (message: string) => void): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e as string);\r\n                }\r\n            }\r\n            cb = undefined;\r\n        }\r\n    }\r\n\r\n    private handleError(error: any, err: (message: string) => void): void {\r\n        if (!!err) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error;\r\n                err(typedError.name + \": \" + typedError.message);\r\n\r\n            } else {\r\n                err(error as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Participant Helpers */\r\n    private toParticipants(includeHost: boolean): Participant[] {\r\n\r\n        const participants: Participant[] = this.privParticipants.participants.map((p: IInternalParticipant): Participant => ( this.toParticipant(p) ) );\r\n        if (!includeHost) {\r\n            return participants.filter((p: Participant): boolean => p.isHost === false);\r\n        } else {\r\n            return participants;\r\n        }\r\n    }\r\n\r\n    private toParticipant(p: IInternalParticipant): Participant {\r\n        return new Participant(p.id, p.avatar, p.displayName, p.isHost, p.isMuted, p.isUsingTts, p.preferredLanguage, p.voice);\r\n    }\r\n\r\n    private getMuteAllCommand(isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingd\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMuteAll,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getMuteCommand(participantId: string, isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMute,\r\n            // eslint-disable-next-line object-shorthand\r\n            participantId: participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getLockCommand(isLocked: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setLockState,\r\n            participantId: this.privRoom.participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isLocked\r\n        });\r\n    }\r\n\r\n    private getEjectCommand(participantId: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.ejectParticipant,\r\n            // eslint-disable-next-line object-shorthand\r\n            participantId: participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n        });\r\n    }\r\n\r\n    private getSetTranslateToLanguagesCommand(languages: string[]): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setTranslateToLanguages,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: languages\r\n        });\r\n    }\r\n\r\n    private getChangeNicknameCommand(nickname: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.changeNickname,\r\n            nickname,\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: nickname\r\n        });\r\n    }\r\n\r\n    private getMessageCommand(message: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"meetingId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n        Contracts.throwIfNullOrWhitespace(message, \"message\");\r\n\r\n        return JSON.stringify({\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            text: message,\r\n            type: ConversationTranslatorMessageTypes.instantMessage\r\n        });\r\n    }\r\n\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { CancellationEventArgsBase } from \"../CancellationEventArgsBase.js\";\r\n\r\nexport class MeetingTranscriptionCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { TranscriberRecognizer } from \"../../common.speech/Exports.js\";\r\nimport { marshalPromiseToCallbacks } from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationEventArgs,\r\n    Connection,\r\n    MeetingTranscriptionEventArgs,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SessionEventArgs\r\n} from \"../Exports.js\";\r\nimport {\r\n    MeetingHandler,\r\n    MeetingImpl,\r\n    MeetingTranscriptionHandler\r\n} from \"./Exports.js\";\r\nimport { Callback, IMeeting } from \"./IMeeting.js\";\r\n\r\nexport class MeetingTranscriber implements MeetingTranscriptionHandler {\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during the meeting.\r\n     * @member MeetingTranscriber.prototype.MeetingCanceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public MeetingCanceled: (sender: MeetingHandler, event: CancellationEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during transcription.\r\n     * @member MeetingTranscriber.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: MeetingHandler, event: CancellationEventArgs) => void;\r\n\r\n     /**\r\n      * The event recognized signals that a final meeting transcription result is received.\r\n      * @member MeetingTranscriber.prototype.transcribed\r\n      * @function\r\n      * @public\r\n      */\r\n    public transcribed: (sender: MeetingTranscriptionHandler, event: MeetingTranscriptionEventArgs) => void;\r\n\r\n     /**\r\n      * The event recognizing signals that an intermediate meeting transcription result is received.\r\n      * @member MeetingTranscriber.prototype.transcribing\r\n      * @function\r\n      * @public\r\n      */\r\n    public transcribing: (sender: MeetingTranscriptionHandler, event: MeetingTranscriptionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session started events.\r\n     * @member MeetingTranscriber.prototype.sessionStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStarted: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session stopped events.\r\n     * @member MeetingTranscriber.prototype.sessionStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStopped: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for meeting started events.\r\n     * @member MeetingTranscriber.prototype.MeetingStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public MeetingStarted: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for meeting stopped events.\r\n     * @member MeetingTranscriber.prototype.MeetingStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public meetingStopped: (sender: MeetingHandler, event: SessionEventArgs) => void;\r\n\r\n    protected privAudioConfig: AudioConfig;\r\n    private privDisposedRecognizer: boolean;\r\n    private privRecognizer: TranscriberRecognizer;\r\n    private privProperties: PropertyCollection;\r\n\r\n    /**\r\n     * MeetingTranscriber constructor.\r\n     * @constructor\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(audioConfig?: AudioConfig) {\r\n        this.privAudioConfig = audioConfig;\r\n        this.privProperties = new PropertyCollection();\r\n        this.privRecognizer = undefined;\r\n        this.privDisposedRecognizer = false;\r\n    }\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member MeetingTranscriber.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this MeetingTranscriber.\r\n     * @member MeetingTranscriber.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this MeetingTranscriber.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * Internal data member to support fromRecognizer* pattern methods on other classes.\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public get internalData(): object {\r\n        return this.privRecognizer.internalData;\r\n    }\r\n\r\n    /**\r\n     * @Deprecated\r\n     * @Obsolete\r\n     * Please use the Connection.fromRecognizer pattern to obtain a connection object\r\n     */\r\n    public get connection(): Connection {\r\n        return Connection.fromRecognizer(this.privRecognizer);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member MeetingTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member MeetingTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * @param {Meeting} meeting - meeting to be recognized\r\n     */\r\n    public joinMeetingAsync(meeting: IMeeting, cb?: Callback, err?: Callback): void {\r\n        /* eslint-disable no-console */\r\n        // console.log(\">> MeetingTranscriber::joinMeetingAsync\");\r\n        /* eslint-enable no-console */\r\n        const meetingImpl = meeting as MeetingImpl;\r\n        Contracts.throwIfNullOrUndefined(MeetingImpl, \"Meeting\");\r\n\r\n        // ref the meeting object\r\n        // create recognizer and subscribe to recognizer events\r\n        this.privRecognizer = new TranscriberRecognizer(meeting.config, this.privAudioConfig);\r\n        Contracts.throwIfNullOrUndefined(this.privRecognizer, \"Recognizer\");\r\n        this.privRecognizer.connectMeetingCallbacks(this);\r\n\r\n        marshalPromiseToCallbacks(meetingImpl.connectTranscriberRecognizer(this.privRecognizer), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts meeting transcription, until stopTranscribingAsync() is called.\r\n     * User must subscribe to events to receive transcription results.\r\n     * @member MeetingTranscriber.prototype.startTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        this.privRecognizer.startContinuousRecognitionAsync(cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts meeting transcription, until stopTranscribingAsync() is called.\r\n     * User must subscribe to events to receive transcription results.\r\n     * @member MeetingTranscriber.prototype.stopTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        this.privRecognizer.stopContinuousRecognitionAsync(cb, err);\r\n    }\r\n\r\n    /**\r\n     * Leave the current meeting. After this is called, you will no longer receive any events.\r\n     */\r\n    public leaveMeetingAsync(cb?: Callback, err?: Callback): void {\r\n        this.privRecognizer.disconnectCallbacks();\r\n        // eslint-disable-next-line\r\n        marshalPromiseToCallbacks((async (): Promise<void> => { return; })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member MeetingTranscriber.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member MeetingTranscriber.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n        if (!!this.privRecognizer) {\r\n            await this.privRecognizer.close();\r\n            this.privRecognizer = undefined;\r\n        }\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n        }\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, RecognitionResult, ResultReason } from \"../Exports.js\";\r\n\r\n/**\r\n * Defines result of conversation transcription.\r\n * @class ConversationTranscriptionResult\r\n */\r\nexport class ConversationTranscriptionResult extends RecognitionResult {\r\n    private readonly privSpeakerId: string;\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @public\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} speakerId - speaker id for conversation transcription.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, text?: string,\r\n                       duration?: number, offset?: number, language?: string,\r\n                       languageDetectionConfidence?: string, speakerId?: string, errorDetails?: string,\r\n                       json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, errorDetails, json, properties);\r\n        this.privSpeakerId = speakerId;\r\n    }\r\n\r\n    /**\r\n     * speaker id\r\n     * @member ConversationTranscriptionResult.prototype.speakerId\r\n     * @function\r\n     * @public\r\n     * @returns {string} id of speaker in given result\r\n     */\r\n    public get speakerId(): string {\r\n        return this.privSpeakerId;\r\n    }\r\n\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nexport { Conversation, ConversationImpl } from \"./Conversation.js\";\r\nexport { ConversationInfo } from \"./IConversation.js\";\r\nexport { ConversationCommon } from \"./ConversationCommon.js\";\r\nexport { ConversationExpirationEventArgs } from \"./ConversationExpirationEventArgs.js\";\r\nexport { ConversationParticipantsChangedEventArgs } from \"./ConversationParticipantsChangedEventArgs.js\";\r\nexport { ConversationTranslationCanceledEventArgs } from \"./ConversationTranslationCanceledEventArgs.js\";\r\nexport { ConversationTranslationEventArgs } from \"./ConversationTranslationEventArgs.js\";\r\nexport { ConversationTranslationResult } from \"./ConversationTranslationResult.js\";\r\nexport { ConversationTranslator } from \"./ConversationTranslator.js\";\r\nexport { ConversationTranscriber } from \"./ConversationTranscriber.js\";\r\nexport { IParticipant, Participant, User, VoiceSignature } from \"./IParticipant.js\";\r\nexport { ParticipantChangedReason } from \"./ParticipantChangedReason.js\";\r\nexport { ConversationHandler, ConversationTranscriptionHandler, IConversationTranslator } from \"./ConversationHandler.js\";\r\nexport { Meeting, MeetingImpl } from \"./Meeting.js\";\r\nexport { MeetingInfo } from \"./IMeeting.js\";\r\nexport { MeetingTranscriptionCanceledEventArgs } from \"./MeetingTranscriptionCanceledEventArgs.js\";\r\nexport { MeetingTranscriber } from \"./MeetingTranscriber.js\";\r\nexport { MeetingHandler, MeetingTranscriptionHandler } from \"./MeetingHandler.js\";\r\nexport { ConversationTranscriptionResult } from \"./ConversationTranscriptionResult.js\";\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    AutoDetectSourceLanguagesOpenRangeOptionName,\r\n    CognitiveSubscriptionKeyAuthentication,\r\n    CognitiveTokenAuthentication,\r\n    Context,\r\n    IAuthentication,\r\n    ISynthesisConnectionFactory,\r\n    OS,\r\n    SpeechServiceConfig,\r\n    SynthesisAdapterBase,\r\n    SynthesisRestAdapter,\r\n    SynthesizerConfig } from \"../common.speech/Exports.js\";\r\nimport { IAudioDestination, IStringDictionary, Queue } from \"../common/Exports.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { PropertyCollection, PropertyId, SpeechConfig, SpeechConfigImpl, SpeechSynthesisResult } from \"./Exports.js\";\r\n\r\nexport abstract class Synthesizer {\r\n    protected privAdapter: SynthesisAdapterBase;\r\n    protected privRestAdapter: SynthesisRestAdapter;\r\n    protected privProperties: PropertyCollection;\r\n    protected privConnectionFactory: ISynthesisConnectionFactory;\r\n    protected privDisposed: boolean;\r\n    protected privSynthesizing: boolean;\r\n    protected synthesisRequestQueue: Queue<SynthesisRequest>;\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member Synthesizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member Synthesizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this Synthesizer.\r\n     * @member Synthesizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechSynthesizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Indicates if auto detect source language is enabled\r\n     * @member Synthesizer.prototype.autoDetectSourceLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {boolean} if auto detect source language is enabled\r\n     */\r\n    public get autoDetectSourceLanguage(): boolean {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages) === AutoDetectSourceLanguagesOpenRangeOptionName;\r\n    }\r\n\r\n    /**\r\n     * Creates and initializes an instance of a Recognizer\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The speech config to initialize the synthesizer.\r\n     */\r\n    protected constructor(speechConfig: SpeechConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n        this.privDisposed = false;\r\n        this.privSynthesizing = false;\r\n        this.synthesisRequestQueue = new Queue<SynthesisRequest>();\r\n    }\r\n\r\n    public buildSsml(text: string): string {\r\n        const languageToDefaultVoice: IStringDictionary<string>  = {\r\n            [\"af-ZA\"]: \"af-ZA-AdriNeural\",\r\n            [\"am-ET\"]: \"am-ET-AmehaNeural\",\r\n            [\"ar-AE\"]: \"ar-AE-FatimaNeural\",\r\n            [\"ar-BH\"]: \"ar-BH-AliNeural\",\r\n            [\"ar-DZ\"]: \"ar-DZ-AminaNeural\",\r\n            [\"ar-EG\"]: \"ar-EG-SalmaNeural\",\r\n            [\"ar-IQ\"]: \"ar-IQ-BasselNeural\",\r\n            [\"ar-JO\"]: \"ar-JO-SanaNeural\",\r\n            [\"ar-KW\"]: \"ar-KW-FahedNeural\",\r\n            [\"ar-LY\"]: \"ar-LY-ImanNeural\",\r\n            [\"ar-MA\"]: \"ar-MA-JamalNeural\",\r\n            [\"ar-QA\"]: \"ar-QA-AmalNeural\",\r\n            [\"ar-SA\"]: \"ar-SA-HamedNeural\",\r\n            [\"ar-SY\"]: \"ar-SY-AmanyNeural\",\r\n            [\"ar-TN\"]: \"ar-TN-HediNeural\",\r\n            [\"ar-YE\"]: \"ar-YE-MaryamNeural\",\r\n            [\"bg-BG\"]: \"bg-BG-BorislavNeural\",\r\n            [\"bn-BD\"]: \"bn-BD-NabanitaNeural\",\r\n            [\"bn-IN\"]: \"bn-IN-BashkarNeural\",\r\n            [\"ca-ES\"]: \"ca-ES-JoanaNeural\",\r\n            [\"cs-CZ\"]: \"cs-CZ-AntoninNeural\",\r\n            [\"cy-GB\"]: \"cy-GB-AledNeural\",\r\n            [\"da-DK\"]: \"da-DK-ChristelNeural\",\r\n            [\"de-AT\"]: \"de-AT-IngridNeural\",\r\n            [\"de-CH\"]: \"de-CH-JanNeural\",\r\n            [\"de-DE\"]: \"de-DE-KatjaNeural\",\r\n            [\"el-GR\"]: \"el-GR-AthinaNeural\",\r\n            [\"en-AU\"]: \"en-AU-NatashaNeural\",\r\n            [\"en-CA\"]: \"en-CA-ClaraNeural\",\r\n            [\"en-GB\"]: \"en-GB-LibbyNeural\",\r\n            [\"en-HK\"]: \"en-HK-SamNeural\",\r\n            [\"en-IE\"]: \"en-IE-ConnorNeural\",\r\n            [\"en-IN\"]: \"en-IN-NeerjaNeural\",\r\n            [\"en-KE\"]: \"en-KE-AsiliaNeural\",\r\n            [\"en-NG\"]: \"en-NG-AbeoNeural\",\r\n            [\"en-NZ\"]: \"en-NZ-MitchellNeural\",\r\n            [\"en-PH\"]: \"en-PH-JamesNeural\",\r\n            [\"en-SG\"]: \"en-SG-LunaNeural\",\r\n            [\"en-TZ\"]: \"en-TZ-ElimuNeural\",\r\n            [\"en-US\"]: \"en-US-AvaMultilingualNeural\",\r\n            [\"en-ZA\"]: \"en-ZA-LeahNeural\",\r\n            [\"es-AR\"]: \"es-AR-ElenaNeural\",\r\n            [\"es-BO\"]: \"es-BO-MarceloNeural\",\r\n            [\"es-CL\"]: \"es-CL-CatalinaNeural\",\r\n            [\"es-CO\"]: \"es-CO-GonzaloNeural\",\r\n            [\"es-CR\"]: \"es-CR-JuanNeural\",\r\n            [\"es-CU\"]: \"es-CU-BelkysNeural\",\r\n            [\"es-DO\"]: \"es-DO-EmilioNeural\",\r\n            [\"es-EC\"]: \"es-EC-AndreaNeural\",\r\n            [\"es-ES\"]: \"es-ES-AlvaroNeural\",\r\n            [\"es-GQ\"]: \"es-GQ-JavierNeural\",\r\n            [\"es-GT\"]: \"es-GT-AndresNeural\",\r\n            [\"es-HN\"]: \"es-HN-CarlosNeural\",\r\n            [\"es-MX\"]: \"es-MX-DaliaNeural\",\r\n            [\"es-NI\"]: \"es-NI-FedericoNeural\",\r\n            [\"es-PA\"]: \"es-PA-MargaritaNeural\",\r\n            [\"es-PE\"]: \"es-PE-AlexNeural\",\r\n            [\"es-PR\"]: \"es-PR-KarinaNeural\",\r\n            [\"es-PY\"]: \"es-PY-MarioNeural\",\r\n            [\"es-SV\"]: \"es-SV-LorenaNeural\",\r\n            [\"es-US\"]: \"es-US-AlonsoNeural\",\r\n            [\"es-UY\"]: \"es-UY-MateoNeural\",\r\n            [\"es-VE\"]: \"es-VE-PaolaNeural\",\r\n            [\"et-EE\"]: \"et-EE-AnuNeural\",\r\n            [\"fa-IR\"]: \"fa-IR-DilaraNeural\",\r\n            [\"fi-FI\"]: \"fi-FI-SelmaNeural\",\r\n            [\"fil-PH\"]: \"fil-PH-AngeloNeural\",\r\n            [\"fr-BE\"]: \"fr-BE-CharlineNeural\",\r\n            [\"fr-CA\"]: \"fr-CA-SylvieNeural\",\r\n            [\"fr-CH\"]: \"fr-CH-ArianeNeural\",\r\n            [\"fr-FR\"]: \"fr-FR-DeniseNeural\",\r\n            [\"ga-IE\"]: \"ga-IE-ColmNeural\",\r\n            [\"gl-ES\"]: \"gl-ES-RoiNeural\",\r\n            [\"gu-IN\"]: \"gu-IN-DhwaniNeural\",\r\n            [\"he-IL\"]: \"he-IL-AvriNeural\",\r\n            [\"hi-IN\"]: \"hi-IN-MadhurNeural\",\r\n            [\"hr-HR\"]: \"hr-HR-GabrijelaNeural\",\r\n            [\"hu-HU\"]: \"hu-HU-NoemiNeural\",\r\n            [\"id-ID\"]: \"id-ID-ArdiNeural\",\r\n            [\"is-IS\"]: \"is-IS-GudrunNeural\",\r\n            [\"it-IT\"]: \"it-IT-IsabellaNeural\",\r\n            [\"ja-JP\"]: \"ja-JP-NanamiNeural\",\r\n            [\"jv-ID\"]: \"jv-ID-DimasNeural\",\r\n            [\"kk-KZ\"]: \"kk-KZ-AigulNeural\",\r\n            [\"km-KH\"]: \"km-KH-PisethNeural\",\r\n            [\"kn-IN\"]: \"kn-IN-GaganNeural\",\r\n            [\"ko-KR\"]: \"ko-KR-SunHiNeural\",\r\n            [\"lo-LA\"]: \"lo-LA-ChanthavongNeural\",\r\n            [\"lt-LT\"]: \"lt-LT-LeonasNeural\",\r\n            [\"lv-LV\"]: \"lv-LV-EveritaNeural\",\r\n            [\"mk-MK\"]: \"mk-MK-AleksandarNeural\",\r\n            [\"ml-IN\"]: \"ml-IN-MidhunNeural\",\r\n            [\"mr-IN\"]: \"mr-IN-AarohiNeural\",\r\n            [\"ms-MY\"]: \"ms-MY-OsmanNeural\",\r\n            [\"mt-MT\"]: \"mt-MT-GraceNeural\",\r\n            [\"my-MM\"]: \"my-MM-NilarNeural\",\r\n            [\"nb-NO\"]: \"nb-NO-PernilleNeural\",\r\n            [\"nl-BE\"]: \"nl-BE-ArnaudNeural\",\r\n            [\"nl-NL\"]: \"nl-NL-ColetteNeural\",\r\n            [\"pl-PL\"]: \"pl-PL-AgnieszkaNeural\",\r\n            [\"ps-AF\"]: \"ps-AF-GulNawazNeural\",\r\n            [\"pt-BR\"]: \"pt-BR-FranciscaNeural\",\r\n            [\"pt-PT\"]: \"pt-PT-DuarteNeural\",\r\n            [\"ro-RO\"]: \"ro-RO-AlinaNeural\",\r\n            [\"ru-RU\"]: \"ru-RU-SvetlanaNeural\",\r\n            [\"si-LK\"]: \"si-LK-SameeraNeural\",\r\n            [\"sk-SK\"]: \"sk-SK-LukasNeural\",\r\n            [\"sl-SI\"]: \"sl-SI-PetraNeural\",\r\n            [\"so-SO\"]: \"so-SO-MuuseNeural\",\r\n            [\"sr-RS\"]: \"sr-RS-NicholasNeural\",\r\n            [\"su-ID\"]: \"su-ID-JajangNeural\",\r\n            [\"sv-SE\"]: \"sv-SE-SofieNeural\",\r\n            [\"sw-KE\"]: \"sw-KE-RafikiNeural\",\r\n            [\"sw-TZ\"]: \"sw-TZ-DaudiNeural\",\r\n            [\"ta-IN\"]: \"ta-IN-PallaviNeural\",\r\n            [\"ta-LK\"]: \"ta-LK-KumarNeural\",\r\n            [\"ta-SG\"]: \"ta-SG-AnbuNeural\",\r\n            [\"te-IN\"]: \"te-IN-MohanNeural\",\r\n            [\"th-TH\"]: \"th-TH-PremwadeeNeural\",\r\n            [\"tr-TR\"]: \"tr-TR-AhmetNeural\",\r\n            [\"uk-UA\"]: \"uk-UA-OstapNeural\",\r\n            [\"ur-IN\"]: \"ur-IN-GulNeural\",\r\n            [\"ur-PK\"]: \"ur-PK-AsadNeural\",\r\n            [\"uz-UZ\"]: \"uz-UZ-MadinaNeural\",\r\n            [\"vi-VN\"]: \"vi-VN-HoaiMyNeural\",\r\n            [\"zh-CN\"]: \"zh-CN-XiaoxiaoNeural\",\r\n            [\"zh-HK\"]: \"zh-HK-HiuMaanNeural\",\r\n            [\"zh-TW\"]: \"zh-TW-HsiaoChenNeural\",\r\n            [\"zu-ZA\"]: \"zu-ZA-ThandoNeural\",\r\n        };\r\n\r\n        let language = this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage, \"en-US\");\r\n        let voice = this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice, \"\");\r\n        let ssml: string = Synthesizer.XMLEncode(text);\r\n        if (this.autoDetectSourceLanguage) {\r\n            language = \"en-US\";\r\n        } else {\r\n            voice = voice || languageToDefaultVoice[language];\r\n        }\r\n        if (voice) {\r\n            ssml = `<voice name='${voice}'>${ssml}</voice>`;\r\n        }\r\n        ssml = `<speak version='1.0' xmlns='http://www.w3.org/2001/10/synthesis' xmlns:mstts='http://www.w3.org/2001/mstts' xmlns:emo='http://www.w3.org/2009/10/emotionml' xml:lang='${language}'>${ssml}</speak>`;\r\n        return ssml;\r\n    }\r\n\r\n    /**\r\n     * This method performs cleanup of resources.\r\n     * The Boolean parameter disposing indicates whether the method is called\r\n     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\r\n     * Derived classes should override this method to dispose resource if needed.\r\n     * @member Synthesizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - Flag to request disposal.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            if (this.privAdapter) {\r\n                await this.privAdapter.dispose();\r\n            }\r\n        }\r\n\r\n        this.privDisposed = true;\r\n    }\r\n\r\n    protected async adapterSpeak(): Promise<void> {\r\n        if (!this.privDisposed && !this.privSynthesizing) {\r\n            this.privSynthesizing = true;\r\n            const request: SynthesisRequest = await this.synthesisRequestQueue.dequeue();\r\n            return this.privAdapter.Speak(request.text, request.isSSML, request.requestId, request.cb, request.err, request.dataStream);\r\n        }\r\n    }\r\n\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // Move to independent class\r\n    // ################################################################################################################\r\n    //\r\n\r\n    // Creates the synthesis adapter\r\n    protected abstract createSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisAdapterBase;\r\n\r\n    // Creates the REST synthesis adapter\r\n    protected abstract createRestSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisRestAdapter;\r\n\r\n    protected createSynthesizerConfig(speechConfig: SpeechServiceConfig): SynthesizerConfig {\r\n        return new SynthesizerConfig(\r\n            speechConfig,\r\n            this.privProperties);\r\n    }\r\n\r\n    // Does the generic synthesizer setup that is common across all synthesizer types.\r\n    protected implCommonSynthesizeSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const synthesizerConfig: SynthesizerConfig = this.createSynthesizerConfig(\r\n            new SpeechServiceConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion))));\r\n\r\n        const subscriptionKey = this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n        const authentication = (subscriptionKey && subscriptionKey !== \"\") ?\r\n            new CognitiveSubscriptionKeyAuthentication(subscriptionKey) :\r\n            new CognitiveTokenAuthentication(\r\n                (): Promise<string> => {\r\n                    const authorizationToken = this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                },\r\n                (): Promise<string> => {\r\n                    const authorizationToken = this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                });\r\n\r\n        this.privAdapter = this.createSynthesisAdapter(\r\n            authentication,\r\n            this.privConnectionFactory,\r\n            synthesizerConfig);\r\n\r\n        this.privRestAdapter = this.createRestSynthesisAdapter(\r\n            authentication,\r\n            synthesizerConfig);\r\n    }\r\n\r\n    protected static XMLEncode(text: string): string {\r\n        return text.replace(/&/g, \"&amp;\")\r\n            .replace(/</g, \"&lt;\")\r\n            .replace(/>/g, \"&gt;\")\r\n            .replace(/\"/g, \"&quot;\")\r\n            .replace(/'/g, \"&apos;\");\r\n    }\r\n}\r\n\r\nexport class SynthesisRequest {\r\n    public requestId: string;\r\n    public text: string;\r\n    public isSSML: boolean;\r\n    public cb: (e: SpeechSynthesisResult) => void;\r\n    public err: (e: string) => void;\r\n    public dataStream: IAudioDestination;\r\n\r\n    public constructor(requestId: string, text: string, isSSML: boolean, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, dataStream?: IAudioDestination) {\r\n        this.requestId = requestId;\r\n        this.text = text;\r\n        this.isSSML = isSSML;\r\n        this.cb = cb;\r\n        this.err = err;\r\n        this.dataStream = dataStream;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable @typescript-eslint/no-empty-function */\r\n\r\nimport { PathLike } from \"fs\";\r\nimport { IRestResponse } from \"../common.browser/RestMessageAdapter.js\";\r\nimport {\r\n    IAuthentication,\r\n    ISynthesisConnectionFactory,\r\n    SpeechSynthesisConnectionFactory,\r\n    SynthesisAdapterBase,\r\n    SpeechSynthesisAdapter,\r\n    SynthesisRestAdapter,\r\n    SynthesizerConfig,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    createNoDashGuid,\r\n    marshalPromiseToCallbacks,\r\n} from \"../common/Exports.js\";\r\nimport { AudioOutputConfigImpl } from \"./Audio/AudioConfig.js\";\r\nimport { AudioFileWriter } from \"./Audio/AudioFileWriter.js\";\r\nimport { AudioOutputFormatImpl } from \"./Audio/AudioOutputFormat.js\";\r\nimport {\r\n    PullAudioOutputStreamImpl,\r\n    PushAudioOutputStreamImpl\r\n} from \"./Audio/AudioOutputStream.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    AudioOutputStream,\r\n    AutoDetectSourceLanguageConfig,\r\n    PropertyId,\r\n    PullAudioOutputStream,\r\n    PushAudioOutputStreamCallback,\r\n    SpeechConfig,\r\n    SpeechSynthesisBookmarkEventArgs,\r\n    SpeechSynthesisEventArgs,\r\n    SpeechSynthesisOutputFormat,\r\n    SpeechSynthesisResult,\r\n    SpeechSynthesisVisemeEventArgs,\r\n    SpeechSynthesisWordBoundaryEventArgs,\r\n    SynthesisVoicesResult,\r\n    Synthesizer\r\n} from \"./Exports.js\";\r\nimport { SpeechConfigImpl } from \"./SpeechConfig.js\";\r\nimport { SynthesisRequest } from \"./Synthesizer.js\";\r\n\r\n/**\r\n * Defines the class SpeechSynthesizer for text to speech.\r\n * Updated in version 1.16.0\r\n * @class SpeechSynthesizer\r\n */\r\nexport class SpeechSynthesizer extends Synthesizer {\r\n    protected audioConfig: AudioConfig;\r\n\r\n    /**\r\n     * Defines event handler for synthesis start events.\r\n     * @member SpeechSynthesizer.prototype.synthesisStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesisStarted: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesizing events.\r\n     * @member SpeechSynthesizer.prototype.synthesizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesizing: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesis completed events.\r\n     * @member SpeechSynthesizer.prototype.synthesisCompleted\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesisCompleted: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesis cancelled events.\r\n     * @member SpeechSynthesizer.prototype.SynthesisCanceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public SynthesisCanceled: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for word boundary events\r\n     * @member SpeechSynthesizer.prototype.wordBoundary\r\n     * @function\r\n     * @public\r\n     */\r\n    public wordBoundary: (sender: SpeechSynthesizer, event: SpeechSynthesisWordBoundaryEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for bookmark reached events\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesizer.prototype.bookmarkReached\r\n     * @function\r\n     * @public\r\n     */\r\n    public bookmarkReached: (sender: SpeechSynthesizer, event: SpeechSynthesisBookmarkEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for viseme received event\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesizer.prototype.visemeReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public visemeReceived: (sender: SpeechSynthesizer, event: SpeechSynthesisVisemeEventArgs) => void;\r\n\r\n    /**\r\n     * SpeechSynthesizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer.\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        super(speechConfig);\r\n\r\n        if (audioConfig !== null) {\r\n            if (audioConfig === undefined) {\r\n                this.audioConfig = (typeof window === \"undefined\") ? undefined : AudioConfig.fromDefaultSpeakerOutput();\r\n            } else {\r\n                this.audioConfig = audioConfig;\r\n            }\r\n        }\r\n\r\n        this.privConnectionFactory = new SpeechSynthesisConnectionFactory();\r\n        this.implCommonSynthesizeSetup();\r\n    }\r\n\r\n    /**\r\n     * SpeechSynthesizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this synthesizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the synthesizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer\r\n     */\r\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): SpeechSynthesizer {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        return new SpeechSynthesizer(speechConfig, audioConfig);\r\n    }\r\n\r\n    /**\r\n     * Executes speech synthesis on plain text.\r\n     * The task returns the synthesis result.\r\n     * @member SpeechSynthesizer.prototype.speakTextAsync\r\n     * @function\r\n     * @public\r\n     * @param text - Text to be synthesized.\r\n     * @param cb - Callback that received the SpeechSynthesisResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     * @param stream - AudioOutputStream to receive the synthesized audio.\r\n     */\r\n    public speakTextAsync(text: string, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, stream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        this.speakImpl(text, false, cb, err, stream);\r\n    }\r\n\r\n    /**\r\n     * Executes speech synthesis on SSML.\r\n     * The task returns the synthesis result.\r\n     * @member SpeechSynthesizer.prototype.speakSsmlAsync\r\n     * @function\r\n     * @public\r\n     * @param ssml - SSML to be synthesized.\r\n     * @param cb - Callback that received the SpeechSynthesisResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     * @param stream - AudioOutputStream to receive the synthesized audio.\r\n     */\r\n    public speakSsmlAsync(ssml: string, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, stream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        this.speakImpl(ssml, true, cb, err, stream);\r\n    }\r\n\r\n    /**\r\n     * Get list of synthesis voices available.\r\n     * The task returns the synthesis voice result.\r\n     * @member SpeechSynthesizer.prototype.getVoicesAsync\r\n     * @function\r\n     * @async\r\n     * @public\r\n     * @param locale - Locale of voices in BCP-47 format; if left empty, get all available voices.\r\n     * @return {Promise<SynthesisVoicesResult>} - Promise of a SynthesisVoicesResult.\r\n     */\r\n    public async getVoicesAsync(locale: string = \"\"): Promise<SynthesisVoicesResult> {\r\n        return this.getVoices(locale);\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechSynthesizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, err);\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public get internalData(): object {\r\n        return this.privAdapter;\r\n    }\r\n\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // ################################################################################################################\r\n    //\r\n\r\n    // Creates the synthesis adapter\r\n    protected createSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisAdapterBase {\r\n        return new SpeechSynthesisAdapter(authentication, connectionFactory,\r\n            synthesizerConfig, this, this.audioConfig as AudioOutputConfigImpl);\r\n    }\r\n\r\n    protected createRestSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisRestAdapter {\r\n        return new SynthesisRestAdapter(synthesizerConfig, authentication);\r\n    }\r\n\r\n    protected implCommonSynthesizeSetup(): void {\r\n        super.implCommonSynthesizeSetup();\r\n\r\n        this.privAdapter.audioOutputFormat = AudioOutputFormatImpl.fromSpeechSynthesisOutputFormat(\r\n            SpeechSynthesisOutputFormat[this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined) as keyof typeof SpeechSynthesisOutputFormat]\r\n        );\r\n    }\r\n\r\n    protected speakImpl(text: string, IsSsml: boolean, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, dataStream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privDisposed);\r\n            const requestId = createNoDashGuid();\r\n            let audioDestination;\r\n            if (dataStream instanceof PushAudioOutputStreamCallback) {\r\n                audioDestination = new PushAudioOutputStreamImpl(dataStream);\r\n            } else if (dataStream instanceof PullAudioOutputStream) {\r\n                audioDestination = dataStream as PullAudioOutputStreamImpl;\r\n            } else if (dataStream !== undefined) {\r\n                audioDestination = new AudioFileWriter(dataStream as PathLike);\r\n            } else {\r\n                audioDestination = undefined;\r\n            }\r\n            this.synthesisRequestQueue.enqueue(new SynthesisRequest(requestId, text, IsSsml, (e: SpeechSynthesisResult): void => {\r\n                this.privSynthesizing = false;\r\n                if (!!cb) {\r\n                    try {\r\n                        cb(e);\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(e as string);\r\n                        }\r\n                    }\r\n                }\r\n                cb = undefined;\r\n                /* eslint-disable no-empty */\r\n                this.adapterSpeak().catch((): void => { });\r\n\r\n            }, (e: string): void => {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }, audioDestination));\r\n\r\n            /* eslint-disable no-empty-function */\r\n            this.adapterSpeak().catch((): void => { });\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n\r\n            // Destroy the synthesizer.\r\n            /* eslint-disable no-empty */\r\n            this.dispose(true).catch((): void => { });\r\n        }\r\n    }\r\n\r\n    protected async getVoices(locale: string): Promise<SynthesisVoicesResult> {\r\n        const requestId = createNoDashGuid();\r\n        const response: IRestResponse = await this.privRestAdapter.getVoicesList(requestId);\r\n        if (response.ok && Array.isArray(response.json)) {\r\n            let json = response.json;\r\n            if (!!locale && locale.length > 0) {\r\n                json = json.filter((item: { Locale: string }): boolean => !!item.Locale && item.Locale.toLowerCase() === locale.toLowerCase() );\r\n            }\r\n            return new SynthesisVoicesResult(requestId, json, undefined);\r\n        } else {\r\n            return new SynthesisVoicesResult(requestId, undefined, `Error: ${response.status}: ${response.statusText}`);\r\n        }\r\n   }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason } from \"./Exports.js\";\r\n\r\n/**\r\n * Base class for synthesis results\r\n * @class SynthesisResult\r\n * Added in version 1.20.0\r\n */\r\nexport class SynthesisResult {\r\n    private privResultId: string;\r\n    private privReason: ResultReason;\r\n    private privErrorDetails: string;\r\n    private privProperties: PropertyCollection;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, errorDetails?: string, properties?: PropertyCollection) {\r\n        this.privResultId = resultId;\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privProperties = properties;\r\n    }\r\n\r\n    /**\r\n     * Specifies the result identifier.\r\n     * @member SynthesisResult.prototype.resultId\r\n     * @function\r\n     * @public\r\n     * @returns {string} Specifies the result identifier.\r\n     */\r\n    public get resultId(): string {\r\n        return this.privResultId;\r\n    }\r\n\r\n    /**\r\n     * Specifies status of the result.\r\n     * @member SynthesisResult.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {ResultReason} Specifies status of the result.\r\n     */\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful synthesis, provides details of the occurred error.\r\n     * @member SynthesisResult.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} a brief description of an error.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    /**\r\n     * The set of properties exposed in the result.\r\n     * @member SynthesisResult.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The set of properties exposed in the result.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    PropertyCollection,\r\n    ResultReason,\r\n    SynthesisResult\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines result of speech synthesis.\r\n * @class SpeechSynthesisResult\r\n * Added in version 1.11.0\r\n */\r\nexport class SpeechSynthesisResult extends SynthesisResult {\r\n    private readonly privAudioData: ArrayBuffer;\r\n    private readonly privAudioDuration: number;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {ArrayBuffer} audioData - The synthesized audio binary.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     * @param {number} audioDuration - The audio duration.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, audioData?: ArrayBuffer,\r\n                errorDetails?: string, properties?: PropertyCollection, audioDuration?: number) {\r\n        super(resultId, reason, errorDetails, properties);\r\n        this.privAudioData = audioData;\r\n        this.privAudioDuration = audioDuration;\r\n    }\r\n\r\n    /**\r\n     * The synthesized audio data\r\n     * @member SpeechSynthesisResult.prototype.audioData\r\n     * @function\r\n     * @public\r\n     * @returns {ArrayBuffer} The synthesized audio data.\r\n     */\r\n    public get audioData(): ArrayBuffer {\r\n        return this.privAudioData;\r\n    }\r\n\r\n    /**\r\n     * The time duration of synthesized audio, in ticks (100 nanoseconds).\r\n     * @member SpeechSynthesisResult.prototype.audioDuration\r\n     * @function\r\n     * @public\r\n     * @returns {number} The time duration of synthesized audio.\r\n     */\r\n    public get audioDuration(): number {\r\n        return this.privAudioDuration;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SpeechSynthesisResult } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines contents of speech synthesis events.\r\n * @class SpeechSynthesisEventArgs\r\n * Added in version 1.11.0\r\n */\r\nexport class SpeechSynthesisEventArgs {\r\n    private readonly privResult: SpeechSynthesisResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {SpeechSynthesisResult} result - The speech synthesis result.\r\n     */\r\n    public constructor(result: SpeechSynthesisResult) {\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the synthesis result.\r\n     * @member SpeechSynthesisEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechSynthesisResult} the synthesis result.\r\n     */\r\n    public get result(): SpeechSynthesisResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SpeechSynthesisBoundaryType } from \"./SpeechSynthesisBoundaryType.js\";\r\n\r\n/**\r\n * Defines contents of speech synthesis word boundary event.\r\n * @class SpeechSynthesisWordBoundaryEventArgs\r\n * Added in version 1.11.0\r\n */\r\nexport class SpeechSynthesisWordBoundaryEventArgs {\r\n    private readonly privAudioOffset: number;\r\n    private readonly privDuration: number;\r\n    private readonly privText: string;\r\n    private readonly privWordLength: number;\r\n    private readonly privTextOffset: number;\r\n    private readonly privBoundaryType: SpeechSynthesisBoundaryType;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {number} duration - The audio duration.\r\n     * @param {string} text - The text.\r\n     * @param {number} wordLength - The length of the word.\r\n     * @param {number} textOffset - The text offset.\r\n     * @param {SpeechSynthesisBoundaryType} boundaryType - The boundary type\r\n     */\r\n    public constructor(audioOffset: number, duration: number, text: string, wordLength: number,\r\n                       textOffset: number, boundaryType: SpeechSynthesisBoundaryType) {\r\n        this.privAudioOffset = audioOffset;\r\n        this.privDuration = duration;\r\n        this.privText = text;\r\n        this.privWordLength = wordLength;\r\n        this.privTextOffset = textOffset;\r\n        this.privBoundaryType = boundaryType;\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio offset.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.audioOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the audio offset.\r\n     */\r\n    public get audioOffset(): number {\r\n        return this.privAudioOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the duration, in ticks (100 nanoseconds).\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.duration\r\n     * @function\r\n     * @public\r\n     * @returns {number} Duration in 100 nanosecond increments.\r\n     */\r\n    public get duration(): number {\r\n        return this.privDuration;\r\n    }\r\n\r\n    /**\r\n     * Specifies the text of the word boundary event.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.text\r\n     * @function\r\n     * @public\r\n     * @returns {string} the text.\r\n     */\r\n    public get text(): string {\r\n        return this.privText;\r\n    }\r\n\r\n    /**\r\n     * Specifies the word length\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.wordLength\r\n     * @function\r\n     * @public\r\n     * @returns {number} the word length\r\n     */\r\n    public get wordLength(): number {\r\n        return this.privWordLength;\r\n    }\r\n\r\n    /**\r\n     * Specifies the text offset.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.textOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the text offset.\r\n     */\r\n    public get textOffset(): number {\r\n        return this.privTextOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the boundary type.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.boundaryType\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechSynthesisBoundaryType} the boundary type.\r\n     */\r\n    public get boundaryType(): SpeechSynthesisBoundaryType {\r\n        return this.privBoundaryType;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines contents of speech synthesis bookmark event.\r\n * @class SpeechSynthesisBookmarkEventArgs\r\n * Added in version 1.16.0\r\n */\r\nexport class SpeechSynthesisBookmarkEventArgs {\r\n    private privAudioOffset: number;\r\n    private privText: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {string} text - The bookmark text.\r\n     */\r\n    public constructor(audioOffset: number, text: string) {\r\n        this.privAudioOffset = audioOffset;\r\n        this.privText = text;\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio offset.\r\n     * @member SpeechSynthesisBookmarkEventArgs.prototype.audioOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the audio offset.\r\n     */\r\n    public get audioOffset(): number {\r\n        return this.privAudioOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the bookmark.\r\n     * @member SpeechSynthesisBookmarkEventArgs.prototype.text\r\n     * @function\r\n     * @public\r\n     * @returns {string} the bookmark text.\r\n     */\r\n    public get text(): string {\r\n        return this.privText;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines contents of speech synthesis viseme event.\r\n * @class SpeechSynthesisVisemeEventArgs\r\n * Added in version 1.16.0\r\n */\r\nexport class SpeechSynthesisVisemeEventArgs {\r\n    private privAudioOffset: number;\r\n    private privVisemeId: number;\r\n    private privAnimation: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {number} visemeId - The viseme ID.\r\n     * @param {string} animation - The animation, could be in svg or other format.\r\n     */\r\n    public constructor(audioOffset: number, visemeId: number, animation: string) {\r\n        this.privAudioOffset = audioOffset;\r\n        this.privVisemeId = visemeId;\r\n        this.privAnimation = animation;\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio offset.\r\n     * @member SpeechSynthesisVisemeEventArgs.prototype.audioOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the audio offset.\r\n     */\r\n    public get audioOffset(): number {\r\n        return this.privAudioOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the viseme ID.\r\n     * @member SpeechSynthesisVisemeEventArgs.prototype.visemeId\r\n     * @function\r\n     * @public\r\n     * @returns {number} the viseme ID.\r\n     */\r\n    public get visemeId(): number {\r\n        return this.privVisemeId;\r\n    }\r\n\r\n    /**\r\n     * Specifies the animation.\r\n     * @member SpeechSynthesisVisemeEventArgs.prototype.animation\r\n     * @function\r\n     * @public\r\n     * @returns {string} the animation, could be in svg or other format.\r\n     */\r\n    public get animation(): string {\r\n        return this.privAnimation;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the boundary type of speech synthesis boundary event.\r\n * @class SpeechSynthesisBoundaryType\r\n * Added in version 1.21.0\r\n */\r\nexport enum SpeechSynthesisBoundaryType {\r\n    /**\r\n     * Indicates the boundary text is a word.\r\n     * @member SpeechSynthesisBoundaryType.Word\r\n     */\r\n    Word = \"WordBoundary\",\r\n\r\n    /**\r\n     * Indicates the boundary text is a punctuation.\r\n     * @member SpeechSynthesisBoundaryType.Punctuation\r\n     */\r\n    Punctuation = \"PunctuationBoundary\",\r\n\r\n    /**\r\n     * Indicates the boundary text is a sentence.\r\n     * @member SpeechSynthesisBoundaryType.Sentence\r\n     */\r\n    Sentence = \"SentenceBoundary\"\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IVoiceJson,\r\n    PropertyCollection,\r\n    ResultReason,\r\n    SynthesisResult,\r\n    VoiceInfo,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines result of speech synthesis.\r\n * @class SynthesisVoicesResult\r\n * Added in version 1.20.0\r\n */\r\nexport class SynthesisVoicesResult extends SynthesisResult {\r\n    private privVoices: VoiceInfo[];\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param requestId - result id for request.\r\n     * @param json - json payload from endpoint.\r\n     */\r\n    public constructor(requestId: string, json: any, errorDetails: string ) {\r\n        if (Array.isArray(json)) {\r\n            super(requestId, ResultReason.VoicesListRetrieved, undefined, new PropertyCollection());\r\n            this.privVoices = [];\r\n            for (const item of json) {\r\n                this.privVoices.push(new VoiceInfo(item as IVoiceJson));\r\n            }\r\n        } else {\r\n            super(requestId, ResultReason.Canceled, errorDetails ? errorDetails : \"Error information unavailable\", new PropertyCollection());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The list of voices\r\n     * @member SynthesisVoicesResult.prototype.voices\r\n     * @function\r\n     * @public\r\n     * @returns {VoiceInfo[]} List of synthesized voices.\r\n     */\r\n    public get voices(): VoiceInfo[] {\r\n        return this.privVoices;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IVoiceJson } from \"./IVoiceJson\";\r\n\r\n/**\r\n * Defines the gender of synthesis voices.\r\n * Added in version 1.20.0.\r\n */\r\nexport enum SynthesisVoiceGender {\r\n\r\n    /** Gender unknown */\r\n    Unknown,\r\n\r\n    /** Female voice */\r\n    Female,\r\n\r\n    /** Male voice */\r\n    Male,\r\n\r\n    /** Neutral voice */\r\n    Neutral\r\n}\r\n\r\nexport enum SynthesisVoiceType {\r\n    OnlineNeural = 1,\r\n    OnlineStandard = 2,\r\n    OfflineNeural = 3,\r\n    OfflineStandard = 4,\r\n}\r\n\r\nconst GENDER_LOOKUP: Record<string, SynthesisVoiceGender> = {\r\n    [SynthesisVoiceGender[SynthesisVoiceGender.Neutral]]: SynthesisVoiceGender.Neutral,\r\n    [SynthesisVoiceGender[SynthesisVoiceGender.Male]]: SynthesisVoiceGender.Male,\r\n    [SynthesisVoiceGender[SynthesisVoiceGender.Female]]: SynthesisVoiceGender.Female,\r\n};\r\n\r\n/**\r\n * Information about Speech Synthesis voice\r\n * Added in version 1.20.0.\r\n * @class VoiceInfo\r\n */\r\nexport class VoiceInfo {\r\n    private privName: IVoiceJson[\"Name\"];\r\n    private privLocale: IVoiceJson[\"Locale\"];\r\n    private privShortName: IVoiceJson[\"ShortName\"];\r\n    private privDisplayName: IVoiceJson[\"DisplayName\"];\r\n    private privLocalName: IVoiceJson[\"LocalName\"];\r\n    private privLocaleName: IVoiceJson[\"LocaleName\"];\r\n    private privGender: SynthesisVoiceGender;\r\n    private privVoiceType: SynthesisVoiceType;\r\n    private privStyleList: IVoiceJson[\"StyleList\"] = [];\r\n    private privSampleRateHertz: IVoiceJson[\"SampleRateHertz\"];\r\n    private privStatus: IVoiceJson[\"Status\"];\r\n    private privExtendedPropertyMap: IVoiceJson[\"ExtendedPropertyMap\"];\r\n    private privWordsPerMinute: IVoiceJson[\"WordsPerMinute\"];\r\n    private privSecondaryLocaleList: IVoiceJson[\"SecondaryLocaleList\"];\r\n    private privRolePlayList: IVoiceJson[\"RolePlayList\"];\r\n\r\n    public constructor(json: IVoiceJson) {\r\n        if (!!json) {\r\n            this.privName = json.Name;\r\n            this.privLocale = json.Locale;\r\n            this.privShortName = json.ShortName;\r\n            this.privLocaleName = json.LocaleName;\r\n            this.privDisplayName = json.DisplayName;\r\n            this.privLocalName = json.LocalName;\r\n            this.privVoiceType = json.VoiceType.endsWith(\"Standard\") ? SynthesisVoiceType.OnlineStandard : SynthesisVoiceType.OnlineNeural;\r\n            this.privGender = GENDER_LOOKUP[json.Gender] || SynthesisVoiceGender.Unknown;\r\n\r\n            if (!!json.StyleList && Array.isArray(json.StyleList)) {\r\n                for (const style of json.StyleList) {\r\n                    this.privStyleList.push(style);\r\n                }\r\n            }\r\n\r\n            this.privSampleRateHertz = json.SampleRateHertz;\r\n            this.privStatus = json.Status;\r\n\r\n            if (json.ExtendedPropertyMap) {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                this.privExtendedPropertyMap = json.ExtendedPropertyMap;\r\n            }\r\n\r\n            this.privWordsPerMinute = json.WordsPerMinute;\r\n\r\n            if (Array.isArray(json.SecondaryLocaleList)) {\r\n                this.privSecondaryLocaleList = [...json.SecondaryLocaleList];\r\n            }\r\n\r\n            if (Array.isArray(json.RolePlayList)) {\r\n                this.privRolePlayList = [...json.RolePlayList];\r\n            }\r\n        }\r\n    }\r\n\r\n    public get name(): IVoiceJson[\"Name\"] {\r\n        return this.privName;\r\n    }\r\n\r\n    public get locale(): IVoiceJson[\"Locale\"] {\r\n        return this.privLocale;\r\n    }\r\n\r\n    public get shortName(): IVoiceJson[\"ShortName\"] {\r\n        return this.privShortName;\r\n    }\r\n\r\n    public get displayName(): IVoiceJson[\"DisplayName\"] {\r\n        return this.privDisplayName;\r\n    }\r\n\r\n    public get localName(): IVoiceJson[\"LocalName\"] {\r\n        return this.privLocalName;\r\n    }\r\n\r\n    public get localeName(): IVoiceJson[\"LocaleName\"] {\r\n        return this.privLocaleName;\r\n    }\r\n\r\n    public get gender(): SynthesisVoiceGender {\r\n        return this.privGender;\r\n    }\r\n\r\n    public get voiceType(): SynthesisVoiceType {\r\n        return this.privVoiceType;\r\n    }\r\n\r\n    public get styleList(): IVoiceJson[\"StyleList\"] {\r\n        return this.privStyleList;\r\n    }\r\n\r\n    public get sampleRateHertz(): IVoiceJson[\"SampleRateHertz\"] {\r\n        return this.privSampleRateHertz;\r\n    }\r\n\r\n    public get status(): IVoiceJson[\"Status\"] {\r\n        return this.privStatus;\r\n    }\r\n\r\n    public get extendedPropertyMap(): IVoiceJson[\"ExtendedPropertyMap\"] {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n        return this.privExtendedPropertyMap;\r\n    }\r\n\r\n    public get wordsPerMinute(): IVoiceJson[\"WordsPerMinute\"] {\r\n        return this.privWordsPerMinute;\r\n    }\r\n\r\n    public get secondaryLocaleList(): IVoiceJson[\"SecondaryLocaleList\"] {\r\n        return this.privSecondaryLocaleList;\r\n    }\r\n\r\n    public get rolePlayList(): IVoiceJson[\"RolePlayList\"] {\r\n        return this.privRolePlayList;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    BackgroundEvent,\r\n    createNoDashGuid,\r\n    Events,\r\n    IAudioDestination,\r\n    INumberDictionary\r\n} from \"../../common/Exports.js\";\r\nimport { AudioStreamFormat, IPlayer } from \"../Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat.js\";\r\nimport { PullAudioOutputStreamImpl } from \"./AudioOutputStream.js\";\r\nimport { AudioFormatTag } from \"./AudioStreamFormat.js\";\r\n\r\nconst MediaDurationPlaceholderSeconds = 60 * 30;\r\n\r\nconst AudioFormatToMimeType: INumberDictionary<string> = {\r\n    [AudioFormatTag.PCM]: \"audio/wav\",\r\n    [AudioFormatTag.MuLaw]: \"audio/x-wav\",\r\n    [AudioFormatTag.MP3]: \"audio/mpeg\",\r\n    [AudioFormatTag.OGG_OPUS]: \"audio/ogg\",\r\n    [AudioFormatTag.WEBM_OPUS]: \"audio/webm; codecs=opus\",\r\n    [AudioFormatTag.ALaw]: \"audio/x-wav\",\r\n    [AudioFormatTag.FLAC]: \"audio/flac\",\r\n    [AudioFormatTag.AMR_WB]: \"audio/amr-wb\",\r\n    [AudioFormatTag.G722]: \"audio/G722\",\r\n};\r\n\r\n/**\r\n * Represents the speaker playback audio destination, which only works in browser.\r\n * Note: the SDK will try to use <a href=\"https://www.w3.org/TR/media-source/\">Media Source Extensions</a> to play audio.\r\n * Mp3 format has better supports on Microsoft Edge, Chrome and Safari (desktop), so, it's better to specify mp3 format for playback.\r\n * @class SpeakerAudioDestination\r\n * Updated in version 1.17.0\r\n */\r\nexport class SpeakerAudioDestination implements IAudioDestination, IPlayer {\r\n    private readonly privId: string;\r\n    private privFormat: AudioOutputFormatImpl;\r\n    private privAudio: HTMLAudioElement;\r\n    private privMediaSource: MediaSource;\r\n    private privSourceBuffer: SourceBuffer;\r\n    private privPlaybackStarted: boolean = false;\r\n    private privAudioBuffer: ArrayBuffer[];\r\n    private privAppendingToBuffer: boolean = false;\r\n    private privMediaSourceOpened: boolean = false;\r\n    private privIsClosed: boolean;\r\n    private privIsPaused: boolean;\r\n    private privAudioOutputStream: PullAudioOutputStreamImpl;\r\n    private privBytesReceived: number = 0;\r\n\r\n    public constructor(audioDestinationId?: string) {\r\n        this.privId = audioDestinationId ? audioDestinationId : createNoDashGuid();\r\n        this.privIsPaused = false;\r\n        this.privIsClosed = false;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer, cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.privAudioBuffer !== undefined) {\r\n            this.privAudioBuffer.push(buffer);\r\n            this.updateSourceBuffer().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } else if (this.privAudioOutputStream !== undefined) {\r\n            this.privAudioOutputStream.write(buffer);\r\n            this.privBytesReceived += buffer.byteLength;\r\n        }\r\n    }\r\n\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        this.privIsClosed = true;\r\n        if (this.privSourceBuffer !== undefined) {\r\n            this.handleSourceBufferUpdateEnd().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } else if (this.privAudioOutputStream !== undefined && typeof window !== \"undefined\") {\r\n            if ((this.privFormat.formatTag === AudioFormatTag.PCM || this.privFormat.formatTag === AudioFormatTag.MuLaw\r\n                || this.privFormat.formatTag === AudioFormatTag.ALaw) && this.privFormat.hasHeader === false) {\r\n                // eslint-disable-next-line no-console\r\n                console.warn(\"Play back is not supported for raw PCM, mulaw or alaw format without header.\");\r\n                if (!!this.onAudioEnd) {\r\n                    this.onAudioEnd(this);\r\n                }\r\n            } else {\r\n                let receivedAudio = new ArrayBuffer(this.privBytesReceived);\r\n                this.privAudioOutputStream.read(receivedAudio).then((): void => {\r\n                    receivedAudio = this.privFormat.addHeader(receivedAudio);\r\n                    const audioBlob = new Blob([receivedAudio], { type: AudioFormatToMimeType[this.privFormat.formatTag] });\r\n                    this.privAudio.src = window.URL.createObjectURL(audioBlob);\r\n                    this.notifyPlayback().then((): void => {\r\n                        if (!!cb) {\r\n                            cb();\r\n                        }\r\n                    }, (error: string): void => {\r\n                        if (!!err) {\r\n                            err(error);\r\n                        }\r\n                    });\r\n                }, (error: string): void => {\r\n                    if (!!err) {\r\n                        err(error);\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            // unsupported format, call onAudioEnd directly.\r\n            if (!!this.onAudioEnd) {\r\n                this.onAudioEnd(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n        if (typeof (AudioContext) !== \"undefined\" || (typeof (window) !== \"undefined\" && typeof ((window as any).webkitAudioContext) !== \"undefined\")) {\r\n            this.privFormat = format as AudioOutputFormatImpl;\r\n            const mimeType: string = AudioFormatToMimeType[this.privFormat.formatTag];\r\n            if (mimeType === undefined) {\r\n                // eslint-disable-next-line no-console\r\n                console.warn(\r\n                    `Unknown mimeType for format ${AudioFormatTag[this.privFormat.formatTag]}; playback is not supported.`);\r\n\r\n            } else if (typeof (MediaSource) !== \"undefined\" && MediaSource.isTypeSupported(mimeType)) {\r\n                this.privAudio = new Audio();\r\n                this.privAudioBuffer = [];\r\n                this.privMediaSource = new MediaSource();\r\n                this.privAudio.src = URL.createObjectURL(this.privMediaSource);\r\n                this.privAudio.load();\r\n                this.privMediaSource.onsourceopen = (): void => {\r\n                    this.privMediaSourceOpened = true;\r\n                    this.privMediaSource.duration = MediaDurationPlaceholderSeconds;\r\n                    this.privSourceBuffer = this.privMediaSource.addSourceBuffer(mimeType);\r\n                    this.privSourceBuffer.onupdate = (): void => {\r\n                        this.updateSourceBuffer().catch((reason: string): void => {\r\n                            Events.instance.onEvent(new BackgroundEvent(reason));\r\n                        });\r\n                    };\r\n                    this.privSourceBuffer.onupdateend = (): void => {\r\n                        this.handleSourceBufferUpdateEnd().catch((reason: string): void => {\r\n                            Events.instance.onEvent(new BackgroundEvent(reason));\r\n                        });\r\n                    };\r\n                    this.privSourceBuffer.onupdatestart = (): void => {\r\n                        this.privAppendingToBuffer = false;\r\n                    };\r\n                };\r\n                this.updateSourceBuffer().catch((reason: string): void => {\r\n                    Events.instance.onEvent(new BackgroundEvent(reason));\r\n                });\r\n\r\n            } else {\r\n                // eslint-disable-next-line no-console\r\n                console.warn(\r\n                    `Format ${AudioFormatTag[this.privFormat.formatTag]} could not be played by MSE, streaming playback is not enabled.`);\r\n                this.privAudioOutputStream = new PullAudioOutputStreamImpl();\r\n                this.privAudioOutputStream.format = this.privFormat;\r\n                this.privAudio = new Audio();\r\n            }\r\n        }\r\n    }\r\n\r\n    public get volume(): number {\r\n        return this.privAudio?.volume ?? -1;\r\n    }\r\n\r\n    public set volume(volume: number) {\r\n        if (!!this.privAudio) {\r\n            this.privAudio.volume = volume;\r\n        }\r\n    }\r\n\r\n    public mute(): void {\r\n        if (!!this.privAudio) {\r\n            this.privAudio.muted = true;\r\n        }\r\n    }\r\n\r\n    public unmute(): void {\r\n        if (!!this.privAudio) {\r\n            this.privAudio.muted = false;\r\n        }\r\n    }\r\n\r\n    public get isClosed(): boolean {\r\n        return this.privIsClosed;\r\n    }\r\n\r\n    public get currentTime(): number {\r\n        if (this.privAudio !== undefined) {\r\n            return this.privAudio.currentTime;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public pause(): void {\r\n        if (!this.privIsPaused && this.privAudio !== undefined) {\r\n            this.privAudio.pause();\r\n            this.privIsPaused = true;\r\n        }\r\n    }\r\n\r\n    public resume(cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.privIsPaused && this.privAudio !== undefined) {\r\n            this.privAudio.play().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n            this.privIsPaused = false;\r\n        }\r\n    }\r\n\r\n    public onAudioStart: (sender: IPlayer) => void;\r\n\r\n    public onAudioEnd: (sender: IPlayer) => void;\r\n\r\n    public get internalAudio(): HTMLAudioElement {\r\n        return this.privAudio;\r\n    }\r\n\r\n    private async updateSourceBuffer(): Promise<void> {\r\n        if (this.privAudioBuffer !== undefined && (this.privAudioBuffer.length > 0) && this.sourceBufferAvailable()) {\r\n            this.privAppendingToBuffer = true;\r\n            const binary = this.privAudioBuffer.shift();\r\n            try {\r\n                this.privSourceBuffer.appendBuffer(binary);\r\n            } catch (error) {\r\n                this.privAudioBuffer.unshift(binary);\r\n                // eslint-disable-next-line no-console\r\n                console.log(\r\n                    \"buffer filled, pausing addition of binaries until space is made\");\r\n                return;\r\n            }\r\n            await this.notifyPlayback();\r\n        } else if (this.canEndStream()) {\r\n            await this.handleSourceBufferUpdateEnd();\r\n        }\r\n    }\r\n\r\n    private async handleSourceBufferUpdateEnd(): Promise<void> {\r\n        if (this.canEndStream() && this.sourceBufferAvailable()) {\r\n            this.privMediaSource.endOfStream();\r\n            await this.notifyPlayback();\r\n        }\r\n    }\r\n\r\n    private async notifyPlayback(): Promise<void> {\r\n        if (!this.privPlaybackStarted && this.privAudio !== undefined) {\r\n            this.privPlaybackStarted = true;\r\n            if (!!this.onAudioStart) {\r\n                this.onAudioStart(this);\r\n            }\r\n            this.privAudio.onended = (): void => {\r\n                if (!!this.onAudioEnd) {\r\n                    this.onAudioEnd(this);\r\n                }\r\n            };\r\n            if (!this.privIsPaused) {\r\n                await this.privAudio.play();\r\n            }\r\n        }\r\n    }\r\n\r\n    private canEndStream(): boolean {\r\n        return (this.isClosed && this.privSourceBuffer !== undefined && (this.privAudioBuffer.length === 0)\r\n            && this.privMediaSourceOpened && !this.privAppendingToBuffer && this.privMediaSource.readyState === \"open\");\r\n    }\r\n\r\n    private sourceBufferAvailable(): boolean {\r\n        return (this.privSourceBuffer !== undefined && !this.privSourceBuffer.updating);\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationEventArgsBase,\r\n} from \"./CancellationEventArgsBase.js\";\r\n\r\n/**\r\n * Defines content of a RecognitionErrorEvent.\r\n * @class ConversationTranscriptionCanceledEventArgs\r\n */\r\nexport class ConversationTranscriptionCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationEventArgsBase,\r\n} from \"./CancellationEventArgsBase.js\";\r\n\r\n/**\r\n * Defines content of a MeetingTranscriptionCanceledEvent.\r\n * @class MeetingTranscriptionCanceledEventArgs\r\n */\r\nexport class MeetingTranscriptionCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the point system for pronunciation score calibration; default value is FivePoint.\r\n * Added in version 1.15.0\r\n * @class PronunciationAssessmentGradingSystem\r\n */\r\nexport enum PronunciationAssessmentGradingSystem {\r\n    /**\r\n     * Five point calibration\r\n     * @member PronunciationAssessmentGradingSystem.FivePoint\r\n     */\r\n    FivePoint = 1,\r\n\r\n    /**\r\n     * Hundred mark\r\n     * @member PronunciationAssessmentGradingSystem.HundredMark\r\n     */\r\n    HundredMark,\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the pronunciation evaluation granularity; default value is Phoneme.\r\n * Added in version 1.15.0\r\n * @class PronunciationAssessmentGranularity\r\n */\r\nexport enum PronunciationAssessmentGranularity {\r\n    /**\r\n     * Shows the score on the full text, word and phoneme level\r\n     * @member PronunciationAssessmentGranularity.Phoneme\r\n     */\r\n    Phoneme = 1,\r\n\r\n    /**\r\n     * Shows the score on the full text and word level\r\n     * @member PronunciationAssessmentGranularity.Word\r\n     */\r\n    Word,\r\n\r\n    /**\r\n     * Shows the score on the full text level only\r\n     * @member PronunciationAssessmentGranularity.FullText\r\n     */\r\n    FullText,\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ServiceRecognizerBase } from \"../common.speech/ServiceRecognizerBase.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport {\r\n    PronunciationAssessmentGradingSystem,\r\n    PronunciationAssessmentGranularity,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer\r\n} from \"./Exports.js\";\r\n\r\ninterface PronunciationAssessmentJSON {\r\n    referenceText: string;\r\n    gradingSystem: string;\r\n    granularity: string;\r\n    phonemeAlphabet: string;\r\n    nbestPhonemeCount: number;\r\n    dimension: string;\r\n    enableMiscue: boolean;\r\n    enableProsodyAssessment: boolean;\r\n}\r\n\r\n/**\r\n * Pronunciation assessment configuration.\r\n * @class PronunciationAssessmentConfig\r\n * Added in version 1.15.0.\r\n */\r\nexport class PronunciationAssessmentConfig {\r\n    private privProperties: PropertyCollection;\r\n    private privPhonemeAlphabet: string;\r\n    private privNBestPhonemeCount: number;\r\n    private privEnableProsodyAssessment: boolean;\r\n    private privContentAssessmentTopic: string;\r\n\r\n    /**\r\n     * PronunciationAssessmentConfig constructor.\r\n     * @constructor\r\n     * @param {string} referenceText\r\n     * @param gradingSystem\r\n     * @param granularity\r\n     * @param enableMiscue\r\n     */\r\n    public constructor(referenceText: string,\r\n                       gradingSystem: PronunciationAssessmentGradingSystem = PronunciationAssessmentGradingSystem.FivePoint,\r\n                       granularity: PronunciationAssessmentGranularity = PronunciationAssessmentGranularity.Phoneme,\r\n                       enableMiscue: boolean = false) {\r\n        Contracts.throwIfNullOrUndefined(referenceText, \"referenceText\");\r\n        this.privProperties = new PropertyCollection();\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_ReferenceText, referenceText);\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_GradingSystem, PronunciationAssessmentGradingSystem[gradingSystem]);\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_Granularity, PronunciationAssessmentGranularity[granularity]);\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_EnableMiscue, String(enableMiscue));\r\n    }\r\n\r\n    /**\r\n     * @member PronunciationAssessmentConfig.fromJSON\r\n     * @function\r\n     * @public\r\n     * @param {string} json The json string containing the pronunciation assessment parameters.\r\n     * @return {PronunciationAssessmentConfig} Instance of PronunciationAssessmentConfig\r\n     * @summary Creates an instance of the PronunciationAssessmentConfig from json.\r\n     * This method is designed to support the pronunciation assessment parameters still in preview.\r\n     * Under normal circumstances, use the constructor instead.\r\n     */\r\n    public static fromJSON(json: string): PronunciationAssessmentConfig {\r\n        Contracts.throwIfNullOrUndefined(json, \"json\");\r\n        const config = new PronunciationAssessmentConfig(\"\");\r\n        config.privProperties = new PropertyCollection();\r\n        config.properties.setProperty(PropertyId.PronunciationAssessment_Json, json);\r\n        return config;\r\n    }\r\n\r\n    public toJSON(): string {\r\n        this.updateJson();\r\n        return this.privProperties.getProperty(PropertyId.PronunciationAssessment_Params);\r\n    }\r\n\r\n    public applyTo(recognizer: Recognizer): void {\r\n        this.updateJson();\r\n        const recoBase = recognizer.internalData as ServiceRecognizerBase;\r\n        recoBase.expectContentAssessmentResponse = !!this.privContentAssessmentTopic;\r\n        recoBase.speechContext.setPronunciationAssessmentParams(\r\n            this.properties.getProperty(PropertyId.PronunciationAssessment_Params),\r\n            this.privContentAssessmentTopic,\r\n            recoBase.isSpeakerDiarizationEnabled);\r\n    }\r\n\r\n    /**\r\n     * Gets the reference text.\r\n     * @member PronunciationAssessmentConfig.prototype.referenceText\r\n     * @function\r\n     * @public\r\n     * @returns {string} Reference text.\r\n     */\r\n    public get referenceText(): string {\r\n        return this.properties.getProperty(PropertyId.PronunciationAssessment_ReferenceText);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the reference text.\r\n     * @member PronunciationAssessmentConfig.prototype.referenceText\r\n     * @function\r\n     * @public\r\n     * @param {string} referenceText - Reference text.\r\n     */\r\n    public set referenceText(referenceText: string) {\r\n        Contracts.throwIfNullOrWhitespace(referenceText, \"referenceText\");\r\n        this.properties.setProperty(PropertyId.PronunciationAssessment_ReferenceText, referenceText);\r\n    }\r\n\r\n    /**\r\n     * Sets the phoneme alphabet.\r\n     * The valid values are \"SAPI\" (default) and \"IPA\".\r\n     * Added in version 1.20.0\r\n     * @member PronunciationAssessmentConfig.prototype.phonemeAlphabet\r\n     * @function\r\n     * @public\r\n     * @param {string} phonemeAlphabet - Phoneme alphabet.\r\n     */\r\n    public set phonemeAlphabet(phonemeAlphabet: string) {\r\n        Contracts.throwIfNullOrWhitespace(phonemeAlphabet, \"phonemeAlphabet\");\r\n        this.privPhonemeAlphabet = phonemeAlphabet;\r\n    }\r\n\r\n    /**\r\n     * Sets the boolean enableMiscue property.\r\n     * Added in version 1.26.0\r\n     * @member PronunciationAssessmentConfig.prototype.enableMiscue\r\n     * @function\r\n     * @public\r\n     * @param {boolean} enableMiscue - enable miscue.\r\n     */\r\n    public set enableMiscue(enableMiscue: boolean) {\r\n        const enableMiscueString = enableMiscue ? \"true\" : \"false\";\r\n        this.properties.setProperty(PropertyId.PronunciationAssessment_EnableMiscue, enableMiscueString);\r\n    }\r\n\r\n    /**\r\n     * Gets the boolean enableMiscue property.\r\n     * Added in version 1.26.0\r\n     * @member PronunciationAssessmentConfig.prototype.enableMiscue\r\n     * @function\r\n     * @public\r\n     * @return {boolean} enableMiscue - enable miscue.\r\n     */\r\n    public get enableMiscue(): boolean {\r\n        const enableMiscueString = this.properties.getProperty(PropertyId.PronunciationAssessment_EnableMiscue, \"false\");\r\n        return (enableMiscueString.toLowerCase() === \"true\");\r\n    }\r\n\r\n    /**\r\n     * Sets the nbest phoneme count\r\n     * Added in version 1.20.0\r\n     * @member PronunciationAssessmentConfig.prototype.nbestPhonemeCount\r\n     * @function\r\n     * @public\r\n     * @param {number} nbestPhonemeCount - NBest phoneme count.\r\n     */\r\n    public set nbestPhonemeCount(nbestPhonemeCount: number) {\r\n        this.privNBestPhonemeCount = nbestPhonemeCount;\r\n    }\r\n\r\n    /**\r\n     * Enables the prosody assessment.\r\n     * Added in version 1.34.0\r\n     * @member PronunciationAssessmentConfig.prototype.enableProsodyAssessment\r\n     * @function\r\n     * @public\r\n     * @param {boolean} enableProsodyAssessment - enable prosody assessment.\r\n     */\r\n    public set enableProsodyAssessment(enableProsodyAssessment: boolean) {\r\n        this.privEnableProsodyAssessment = enableProsodyAssessment;\r\n    }\r\n\r\n    /**\r\n     * Enables content assessment and sets the topic.\r\n     * Added in version 1.34.0\r\n     * @member PronunciationAssessmentConfig.prototype.enableContentAssessmentWithTopic\r\n     * @function\r\n     * @public\r\n     * @param {string} topic - Topic for content assessment.\r\n     */\r\n    public enableContentAssessmentWithTopic(topic: string): void {\r\n        this.privContentAssessmentTopic = topic;\r\n    }\r\n\r\n    /**\r\n     * @member PronunciationAssessmentConfig.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @return {PropertyCollection} Properties of the config.\r\n     * @summary Gets a pronunciation assessment config properties\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    private updateJson(): void {\r\n        const jsonString = this.privProperties.getProperty(PropertyId.PronunciationAssessment_Json, \"{}\");\r\n        const paramsJson: PronunciationAssessmentJSON = JSON.parse(jsonString) as PronunciationAssessmentJSON;\r\n\r\n        const referenceText = this.privProperties.getProperty(PropertyId.PronunciationAssessment_ReferenceText);\r\n        if (referenceText) {\r\n            paramsJson.referenceText = referenceText;\r\n        }\r\n\r\n        const gradingSystem = this.privProperties.getProperty(PropertyId.PronunciationAssessment_GradingSystem);\r\n        if (gradingSystem) {\r\n            paramsJson.gradingSystem = gradingSystem;\r\n        }\r\n\r\n        const granularity = this.privProperties.getProperty(PropertyId.PronunciationAssessment_Granularity);\r\n        if (granularity) {\r\n            paramsJson.granularity = granularity;\r\n        }\r\n\r\n        if (this.privPhonemeAlphabet) {\r\n            paramsJson.phonemeAlphabet = this.privPhonemeAlphabet;\r\n        }\r\n\r\n        if (this.privNBestPhonemeCount) {\r\n            paramsJson.nbestPhonemeCount = this.privNBestPhonemeCount;\r\n        }\r\n\r\n        paramsJson.enableProsodyAssessment = this.privEnableProsodyAssessment;\r\n\r\n        // always set dimension to Comprehensive\r\n        paramsJson.dimension = \"Comprehensive\";\r\n\r\n        const enableMiscueString = this.privProperties.getProperty(PropertyId.PronunciationAssessment_EnableMiscue);\r\n        if (enableMiscueString) {\r\n            paramsJson.enableMiscue = this.enableMiscue;\r\n        }\r\n\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_Params, JSON.stringify(paramsJson));\r\n    }\r\n\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {Contracts} from \"./Contracts.js\";\r\nimport {\r\n    PropertyId,\r\n    RecognitionResult\r\n} from \"./Exports.js\";\r\n\r\ninterface AssessmentResult {\r\n    NBest: DetailResult[];\r\n}\r\n\r\ninterface DetailResult {\r\n    Words: WordResult[];\r\n    PronunciationAssessment: {\r\n        AccuracyScore: number;\r\n        CompletenessScore: number;\r\n        FluencyScore: number;\r\n        PronScore: number;\r\n        ProsodyScore: number;\r\n    };\r\n    ContentAssessment: {\r\n        GrammarScore: number;\r\n        VocabularyScore: number;\r\n        TopicScore: number;\r\n    };\r\n}\r\n\r\ninterface WordResult {\r\n    Word: string;\r\n    Phonemes: {\r\n        Phoneme?: string;\r\n        PronunciationAssessment?: {\r\n            NBestPhonemes: { Phoneme: string }[];\r\n        };\r\n     }[];\r\n    PronunciationAssessment?: {\r\n        AccuracyScore: number;\r\n        ErrorType: string;\r\n    };\r\n    Syllables: { Syllable: string }[];\r\n}\r\n\r\nexport class ContentAssessmentResult {\r\n    private privPronJson: DetailResult;\r\n\r\n    /**\r\n     * @Internal\r\n     * Do not use externally.\r\n     */\r\n    public constructor(detailResult: DetailResult) {\r\n        this.privPronJson = detailResult;\r\n    }\r\n\r\n    /**\r\n     * Correctness in using grammar and variety of sentence patterns.\r\n     * Grammatical errors are jointly evaluated by lexical accuracy,\r\n     * grammatical accuracy and diversity of sentence structures.\r\n     * @member ContentAssessmentResult.prototype.grammarScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Grammar score.\r\n     */\r\n    public get grammarScore(): number {\r\n        return this.privPronJson.ContentAssessment.GrammarScore;\r\n    }\r\n\r\n    /**\r\n     * Proficiency in lexical usage. It evaluates the speaker's effective usage\r\n     * of words and their appropriateness within the given context to express\r\n     * ideas accurately, as well as level of lexical complexity.\r\n     * @member ContentAssessmentResult.prototype.vocabularyScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Vocabulary score.\r\n     */\r\n    public get vocabularyScore(): number {\r\n        return this.privPronJson.ContentAssessment.VocabularyScore;\r\n    }\r\n\r\n    /**\r\n     * Level of understanding and engagement with the topic, which provides\r\n     * insights into the speaker’s ability to express their thoughts and ideas\r\n     * effectively and the ability to engage with the topic.\r\n     * @member ContentAssessmentResult.prototype.topicScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Topic score.\r\n     */\r\n    public get topicScore(): number {\r\n        return this.privPronJson.ContentAssessment.TopicScore;\r\n    }\r\n}\r\n\r\n/**\r\n * Pronunciation assessment results.\r\n * @class PronunciationAssessmentResult\r\n * Added in version 1.15.0.\r\n */\r\nexport class PronunciationAssessmentResult {\r\n    private privPronJson: DetailResult;\r\n\r\n    private constructor(jsonString: string) {\r\n        const j = JSON.parse(jsonString) as AssessmentResult;\r\n        Contracts.throwIfNullOrUndefined(j.NBest[0], \"NBest\");\r\n        this.privPronJson = j.NBest[0];\r\n    }\r\n\r\n    /**\r\n     * @member PronunciationAssessmentResult.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {RecognitionResult} result The recognition result.\r\n     * @return {PronunciationAssessmentConfig} Instance of PronunciationAssessmentConfig\r\n     * @summary Creates an instance of the PronunciationAssessmentResult from recognition result.\r\n     */\r\n    public static fromResult(result: RecognitionResult): PronunciationAssessmentResult {\r\n        Contracts.throwIfNullOrUndefined(result, \"result\");\r\n        const json: string = result.properties.getProperty(PropertyId.SpeechServiceResponse_JsonResult);\r\n        Contracts.throwIfNullOrUndefined(json, \"json\");\r\n        return new PronunciationAssessmentResult(json);\r\n    }\r\n\r\n    /**\r\n     * Gets the detail result of pronunciation assessment.\r\n     * @member PronunciationAssessmentConfig.prototype.detailResult\r\n     * @function\r\n     * @public\r\n     * @returns {DetailResult} detail result.\r\n     */\r\n    public get detailResult(): DetailResult {\r\n        return this.privPronJson;\r\n    }\r\n\r\n    /**\r\n     * The score indicating the pronunciation accuracy of the given speech, which indicates\r\n     * how closely the phonemes match a native speaker's pronunciation.\r\n     * @member PronunciationAssessmentResult.prototype.accuracyScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Accuracy score.\r\n     */\r\n    public get accuracyScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.AccuracyScore;\r\n    }\r\n\r\n    /**\r\n     * The overall score indicating the pronunciation quality of the given speech.\r\n     * This is calculated from AccuracyScore, FluencyScore and CompletenessScore with weight.\r\n     * @member PronunciationAssessmentResult.prototype.pronunciationScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Pronunciation score.\r\n     */\r\n    public get pronunciationScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.PronScore;\r\n    }\r\n\r\n    /**\r\n     * The score indicating the completeness of the given speech by calculating the ratio of pronounced words towards entire input.\r\n     * @member PronunciationAssessmentResult.prototype.completenessScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Completeness score.\r\n     */\r\n    public get completenessScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.CompletenessScore;\r\n    }\r\n\r\n    /**\r\n     * The score indicating the fluency of the given speech.\r\n     * @member PronunciationAssessmentResult.prototype.fluencyScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Fluency score.\r\n     */\r\n    public get fluencyScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.FluencyScore;\r\n    }\r\n\r\n    /**\r\n     * The prosody score, which indicates how nature of the given speech, including stress, intonation, speaking speed and rhythm.\r\n     * @member PronunciationAssessmentResult.prototype.prosodyScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Prosody score.\r\n     */\r\n    public get prosodyScore(): number {\r\n        return this.detailResult.PronunciationAssessment?.ProsodyScore;\r\n    }\r\n\r\n    /**\r\n     * The concent assessment result.\r\n     * Only available when content assessment is enabled.\r\n     * @member PronunciationAssessmentResult.prototype.contentAssessmentResult\r\n     * @function\r\n     * @public\r\n     * @returns {ContentAssessmentResult} Content assessment result.\r\n     */\r\n    public get contentAssessmentResult(): ContentAssessmentResult {\r\n        if (this.detailResult.ContentAssessment === undefined) {\r\n            return undefined;\r\n        }\r\n        return new ContentAssessmentResult(this.detailResult);\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { AvatarVideoFormat } from \"./Exports.js\";\r\n\r\n/**\r\n * Defines the talking avatar configuration.\r\n * @class AvatarConfig\r\n * Added in version 1.33.0\r\n *\r\n * @experimental This feature is experimental and might change or have limited support.\r\n */\r\nexport class AvatarConfig {\r\n    private privCustomized: boolean = false;\r\n    private privBackgroundColor: string;\r\n    private privBackgroundImage: URL;\r\n    private privRemoteIceServers: RTCIceServer[];\r\n\r\n    /**\r\n     * Defines the avatar character.\r\n     */\r\n    public character: string;\r\n    /**\r\n     * Defines the avatar style.\r\n     */\r\n    public style: string;\r\n    /**\r\n     * Defines the talking avatar output video format.\r\n     */\r\n    public videoFormat: AvatarVideoFormat;\r\n\r\n    /**\r\n     * Indicates if the talking avatar is customized.\r\n     */\r\n    public get customized(): boolean {\r\n        return this.privCustomized;\r\n    }\r\n\r\n    /**\r\n     * Sets if the talking avatar is customized.\r\n     */\r\n    public set customized(value: boolean) {\r\n        this.privCustomized = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the background color.\r\n     */\r\n    public get backgroundColor(): string {\r\n        return this.privBackgroundColor;\r\n    }\r\n\r\n    /**\r\n     * Sets the background color.\r\n     */\r\n    public set backgroundColor(value: string) {\r\n        this.privBackgroundColor = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the background image.\r\n     */\r\n    public get backgroundImage(): URL {\r\n        return this.privBackgroundImage;\r\n    }\r\n\r\n    /**\r\n     * Sets the background image.\r\n     * @param {URL} value - The background image.\r\n     */\r\n    public set backgroundImage(value: URL) {\r\n        this.privBackgroundImage = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the remote ICE servers.\r\n     * @remarks This method is designed to be used internally in the SDK.\r\n     * @returns {RTCIceServer[]} The remote ICE servers.\r\n     */\r\n    public get remoteIceServers(): RTCIceServer[] {\r\n        return this.privRemoteIceServers;\r\n    }\r\n\r\n    /**\r\n     * Sets the remote ICE servers.\r\n     * @remarks Normally, the ICE servers are gathered from the PeerConnection,\r\n     * set this property to override the ICE servers. E.g., the ICE servers are\r\n     * different in client and server side.\r\n     * @param {RTCIceServer[]} value - The remote ICE servers.\r\n     */\r\n    public set remoteIceServers(value: RTCIceServer[]) {\r\n        this.privRemoteIceServers = value;\r\n    }\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} character - The avatar character.\r\n     * @param {string} style - The avatar style.\r\n     * @param {AvatarVideoFormat} videoFormat - The talking avatar output video format.\r\n     */\r\n    public constructor(character: string, style: string, videoFormat: AvatarVideoFormat) {\r\n        Contracts.throwIfNullOrWhitespace(character, \"character\");\r\n        this.character = character;\r\n        this.style = style;\r\n        if (videoFormat === undefined) {\r\n            videoFormat = new AvatarVideoFormat();\r\n        }\r\n        this.videoFormat = videoFormat;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport enum AvatarEventTypes {\r\n    SwitchedToSpeaking = \"SwitchedToSpeaking\",\r\n    SwitchedToIdle = \"SwitchedToIdle\",\r\n    SessionClosed = \"SessionClosed\",\r\n}\r\n\r\n/**\r\n * Defines content for talking avatar events.\r\n * @class AvatarEventArgs\r\n * Added in version 1.33.0\r\n *\r\n * @experimental This feature is experimental and might change or have limited support.\r\n */\r\nexport class AvatarEventArgs {\r\n    private privType: AvatarEventTypes;\r\n    private privOffset: number;\r\n    private privDescription: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {string} description - The description of the event.\r\n     */\r\n    public constructor(audioOffset: number, description: string) {\r\n        this.privOffset = audioOffset;\r\n        this.privDescription = description;\r\n    }\r\n\r\n    /**\r\n     * The type of the event.\r\n     * @public\r\n     * @returns {AvatarEventTypes} The type of the event.\r\n     */\r\n    public get type(): AvatarEventTypes {\r\n        return this.privType;\r\n    }\r\n\r\n    /**\r\n     * The time offset associated with this event.\r\n     * @public\r\n     * @returns {number} The time offset associated with this event.\r\n     */\r\n    public get offset(): number {\r\n        return this.privOffset;\r\n    }\r\n\r\n    /**\r\n     * The description of the event.\r\n     * @public\r\n     * @returns {string} The description of the event.\r\n     */\r\n    public get description(): string {\r\n        return this.privDescription;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport { PropertyId } from \"../sdk/Exports.js\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    SynthesizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport { ISynthesisConnectionFactory } from \"./ISynthesisConnectionFactory.js\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames.js\";\r\n\r\nexport class SpeechSynthesisConnectionFactory implements ISynthesisConnectionFactory {\r\n\r\n    private readonly synthesisUri: string = \"/cognitiveservices/websocket/v1\";\r\n\r\n    public create(\r\n        config: SynthesizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const endpointId = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const hostPrefix = (endpointId === undefined) ? \"tts\" : \"voice\";\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".\" + hostPrefix + \".speech\" + hostSuffix);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n        if (endpointId !== undefined && endpointId !== \"\") {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomVoiceDeploymentId) === -1) {\r\n                queryParams[QueryParameterNames.CustomVoiceDeploymentId] = endpointId;\r\n            }\r\n        }\r\n\r\n        if (config.avatarEnabled) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.EnableAvatar) === -1) {\r\n                queryParams[QueryParameterNames.EnableAvatar] = \"true\";\r\n            }\r\n        }\r\n\r\n        if (!endpoint) {\r\n            endpoint = host + this.synthesisUri;\r\n        }\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromParameters(config.parameters), enableCompression, connectionId);\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SpeechSynthesisConnectionFactory } from \"../common.speech/SpeechSynthesisConnectionFactory.js\";\r\nimport { SynthesisRestAdapter } from \"../common.speech/SynthesisRestAdapter.js\";\r\nimport { SynthesizerConfig } from \"../common.speech/SynthesizerConfig.js\";\r\nimport {\r\n    AvatarSynthesisAdapter,\r\n    IAuthentication,\r\n    ISynthesisConnectionFactory,\r\n    SpeechServiceConfig,\r\n    SynthesisAdapterBase\r\n} from \"../common.speech/Exports.js\";\r\nimport { createNoDashGuid, Deferred, Events, EventType, PlatformEvent } from \"../common/Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"./Audio/AudioOutputFormat.js\";\r\nimport {\r\n    AvatarConfig,\r\n    AvatarEventArgs,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechConfig,\r\n    SpeechSynthesisOutputFormat,\r\n    SpeechSynthesisResult,\r\n    SynthesisResult,\r\n    Synthesizer\r\n} from \"./Exports.js\";\r\nimport { Contracts } from \"./Contracts.js\";\r\nimport { SynthesisRequest } from \"./Synthesizer.js\";\r\n\r\n/**\r\n * Defines the avatar synthesizer.\r\n * @class AvatarSynthesizer\r\n * Added in version 1.33.0\r\n *\r\n * @experimental This feature is experimental and might change or have limited support.\r\n */\r\nexport class AvatarSynthesizer extends Synthesizer {\r\n    protected privProperties: PropertyCollection;\r\n    private privAvatarConfig: AvatarConfig;\r\n    private privIceServers: RTCIceServer[];\r\n    /**\r\n     * Defines event handler for avatar events.\r\n     * @member AvatarSynthesizer.prototype.avatarEventReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public avatarEventReceived: (sender: AvatarSynthesizer, event: AvatarEventArgs) => void;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The speech config.\r\n     * @param {AvatarConfig} avatarConfig - The talking avatar config.\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, avatarConfig: AvatarConfig) {\r\n        super(speechConfig);\r\n\r\n        Contracts.throwIfNullOrUndefined(avatarConfig, \"avatarConfig\");\r\n\r\n        this.privConnectionFactory = new SpeechSynthesisConnectionFactory();\r\n        this.privAvatarConfig = avatarConfig;\r\n        this.implCommonSynthesizeSetup();\r\n    }\r\n\r\n    protected implCommonSynthesizeSetup(): void {\r\n        super.implCommonSynthesizeSetup();\r\n\r\n        // The service checks the audio format setting while it ignores it in avatar synthesis.\r\n        this.privAdapter.audioOutputFormat = AudioOutputFormatImpl.fromSpeechSynthesisOutputFormat(\r\n            SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Starts the talking avatar session and establishes the WebRTC connection.\r\n     * @member AvatarSynthesizer.prototype.startAvatarAsync\r\n     * @function\r\n     * @public\r\n     * @param {AvatarWebRTCConnectionInfo} peerConnection - The peer connection.\r\n     * @returns {Promise<SynthesisResult>} The promise of the connection result.\r\n     */\r\n    public async startAvatarAsync(peerConnection: RTCPeerConnection): Promise<SynthesisResult> {\r\n        Contracts.throwIfNullOrUndefined(peerConnection, \"peerConnection\");\r\n        this.privIceServers = peerConnection.getConfiguration().iceServers;\r\n        Contracts.throwIfNullOrUndefined(this.privIceServers, \"Ice servers must be set.\");\r\n        const iceGatheringDone = new Deferred<void>();\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/icegatheringstatechange_event\r\n        peerConnection.onicegatheringstatechange = (): void => {\r\n            Events.instance.onEvent(new PlatformEvent(\"peer connection: ice gathering state: \" + peerConnection.iceGatheringState, EventType.Debug));\r\n            if (peerConnection.iceGatheringState === \"complete\") {\r\n                Events.instance.onEvent(new PlatformEvent(\"peer connection: ice gathering complete.\", EventType.Info));\r\n                iceGatheringDone.resolve();\r\n            }\r\n        };\r\n        peerConnection.onicecandidate = (event: RTCPeerConnectionIceEvent): void => {\r\n            if (event.candidate) {\r\n                Events.instance.onEvent(new PlatformEvent(\"peer connection: ice candidate: \" + event.candidate.candidate, EventType.Debug));\r\n            } else {\r\n                Events.instance.onEvent(new PlatformEvent(\"peer connection: ice candidate: complete\", EventType.Debug));\r\n                iceGatheringDone.resolve();\r\n            }\r\n        };\r\n        // Set a timeout for ice gathering, currently 2 seconds.\r\n        setTimeout((): void => {\r\n            if (peerConnection.iceGatheringState !== \"complete\") {\r\n                Events.instance.onEvent(new PlatformEvent(\"peer connection: ice gathering timeout.\", EventType.Warning));\r\n                iceGatheringDone.resolve();\r\n            }\r\n        }, 2000);\r\n        const sdp: RTCSessionDescriptionInit = await peerConnection.createOffer();\r\n        await peerConnection.setLocalDescription(sdp);\r\n        await iceGatheringDone.promise;\r\n        Events.instance.onEvent(new PlatformEvent(\"peer connection: got local SDP.\", EventType.Info));\r\n        this.privProperties.setProperty(PropertyId.TalkingAvatarService_WebRTC_SDP, JSON.stringify(peerConnection.localDescription));\r\n\r\n        const result: SpeechSynthesisResult = await this.speak(\"\", false);\r\n        if (result.reason !== ResultReason.SynthesizingAudioCompleted) {\r\n            return new SynthesisResult(\r\n                result.resultId,\r\n                result.reason,\r\n                result.errorDetails,\r\n                result.properties,\r\n            );\r\n        }\r\n        const sdpAnswerString: string = atob(result.properties.getProperty(PropertyId.TalkingAvatarService_WebRTC_SDP));\r\n        const sdpAnswer: RTCSessionDescription = new RTCSessionDescription(\r\n            JSON.parse(sdpAnswerString) as RTCSessionDescriptionInit,\r\n        );\r\n        await peerConnection.setRemoteDescription(sdpAnswer);\r\n        return new SynthesisResult(\r\n            result.resultId,\r\n            result.reason,\r\n            undefined,\r\n            result.properties,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Speaks plain text asynchronously. The rendered audio and video will be sent via the WebRTC connection.\r\n     * @member AvatarSynthesizer.prototype.speakTextAsync\r\n     * @function\r\n     * @public\r\n     * @param {string} text - The plain text to speak.\r\n     * @returns {Promise<SynthesisResult>} The promise of the synthesis result.\r\n     */\r\n    public async speakTextAsync(text: string): Promise<SynthesisResult> {\r\n        const r = await this.speak(text, false);\r\n        return new SynthesisResult(\r\n            r.resultId,\r\n            r.reason,\r\n            r.errorDetails,\r\n            r.properties,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Speaks SSML asynchronously. The rendered audio and video will be sent via the WebRTC connection.\r\n     * @member AvatarSynthesizer.prototype.speakSsmlAsync\r\n     * @function\r\n     * @public\r\n     * @param {string} ssml - The SSML text to speak.\r\n     * @returns {Promise<SynthesisResult>} The promise of the synthesis result.\r\n     */\r\n    public async speakSsmlAsync(ssml: string): Promise<SynthesisResult> {\r\n        const r = await this.speak(ssml, true);\r\n        return new SynthesisResult(\r\n            r.resultId,\r\n            r.reason,\r\n            r.errorDetails,\r\n            r.properties,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Speaks text asynchronously. The avatar will switch to idle state.\r\n     * @member AvatarSynthesizer.prototype.stopSpeakingAsync\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} The promise of the void result.\r\n     */\r\n    public async stopSpeakingAsync(): Promise<void> {\r\n        while (this.synthesisRequestQueue.length() > 0) {\r\n            const request = await this.synthesisRequestQueue.dequeue();\r\n            request.err(\"Synthesis is canceled by user.\");\r\n        }\r\n        return this.privAdapter.stopSpeaking();\r\n    }\r\n\r\n    /**\r\n     * Stops the talking avatar session and closes the WebRTC connection.\r\n     * For now, this is the same as close().\r\n     * You need to create a new AvatarSynthesizer instance to start a new session.\r\n     * @member AvatarSynthesizer.prototype.stopAvatarAsync\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} The promise of the void result.\r\n     */\r\n    public async stopAvatarAsync(): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        return this.dispose(true);\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member AvatarSynthesizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public async close(): Promise<void> {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        return this.dispose(true);\r\n    }\r\n\r\n    /**\r\n     * Gets the ICE servers. Internal use only.\r\n     */\r\n    public get iceServers(): RTCIceServer[] {\r\n        return this.privIceServers;\r\n    }\r\n\r\n    // Creates the synthesis adapter\r\n    protected createSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisAdapterBase {\r\n        return new AvatarSynthesisAdapter(\r\n            authentication,\r\n            connectionFactory,\r\n            synthesizerConfig,\r\n            this,\r\n            this.privAvatarConfig);\r\n    }\r\n\r\n    protected createRestSynthesisAdapter(\r\n        _authentication: IAuthentication,\r\n        _synthesizerConfig: SynthesizerConfig): SynthesisRestAdapter {\r\n        return undefined;\r\n    }\r\n\r\n    protected createSynthesizerConfig(speechConfig: SpeechServiceConfig): SynthesizerConfig {\r\n        const config = super.createSynthesizerConfig(speechConfig);\r\n        config.avatarEnabled = true;\r\n        return config;\r\n    }\r\n\r\n    protected async speak(text: string, isSSML: boolean): Promise<SpeechSynthesisResult> {\r\n        const requestId = createNoDashGuid();\r\n        const deferredResult = new Deferred<SpeechSynthesisResult>();\r\n        this.synthesisRequestQueue.enqueue(new SynthesisRequest(requestId, text, isSSML,\r\n            (e: SpeechSynthesisResult): void => {\r\n                deferredResult.resolve(e);\r\n                this.privSynthesizing = false;\r\n                void this.adapterSpeak();\r\n            },\r\n            (e: string): void => {\r\n                deferredResult.reject(e);\r\n                this.privSynthesizing = false;\r\n            }));\r\n        void this.adapterSpeak();\r\n        return deferredResult.promise;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\n/**\r\n * Defines a coordinate in 2D space.\r\n * @class Coordinate\r\n * Added in version 1.33.0\r\n */\r\nexport class Coordinate {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    public constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\n\r\n/**\r\n * Defines the avatar output video format.\r\n * @class AvatarVideoFormat\r\n * Added in version 1.33.0\r\n *\r\n * @experimental This feature is experimental and might change in the future.\r\n */\r\nexport class AvatarVideoFormat {\r\n    /**\r\n     * Defines the video codec.\r\n     * @default \"H264\"\r\n     */\r\n    public codec: string;\r\n    /**\r\n     * Defines the video bitrate.\r\n     * @default 2000000\r\n     */\r\n    public bitrate: number;\r\n    /**\r\n     * Defines the video width.\r\n     * @default 1920\r\n     */\r\n    public width: number;\r\n    /**\r\n     * Defines the video height.\r\n     * @default 1080\r\n     */\r\n    public height: number;\r\n\r\n    /**\r\n     * Sets the video crop range.\r\n     */\r\n    public setCropRange(topLeft: Coordinate, bottomRight: Coordinate): void {\r\n        this.cropRange = {\r\n            bottomRight,\r\n            topLeft,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Defines the video crop range.\r\n     * @default undefined\r\n     * @internal\r\n     */\r\n    public cropRange: {\r\n        topLeft: Coordinate;\r\n        bottomRight: Coordinate;\r\n    };\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} codec - The video codec.\r\n     * @param {number} bitrate - The video bitrate.\r\n     * @param {number} width - The video width.\r\n     * @param {number} height - The video height.\r\n     */\r\n    public constructor(codec: string = \"H264\",\r\n                       bitrate: number = 2000000,\r\n                       width: number = 1920,\r\n                       height: number = 1080,\r\n    ) {\r\n        this.codec = codec;\r\n        this.bitrate = bitrate;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ResultReason,\r\n    PropertyCollection,\r\n    SynthesisResult\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Defines the avatar WebRTC connection result.\r\n * @class AvatarWebRTCConnectionResult\r\n * Added in version 1.33.0\r\n *\r\n * @experimental This feature is experimental and might change in the future.\r\n */\r\nexport class AvatarWebRTCConnectionResult extends SynthesisResult {\r\n    private readonly privSDPAnswer: RTCSessionDescriptionInit;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {RTCSessionDescriptionInit} SDPAnswer - The SDP answer of WebRTC connection.\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(SDPAnswer?: RTCSessionDescriptionInit, resultId?: string, reason?: ResultReason, errorDetails?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, errorDetails, properties);\r\n        this.privSDPAnswer = SDPAnswer;\r\n    }\r\n\r\n    /**\r\n     * Specifies SDP (Session Description Protocol) answer of WebRTC connection.\r\n     * @member AvatarWebRTCConnectionResult.prototype.SDPAnswer\r\n     * @function\r\n     * @public\r\n     * @returns {RTCSessionDescriptionInit} Specifies the SDP answer of WebRTC connection.\r\n     */\r\n    public get SDPAnswer(): RTCSessionDescriptionInit {\r\n        return this.privSDPAnswer;\r\n    }\r\n}\r\n", "//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport { ConsoleLoggingListener } from \"../common.browser/Exports.js\";\r\nimport { Events } from \"../common/Exports.js\";\r\nimport { LogLevel } from \"./LogLevel.js\";\r\n\r\ntype LogCallback = (s: string) => void;\r\n\r\n/**\r\n * Defines diagnostics API for managing console output\r\n * Added in version 1.21.0\r\n */\r\nexport class Diagnostics {\r\n    private static privListener: ConsoleLoggingListener = undefined;\r\n\r\n    public static SetLoggingLevel(logLevel: LogLevel): void {\r\n        this.privListener = new ConsoleLoggingListener(logLevel);\r\n        Events.instance.attachConsoleListener(this.privListener);\r\n    }\r\n\r\n    public static StartConsoleOutput(): void {\r\n        if (!!this.privListener) {\r\n            this.privListener.enableConsoleOutput = true;\r\n        }\r\n    }\r\n\r\n    public static StopConsoleOutput(): void {\r\n        if (!!this.privListener) {\r\n            this.privListener.enableConsoleOutput = false;\r\n        }\r\n    }\r\n\r\n    public static SetLogOutputPath(path: string): void {\r\n        if (typeof window === \"undefined\") {\r\n            if (!!this.privListener) {\r\n                this.privListener.logPath = path;\r\n            }\r\n        } else {\r\n            throw new Error(\"File system logging not available in browser.\");\r\n        }\r\n    }\r\n\r\n\r\n    public static set onLogOutput( callback: LogCallback ) {\r\n        if (!!this.privListener) {\r\n            this.privListener.logCallback = callback;\r\n        }\r\n    }\r\n\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport { AudioConfig } from \"./Audio/AudioConfig.js\";\r\nexport { AudioStreamFormat, AudioFormatTag } from \"./Audio/AudioStreamFormat.js\";\r\nexport { AudioInputStream, PullAudioInputStream, PushAudioInputStream } from \"./Audio/AudioInputStream.js\";\r\nexport { AudioOutputStream, PullAudioOutputStream, PushAudioOutputStream} from \"./Audio/AudioOutputStream.js\";\r\nexport { CancellationReason } from \"./CancellationReason.js\";\r\nexport { PullAudioInputStreamCallback } from \"./Audio/PullAudioInputStreamCallback.js\";\r\nexport { PushAudioOutputStreamCallback } from \"./Audio/PushAudioOutputStreamCallback.js\";\r\nexport { KeywordRecognitionModel } from \"./KeywordRecognitionModel.js\";\r\nexport { SessionEventArgs } from \"./SessionEventArgs.js\";\r\nexport { RecognitionEventArgs } from \"./RecognitionEventArgs.js\";\r\nexport { OutputFormat } from \"./OutputFormat.js\";\r\nexport { IntentRecognitionEventArgs } from \"./IntentRecognitionEventArgs.js\";\r\nexport { RecognitionResult } from \"./RecognitionResult.js\";\r\nexport { SpeechRecognitionResult } from \"./SpeechRecognitionResult.js\";\r\nexport { IntentRecognitionResult } from \"./IntentRecognitionResult.js\";\r\nexport { LanguageUnderstandingModel } from \"./LanguageUnderstandingModel.js\";\r\nexport { SpeechRecognitionEventArgs, ConversationTranscriptionEventArgs, MeetingTranscriptionEventArgs } from \"./SpeechRecognitionEventArgs.js\";\r\nexport { SpeechRecognitionCanceledEventArgs } from \"./SpeechRecognitionCanceledEventArgs.js\";\r\nexport { TranslationRecognitionEventArgs } from \"./TranslationRecognitionEventArgs.js\";\r\nexport { TranslationSynthesisEventArgs } from \"./TranslationSynthesisEventArgs.js\";\r\nexport { TranslationRecognitionResult } from \"./TranslationRecognitionResult.js\";\r\nexport { TranslationSynthesisResult } from \"./TranslationSynthesisResult.js\";\r\nexport { ResultReason } from \"./ResultReason.js\";\r\nexport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig.js\";\r\nexport { SpeechTranslationConfig, SpeechTranslationConfigImpl } from \"./SpeechTranslationConfig.js\";\r\nexport { PropertyCollection } from \"./PropertyCollection.js\";\r\nexport { PropertyId } from \"./PropertyId.js\";\r\nexport { Recognizer } from \"./Recognizer.js\";\r\nexport { SpeechRecognizer } from \"./SpeechRecognizer.js\";\r\nexport { IntentRecognizer } from \"./IntentRecognizer.js\";\r\nexport { VoiceProfileType } from \"./VoiceProfileType.js\";\r\nexport { TranslationRecognizer } from \"./TranslationRecognizer.js\";\r\nexport { Translations } from \"./Translations.js\";\r\nexport { NoMatchReason } from \"./NoMatchReason.js\";\r\nexport { NoMatchDetails } from \"./NoMatchDetails.js\";\r\nexport { TranslationRecognitionCanceledEventArgs } from \"./TranslationRecognitionCanceledEventArgs.js\";\r\nexport { IntentRecognitionCanceledEventArgs } from \"./IntentRecognitionCanceledEventArgs.js\";\r\nexport { CancellationDetailsBase } from \"./CancellationDetailsBase.js\";\r\nexport { CancellationDetails } from \"./CancellationDetails.js\";\r\nexport { CancellationErrorCode } from \"./CancellationErrorCodes.js\";\r\nexport { ConnectionEventArgs } from \"./ConnectionEventArgs.js\";\r\nexport { ServiceEventArgs } from \"./ServiceEventArgs.js\";\r\nexport { Connection } from \"./Connection.js\";\r\nexport { PhraseListGrammar } from \"./PhraseListGrammar.js\";\r\nexport { DialogServiceConfig } from \"./DialogServiceConfig.js\";\r\nexport { BotFrameworkConfig } from \"./BotFrameworkConfig.js\";\r\nexport { CustomCommandsConfig } from \"./CustomCommandsConfig.js\";\r\nexport { DialogServiceConnector } from \"./DialogServiceConnector.js\";\r\nexport { ActivityReceivedEventArgs } from \"./ActivityReceivedEventArgs.js\";\r\nexport { TurnStatusReceivedEventArgs } from \"./TurnStatusReceivedEventArgs.js\";\r\nexport { ServicePropertyChannel } from \"./ServicePropertyChannel.js\";\r\nexport { ProfanityOption } from \"./ProfanityOption.js\";\r\nexport { BaseAudioPlayer } from \"./Audio/BaseAudioPlayer.js\";\r\nexport { ConnectionMessageEventArgs } from \"./ConnectionMessageEventArgs.js\";\r\nexport { ConnectionMessage } from \"./ConnectionMessage.js\";\r\nexport { VoiceProfile } from \"./VoiceProfile.js\";\r\nexport { VoiceProfileEnrollmentResult, VoiceProfileEnrollmentCancellationDetails } from \"./VoiceProfileEnrollmentResult.js\";\r\nexport { VoiceProfileResult, VoiceProfileCancellationDetails } from \"./VoiceProfileResult.js\";\r\nexport { VoiceProfilePhraseResult } from \"./VoiceProfilePhraseResult.js\";\r\nexport { VoiceProfileClient } from \"./VoiceProfileClient.js\";\r\nexport { SpeakerRecognizer } from \"./SpeakerRecognizer.js\";\r\nexport { SpeakerIdentificationModel } from \"./SpeakerIdentificationModel.js\";\r\nexport { SpeakerVerificationModel } from \"./SpeakerVerificationModel.js\";\r\nexport { AutoDetectSourceLanguageConfig } from \"./AutoDetectSourceLanguageConfig.js\";\r\nexport { AutoDetectSourceLanguageResult } from \"./AutoDetectSourceLanguageResult.js\";\r\nexport { SourceLanguageConfig } from \"./SourceLanguageConfig.js\";\r\nexport { SpeakerRecognitionResult, SpeakerRecognitionResultType, SpeakerRecognitionCancellationDetails } from \"./SpeakerRecognitionResult.js\";\r\nexport { Conversation,\r\n    ConversationExpirationEventArgs,\r\n    ConversationInfo,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    ConversationTranslationResult,\r\n    ConversationTranslator,\r\n    ConversationTranscriber,\r\n    ConversationTranscriptionResult,\r\n    Meeting,\r\n    MeetingInfo,\r\n    MeetingTranscriber,\r\n    IParticipant,\r\n    Participant,\r\n    ParticipantChangedReason,\r\n    User,\r\n    VoiceSignature\r\n    } from \"./Transcription/Exports.js\";\r\nexport { Synthesizer } from \"./Synthesizer.js\";\r\nexport { SpeechSynthesisOutputFormat } from \"./SpeechSynthesisOutputFormat.js\";\r\nexport { SpeechSynthesizer } from \"./SpeechSynthesizer.js\";\r\nexport { SynthesisResult } from \"./SynthesisResult.js\";\r\nexport { SpeechSynthesisResult } from \"./SpeechSynthesisResult.js\";\r\nexport { SpeechSynthesisEventArgs } from \"./SpeechSynthesisEventArgs.js\";\r\nexport { SpeechSynthesisWordBoundaryEventArgs } from \"./SpeechSynthesisWordBoundaryEventArgs.js\";\r\nexport { SpeechSynthesisBookmarkEventArgs } from \"./SpeechSynthesisBookmarkEventArgs.js\";\r\nexport { SpeechSynthesisVisemeEventArgs } from \"./SpeechSynthesisVisemeEventArgs.js\";\r\nexport { SpeechSynthesisBoundaryType } from \"./SpeechSynthesisBoundaryType.js\";\r\nexport { SynthesisVoicesResult } from \"./SynthesisVoicesResult.js\";\r\nexport { VoiceInfo } from \"./VoiceInfo.js\";\r\nexport { IPlayer } from \"./Audio/IPlayer.js\";\r\nexport { SpeakerAudioDestination } from \"./Audio/SpeakerAudioDestination.js\";\r\nexport { CancellationEventArgs } from \"./CancellationEventArgs.js\";\r\nexport { ConversationTranscriptionCanceledEventArgs } from \"./ConversationTranscriptionCanceledEventArgs.js\";\r\nexport { MeetingTranscriptionCanceledEventArgs } from \"./MeetingTranscriptionCanceledEventArgs.js\";\r\nexport { PronunciationAssessmentGradingSystem } from \"./PronunciationAssessmentGradingSystem.js\";\r\nexport { PronunciationAssessmentGranularity } from \"./PronunciationAssessmentGranularity.js\";\r\nexport { PronunciationAssessmentConfig } from \"./PronunciationAssessmentConfig.js\";\r\nexport { PronunciationAssessmentResult } from \"./PronunciationAssessmentResult.js\";\r\nexport { LanguageIdMode } from \"./LanguageIdMode.js\";\r\nexport { AvatarConfig } from \"./AvatarConfig.js\";\r\nexport { AvatarEventArgs } from \"./AvatarEventArgs.js\";\r\nexport { AvatarSynthesizer } from \"./AvatarSynthesizer.js\";\r\nexport { AvatarVideoFormat, Coordinate } from \"./AvatarVideoFormat.js\";\r\nexport { AvatarWebRTCConnectionResult } from \"./AvatarWebRTCConnectionResult.js\";\r\nexport { Diagnostics } from \"./Diagnostics.js\";\r\nexport { LogLevel } from \"./LogLevel.js\";\r\nexport { IVoiceJson } from \"./IVoiceJson.js\";\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognizerConfig } from \"../common.speech/Exports.js\";\r\nimport { PropertyCollection, PropertyId } from \"../sdk/Exports.js\";\r\n\r\nexport class ProxyInfo {\r\n    private privProxyHostName: string;\r\n    private privProxyPort: number;\r\n    private privProxyUserName: string;\r\n    private privProxyPassword: string;\r\n\r\n    private constructor(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string) {\r\n        this.privProxyHostName = proxyHostName;\r\n        this.privProxyPort = proxyPort;\r\n        this.privProxyUserName = proxyUserName;\r\n        this.privProxyPassword = proxyPassword;\r\n    }\r\n\r\n    public static fromParameters(parameters: PropertyCollection): ProxyInfo {\r\n        return new ProxyInfo(parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyHostName),\r\n            parseInt(parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyPort), 10),\r\n            parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyUserName),\r\n            parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyPassword));\r\n    }\r\n\r\n    public static fromRecognizerConfig(config: RecognizerConfig): ProxyInfo {\r\n        return this.fromParameters(config.parameters);\r\n    }\r\n\r\n    public get HostName(): string {\r\n        return this.privProxyHostName;\r\n    }\r\n\r\n    public get Port(): number {\r\n        return this.privProxyPort;\r\n    }\r\n\r\n    public get UserName(): string {\r\n        return this.privProxyUserName;\r\n    }\r\n\r\n    public get Password(): string {\r\n        return this.privProxyPassword;\r\n    }\r\n}\r\n", "'use strict'\nconst encodings = new Set(['json', 'buffer', 'string'])\n\nmodule.exports = mkrequest => (...args) => {\n  const statusCodes = new Set()\n  let method\n  let encoding\n  let headers\n  let baseurl = ''\n\n  args.forEach(arg => {\n    if (typeof arg === 'string') {\n      if (arg.toUpperCase() === arg) {\n        if (method) {\n          const msg = `Can't set method to ${arg}, already set to ${method}.`\n          throw new Error(msg)\n        } else {\n          method = arg\n        }\n      } else if (arg.startsWith('http:') || arg.startsWith('https:')) {\n        baseurl = arg\n      } else {\n        if (encodings.has(arg)) {\n          encoding = arg\n        } else {\n          throw new Error(`Unknown encoding, ${arg}`)\n        }\n      }\n    } else if (typeof arg === 'number') {\n      statusCodes.add(arg)\n    } else if (typeof arg === 'object') {\n      if (Array.isArray(arg) || arg instanceof Set) {\n        arg.forEach(code => statusCodes.add(code))\n      } else {\n        if (headers) {\n          throw new Error('Cannot set headers twice.')\n        }\n        headers = arg\n      }\n    } else {\n      throw new Error(`Unknown type: ${typeof arg}`)\n    }\n  })\n\n  if (!method) method = 'GET'\n  if (statusCodes.size === 0) {\n    statusCodes.add(200)\n  }\n\n  return mkrequest(statusCodes, method, encoding, headers, baseurl)\n}\n", "'use strict'\n/* global fetch, btoa, Headers */\nconst core = require('./core')\n\nclass StatusError extends Error {\n  constructor (res, ...params) {\n    super(...params)\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, StatusError)\n    }\n\n    this.name = 'StatusError'\n    this.message = res.statusMessage\n    this.statusCode = res.status\n    this.res = res\n    this.json = res.json.bind(res)\n    this.text = res.text.bind(res)\n    this.arrayBuffer = res.arrayBuffer.bind(res)\n    let buffer\n    const get = () => {\n      if (!buffer) buffer = this.arrayBuffer()\n      return buffer\n    }\n    Object.defineProperty(this, 'responseBody', { get })\n    // match Node.js headers object\n    this.headers = {}\n    for (const [key, value] of res.headers.entries()) {\n      this.headers[key.toLowerCase()] = value\n    }\n  }\n}\n\nconst mkrequest = (statusCodes, method, encoding, headers, baseurl) => async (_url, body, _headers = {}) => {\n  _url = baseurl + (_url || '')\n  let parsed = new URL(_url)\n\n  if (!headers) headers = {}\n  if (parsed.username) {\n    headers.Authorization = 'Basic ' + btoa(parsed.username + ':' + parsed.password)\n    parsed = new URL(parsed.protocol + '//' + parsed.host + parsed.pathname + parsed.search)\n  }\n  if (parsed.protocol !== 'https:' && parsed.protocol !== 'http:') {\n    throw new Error(`Unknown protocol, ${parsed.protocol}`)\n  }\n\n  if (body) {\n    if (body instanceof ArrayBuffer ||\n      ArrayBuffer.isView(body) ||\n      typeof body === 'string'\n    ) {\n      // noop\n    } else if (typeof body === 'object') {\n      body = JSON.stringify(body)\n      headers['Content-Type'] = 'application/json'\n    } else {\n      throw new Error('Unknown body type.')\n    }\n  }\n\n  _headers = new Headers({ ...(headers || {}), ..._headers })\n\n  const resp = await fetch(parsed, { method, headers: _headers, body })\n  resp.statusCode = resp.status\n\n  if (!statusCodes.has(resp.status)) {\n    throw new StatusError(resp)\n  }\n\n  if (encoding === 'json') return resp.json()\n  else if (encoding === 'buffer') return resp.arrayBuffer()\n  else if (encoding === 'string') return resp.text()\n  else return resp\n}\n\nmodule.exports = core(mkrequest)\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport bent, { BentResponse, RequestBody } from \"bent\";\r\nimport {\r\n    ArgumentNullError,\r\n    Deferred\r\n} from \"../common/Exports.js\";\r\nimport { IRequestOptions } from \"./Exports.js\";\r\n\r\nexport enum RestRequestType {\r\n    Get = \"GET\",\r\n    Post = \"POST\",\r\n    Delete = \"DELETE\",\r\n    File = \"file\",\r\n}\r\n\r\nexport interface IRestResponse {\r\n    ok: boolean;\r\n    status: number;\r\n    statusText: string;\r\n    data: string;\r\n    json: any;\r\n    headers: string;\r\n}\r\n\r\ninterface JsonError {\r\n    error?: {\r\n        message: string;\r\n    };\r\n}\r\n\r\n// accept rest operations via request method and return abstracted objects from server response\r\nexport class RestMessageAdapter {\r\n\r\n    private privIgnoreCache: boolean;\r\n    private privHeaders: { [key: string]: string };\r\n\r\n    public constructor(\r\n        configParams: IRequestOptions\r\n        ) {\r\n\r\n        if (!configParams) {\r\n            throw new ArgumentNullError(\"configParams\");\r\n        }\r\n\r\n        this.privHeaders = configParams.headers;\r\n        this.privIgnoreCache = configParams.ignoreCache;\r\n    }\r\n\r\n    public static extractHeaderValue(headerKey: string, headers: string): string {\r\n        let headerValue: string = \"\";\r\n\r\n        try {\r\n            const arr = headers.trim().split(/[\\r\\n]+/);\r\n            const headerMap: { [key: string]: string } = {};\r\n            arr.forEach((line: string): void => {\r\n                const parts = line.split(\": \");\r\n                const header = parts.shift().toLowerCase();\r\n                const value = parts.join(\": \");\r\n                headerMap[header] = value;\r\n            });\r\n\r\n            headerValue = headerMap[headerKey.toLowerCase()];\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n\r\n        return headerValue;\r\n    }\r\n\r\n    public set options(configParams: IRequestOptions) {\r\n        this.privHeaders = configParams.headers;\r\n        this.privIgnoreCache = configParams.ignoreCache;\r\n    }\r\n\r\n    public setHeaders(key: string, value: string): void {\r\n        this.privHeaders[key] = value;\r\n    }\r\n\r\n    public request(\r\n        method: RestRequestType,\r\n        uri: string,\r\n        queryParams: { [key: string]: any } = {},\r\n        body: any = null,\r\n        ): Promise<IRestResponse> {\r\n\r\n        const responseReceivedDeferral = new Deferred<IRestResponse>();\r\n\r\n        const requestCommand = method === RestRequestType.File ? \"POST\" : method;\r\n        const handleRestResponse = (data: BentResponse, j: JsonError = {}): IRestResponse => {\r\n            const d: { statusText?: string; statusMessage?: string } = data;\r\n            return {\r\n                data: JSON.stringify(j),\r\n                headers: JSON.stringify(data.headers),\r\n                json: j,\r\n                ok: data.statusCode >= 200 && data.statusCode < 300,\r\n                status: data.statusCode,\r\n                statusText: j.error ? j.error.message : d.statusText ? d.statusText : d.statusMessage\r\n            };\r\n        };\r\n\r\n        const send = (postData: RequestBody): void => {\r\n            const sendRequest = bent(uri, requestCommand, this.privHeaders, 200, 201, 202, 204, 400, 401, 402, 403, 404);\r\n            const params = this.queryParams(queryParams) === \"\" ? \"\" : `?${this.queryParams(queryParams)}`;\r\n            sendRequest(params, postData).then( async (data: BentResponse): Promise<void> => {\r\n                if (method === RestRequestType.Delete || data.statusCode === 204) {\r\n                    // No JSON from Delete and reset (204) operations\r\n                    responseReceivedDeferral.resolve(handleRestResponse(data));\r\n                } else {\r\n                    try {\r\n                        const j: JsonError = await data.json() as JsonError;\r\n                        responseReceivedDeferral.resolve(handleRestResponse(data, j));\r\n                    } catch {\r\n                        responseReceivedDeferral.resolve(handleRestResponse(data));\r\n                    }\r\n                }\r\n            }).catch((error: string): void => {\r\n                responseReceivedDeferral.reject(error);\r\n            });\r\n        };\r\n\r\n        if (this.privIgnoreCache) {\r\n            this.privHeaders[\"Cache-Control\"] = \"no-cache\";\r\n        }\r\n\r\n        if (method === RestRequestType.Post && body) {\r\n            this.privHeaders[\"content-type\"] = \"application/json\";\r\n            this.privHeaders[\"Content-Type\"] = \"application/json\";\r\n        }\r\n        send(body as RequestBody);\r\n        return responseReceivedDeferral.promise;\r\n    }\r\n\r\n    private queryParams(params: { [key: string]: string } = {}): string {\r\n        return Object.keys(params)\r\n            .map((k: string): string => encodeURIComponent(k) + \"=\" + encodeURIComponent(params[k]))\r\n            .join(\"&\");\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IErrorMessages } from \"../common/Exports.js\";\r\n/**\r\n * HTTP request helper\r\n */\r\nexport interface IRequestOptions {\r\n    headers?: {[key: string]: string};\r\n    ignoreCache?: boolean;\r\n    timeout?: number;\r\n}\r\n\r\nexport interface IRestParams {\r\n    apiVersion: string;\r\n    authorization: string;\r\n    clientAppId: string;\r\n    contentTypeKey: string;\r\n    correlationId: string;\r\n    languageCode: string;\r\n    nickname: string;\r\n    profanity: string;\r\n    requestId: string;\r\n    roomId: string;\r\n    sessionToken: string;\r\n    subscriptionKey: string;\r\n    subscriptionRegion: string;\r\n    token: string;\r\n}\r\n\r\nexport class RestConfigBase {\r\n\r\n    public static get requestOptions(): IRequestOptions {\r\n        return RestConfigBase.privDefaultRequestOptions;\r\n    }\r\n\r\n    public static get configParams(): IRestParams {\r\n        return RestConfigBase.privDefaultParams;\r\n    }\r\n\r\n    public static get restErrors(): IErrorMessages {\r\n        return RestConfigBase.privRestErrors;\r\n    }\r\n\r\n    private static readonly privDefaultRequestOptions: IRequestOptions = {\r\n        headers: {\r\n            Accept: \"application/json\",\r\n        },\r\n        ignoreCache: false,\r\n        timeout: 10000,\r\n    };\r\n\r\n    private static readonly privRestErrors: IErrorMessages = {\r\n        authInvalidSubscriptionKey: \"You must specify either an authentication token to use, or a Cognitive Speech subscription key.\",\r\n        authInvalidSubscriptionRegion: \"You must specify the Cognitive Speech region to use.\",\r\n        invalidArgs: \"Required input not found: {arg}.\",\r\n        invalidCreateJoinConversationResponse: \"Creating/Joining conversation failed with HTTP {status}.\",\r\n        invalidParticipantRequest: \"The requested participant was not found.\",\r\n        permissionDeniedConnect: \"Required credentials not found.\",\r\n        permissionDeniedConversation: \"Invalid operation: only the host can {command} the conversation.\",\r\n        permissionDeniedParticipant: \"Invalid operation: only the host can {command} a participant.\",\r\n        permissionDeniedSend: \"Invalid operation: the conversation is not in a connected state.\",\r\n        permissionDeniedStart: \"Invalid operation: there is already an active conversation.\",\r\n    };\r\n\r\n    private static readonly privDefaultParams: IRestParams = {\r\n        apiVersion: \"api-version\",\r\n        authorization: \"Authorization\",\r\n        clientAppId: \"X-ClientAppId\",\r\n        contentTypeKey: \"Content-Type\",\r\n        correlationId: \"X-CorrelationId\",\r\n        languageCode: \"language\",\r\n        nickname: \"nickname\",\r\n        profanity: \"profanity\",\r\n        requestId: \"X-RequestId\",\r\n        roomId: \"roomid\",\r\n        sessionToken: \"token\",\r\n        subscriptionKey: \"Ocp-Apim-Subscription-Key\",\r\n        subscriptionRegion: \"Ocp-Apim-Subscription-Region\",\r\n        token: \"X-CapitoToken\",\r\n    };\r\n\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport * from \"./ConsoleLoggingListener.js\";\r\nexport * from \"./IRecorder.js\";\r\nexport * from \"./MicAudioSource.js\";\r\nexport * from \"./FileAudioSource.js\";\r\nexport * from \"./PCMRecorder.js\";\r\nexport * from \"./WebsocketConnection.js\";\r\nexport * from \"./WebsocketMessageAdapter.js\";\r\nexport * from \"./ReplayableAudioNode.js\";\r\nexport * from \"./ProxyInfo.js\";\r\nexport * from \"./RestMessageAdapter.js\";\r\nexport * from \"./RestConfigBase.js\";\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\n\r\nexport class IntentConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_IntentRegion);\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".sr.speech\" + hostSuffix);\r\n            endpoint = host + \"/speech/recognition/interactive/cognitiveservices/v1\";\r\n        }\r\n\r\n        const queryParams: IStringDictionary<string> = {\r\n            format: \"simple\",\r\n            language: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n        };\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n    private getSpeechRegionFromIntentRegion(intentRegion: string): string {\r\n        switch (intentRegion) {\r\n            case \"West US\":\r\n            case \"US West\":\r\n            case \"westus\":\r\n                return \"uswest\";\r\n            case \"West US 2\":\r\n            case \"US West 2\":\r\n            case \"westus2\":\r\n                return \"uswest2\";\r\n            case \"South Central US\":\r\n            case \"US South Central\":\r\n            case \"southcentralus\":\r\n                return \"ussouthcentral\";\r\n            case \"West Central US\":\r\n            case \"US West Central\":\r\n            case \"westcentralus\":\r\n                return \"uswestcentral\";\r\n            case \"East US\":\r\n            case \"US East\":\r\n            case \"eastus\":\r\n                return \"useast\";\r\n            case \"East US 2\":\r\n            case \"US East 2\":\r\n            case \"eastus2\":\r\n                return \"useast2\";\r\n            case \"West Europe\":\r\n            case \"Europe West\":\r\n            case \"westeurope\":\r\n                return \"europewest\";\r\n            case \"North Europe\":\r\n            case \"Europe North\":\r\n            case \"northeurope\":\r\n                return \"europenorth\";\r\n            case \"Brazil South\":\r\n            case \"South Brazil\":\r\n            case \"southbrazil\":\r\n                return \"brazilsouth\";\r\n            case \"Australia East\":\r\n            case \"East Australia\":\r\n            case \"eastaustralia\":\r\n                return \"australiaeast\";\r\n            case \"Southeast Asia\":\r\n            case \"Asia Southeast\":\r\n            case \"southeastasia\":\r\n                return \"asiasoutheast\";\r\n            case \"East Asia\":\r\n            case \"Asia East\":\r\n            case \"eastasia\":\r\n                return \"asiaeast\";\r\n            default:\r\n                return intentRegion;\r\n        }\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\n\r\nclass SpeakerRecognitionConnectionFactoryBase extends ConnectionFactoryBase {\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        endpointPath: string,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `wss://${region}.spr-frontend.speech${hostSuffix}`);\r\n            const scenario: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_SpeakerIdMode, \"TextIndependentIdentification\");\r\n            endpoint = `${host}/speaker/ws/${this.scenarioToPath(scenario)}/${endpointPath}`;\r\n        }\r\n\r\n        const queryParams: IStringDictionary<string> = {\r\n            format: \"simple\",\r\n            language: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n        };\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n        headers[HeaderNames.SpIDAuthKey] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n    private scenarioToPath(mode: string): string {\r\n        switch (mode) {\r\n            case \"TextIndependentVerification\":\r\n            case \"2\":\r\n                return \"verification/text-independent\";\r\n            case \"TextDependentVerification\":\r\n            case \"1\":\r\n                return \"verification/text-dependent\";\r\n            default:\r\n                return \"identification/text-independent\";\r\n        }\r\n    }\r\n}\r\n\r\nexport class SpeakerRecognitionConnectionFactory extends SpeakerRecognitionConnectionFactoryBase {\r\n    public create( config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n        return super.create(config, authInfo, \"recognition\", connectionId);\r\n    }\r\n}\r\n\r\nexport class VoiceProfileConnectionFactory extends SpeakerRecognitionConnectionFactoryBase {\r\n    public create( config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n        return super.create(config, authInfo, \"profile\", connectionId);\r\n    }\r\n}\r\n\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { EventType, PlatformEvent } from \"../common/Exports.js\";\r\n\r\nexport class SpeechRecognitionEvent extends PlatformEvent {\r\n    private privRequestId: string;\r\n    private privSessionId: string;\r\n\r\n    public constructor(eventName: string, requestId: string, sessionId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n\r\n        this.privRequestId = requestId;\r\n        this.privSessionId = sessionId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n}\r\n\r\nexport class RecognitionTriggeredEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n\r\n    public constructor(requestId: string, sessionId: string, audioSourceId: string, audioNodeId: string) {\r\n        super(\"RecognitionTriggeredEvent\", requestId, sessionId);\r\n\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n}\r\n\r\nexport class ListeningStartedEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n\r\n    public constructor(requestId: string, sessionId: string, audioSourceId: string, audioNodeId: string) {\r\n        super(\"ListeningStartedEvent\", requestId, sessionId);\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n}\r\n\r\nexport class ConnectingToServiceEvent extends SpeechRecognitionEvent {\r\n    private privAuthFetchEventid: string;\r\n\r\n    public constructor(requestId: string, authFetchEventid: string, sessionId: string) {\r\n        super(\"ConnectingToServiceEvent\", requestId, sessionId);\r\n        this.privAuthFetchEventid = authFetchEventid;\r\n    }\r\n\r\n    public get authFetchEventid(): string {\r\n        return this.privAuthFetchEventid;\r\n    }\r\n}\r\n\r\nexport class RecognitionStartedEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n    private privAuthFetchEventId: string;\r\n\r\n    public constructor(requestId: string, audioSourceId: string, audioNodeId: string, authFetchEventId: string, sessionId: string) {\r\n        super(\"RecognitionStartedEvent\", requestId, sessionId);\r\n\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n}\r\n\r\nexport enum RecognitionCompletionStatus {\r\n    Success,\r\n    AudioSourceError,\r\n    AudioSourceTimeout,\r\n    AuthTokenFetchError,\r\n    AuthTokenFetchTimeout,\r\n    UnAuthorized,\r\n    ConnectTimeout,\r\n    ConnectError,\r\n    ClientRecognitionActivityTimeout,\r\n    UnknownError,\r\n}\r\n\r\nexport class RecognitionEndedEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n    private privAuthFetchEventId: string;\r\n    private privServiceTag: string;\r\n    private privStatus: RecognitionCompletionStatus;\r\n    private privError: string;\r\n\r\n    public constructor(\r\n        requestId: string,\r\n        audioSourceId: string,\r\n        audioNodeId: string,\r\n        authFetchEventId: string,\r\n        sessionId: string,\r\n        serviceTag: string,\r\n        status: RecognitionCompletionStatus,\r\n        error: string) {\r\n\r\n        super(\"RecognitionEndedEvent\", requestId, sessionId, status === RecognitionCompletionStatus.Success ? EventType.Info : EventType.Error);\r\n\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n        this.privStatus = status;\r\n        this.privError = error;\r\n        this.privServiceTag = serviceTag;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n\r\n    public get serviceTag(): string {\r\n        return this.privServiceTag;\r\n    }\r\n\r\n    public get status(): RecognitionCompletionStatus {\r\n        return this.privStatus;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError, ConnectionMessage, IStringDictionary, MessageType } from \"../common/Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\n\r\nexport class SpeechConnectionMessage extends ConnectionMessage {\r\n\r\n    private privPath: string;\r\n    private privRequestId: string;\r\n    private privContentType: string;\r\n    private privStreamId: string;\r\n    private privAdditionalHeaders: IStringDictionary<string>;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        path: string,\r\n        requestId: string,\r\n        contentType: string,\r\n        body: any,\r\n        streamId?: string,\r\n        additionalHeaders?: IStringDictionary<string>,\r\n        id?: string) {\r\n\r\n        if (!path) {\r\n            throw new ArgumentNullError(\"path\");\r\n        }\r\n\r\n        if (!requestId) {\r\n            throw new ArgumentNullError(\"requestId\");\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        headers[HeaderNames.Path] = path;\r\n        headers[HeaderNames.RequestId] = requestId;\r\n        headers[HeaderNames.RequestTimestamp] = new Date().toISOString();\r\n        if (contentType) {\r\n            headers[HeaderNames.ContentType] = contentType;\r\n        }\r\n\r\n        if (streamId) {\r\n            headers[HeaderNames.RequestStreamId] = streamId;\r\n        }\r\n\r\n        if (additionalHeaders) {\r\n            for (const headerName in additionalHeaders) {\r\n                if (headerName) {\r\n                    headers[headerName] = additionalHeaders[headerName];\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        if (id) {\r\n            super(messageType, body, headers, id);\r\n        } else {\r\n            super(messageType, body, headers);\r\n        }\r\n\r\n        this.privPath = path;\r\n        this.privRequestId = requestId;\r\n        this.privContentType = contentType;\r\n        this.privStreamId = streamId;\r\n        this.privAdditionalHeaders = additionalHeaders;\r\n    }\r\n\r\n    public get path(): string {\r\n        return this.privPath;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get contentType(): string {\r\n        return this.privContentType;\r\n    }\r\n\r\n    public get streamId(): string {\r\n        return this.privStreamId;\r\n    }\r\n\r\n    public get additionalHeaders(): IStringDictionary<string> {\r\n        return this.privAdditionalHeaders;\r\n    }\r\n\r\n    public static fromConnectionMessage(message: ConnectionMessage): SpeechConnectionMessage {\r\n        let path = null;\r\n        let requestId = null;\r\n        let contentType = null;\r\n        // let requestTimestamp = null;\r\n        let streamId = null;\r\n        const additionalHeaders: IStringDictionary<string> = {};\r\n\r\n        if (message.headers) {\r\n            for (const headerName in message.headers) {\r\n                if (headerName) {\r\n                    if (headerName.toLowerCase() === HeaderNames.Path.toLowerCase()) {\r\n                        path = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.RequestId.toLowerCase()) {\r\n                        requestId = message.headers[headerName];\r\n                    // } else if (headerName.toLowerCase() === HeaderNames.RequestTimestamp.toLowerCase()) {\r\n                       //  requestTimestamp = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.ContentType.toLowerCase()) {\r\n                        contentType = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.RequestStreamId.toLowerCase()) {\r\n                        streamId = message.headers[headerName];\r\n                    } else {\r\n                        additionalHeaders[headerName] = message.headers[headerName];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return new SpeechConnectionMessage(\r\n            message.messageType,\r\n            path,\r\n            requestId,\r\n            contentType,\r\n            message.body,\r\n            streamId,\r\n            additionalHeaders,\r\n            message.id);\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports.js\";\r\nimport { ConnectionOpenResponse } from \"../common/ConnectionOpenResponse.js\";\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEvent,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    IDisposable,\r\n    IStreamChunk,\r\n    MessageType,\r\n    ServiceEvent,\r\n    Timeout\r\n} from \"../common/Exports.js\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat.js\";\r\nimport { SpeakerRecognitionModel } from \"../sdk/SpeakerRecognitionModel.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeakerRecognitionResult,\r\n    SpeechRecognitionResult,\r\n    OutputFormat\r\n} from \"../sdk/Exports.js\";\r\nimport { Callback } from \"../sdk/Transcription/IConversation.js\";\r\nimport {\r\n    AgentConfig,\r\n    DynamicGrammarBuilder,\r\n    ISpeechConfigAudioDevice,\r\n    RecognitionMode,\r\n    RequestSession,\r\n    SpeechContext,\r\n    SpeechDetected,\r\n    type,\r\n    OutputFormatPropertyName\r\n} from \"./Exports.js\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication,\r\n} from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\ninterface CustomModel {\r\n    language: string;\r\n    endpoint: string;\r\n}\r\n\r\nexport interface PhraseDetection {\r\n    customModels?: CustomModel[];\r\n    onInterim?: { action: string };\r\n    onSuccess?: { action: string };\r\n    mode?: string;\r\n    INTERACTIVE?: Segmentation;\r\n    CONVERSATION?: Segmentation;\r\n    DICTATION?: Segmentation;\r\n    speakerDiarization?: SpeakerDiarization;\r\n}\r\n\r\nexport interface SpeakerDiarization {\r\n    mode?: string;\r\n    audioSessionId?: string;\r\n    audioOffsetMs?: number;\r\n    identityProvider?: string;\r\n}\r\n\r\nexport interface Segmentation {\r\n    segmentation: {\r\n        mode: \"Custom\";\r\n        segmentationSilenceTimeoutMs: number;\r\n    };\r\n}\r\n\r\nexport abstract class ServiceRecognizerBase implements IDisposable {\r\n    private privAuthentication: IAuthentication;\r\n    private privConnectionFactory: IConnectionFactory;\r\n\r\n    // A promise for a configured connection.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionConfigurationPromise: Promise<IConnection> = undefined;\r\n\r\n    // A promise for a connection, but one that has not had the speech context sent yet.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionPromise: Promise<IConnection> = undefined;\r\n    private privAuthFetchEventId: string;\r\n    private privIsDisposed: boolean;\r\n    private privMustReportEndOfStream: boolean;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privServiceEvents: EventSource<ServiceEvent>;\r\n    private privDynamicGrammar: DynamicGrammarBuilder;\r\n    private privAgentConfig: AgentConfig;\r\n    private privServiceHasSentMessage: boolean;\r\n    private privActivityTemplate: string;\r\n    private privSetTimeout: (cb: () => void, delay: number) => number = setTimeout;\r\n    private privAudioSource: IAudioSource;\r\n    private privIsLiveAudio: boolean = false;\r\n    private privAverageBytesPerMs: number = 0;\r\n    protected privSpeechContext: SpeechContext;\r\n    protected privRequestSession: RequestSession;\r\n    protected privConnectionId: string;\r\n    protected privDiarizationSessionId: string;\r\n    protected privRecognizerConfig: RecognizerConfig;\r\n    protected privRecognizer: Recognizer;\r\n    protected privSuccessCallback: (e: SpeechRecognitionResult) => void;\r\n    protected privErrorCallback: (e: string) => void;\r\n    protected privEnableSpeakerId: boolean = false;\r\n    protected privExpectContentAssessmentResponse: boolean = false;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: Recognizer) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!audioSource) {\r\n            throw new ArgumentNullError(\"audioSource\");\r\n        }\r\n\r\n        if (!recognizerConfig) {\r\n            throw new ArgumentNullError(\"recognizerConfig\");\r\n        }\r\n\r\n        this.privEnableSpeakerId = recognizerConfig.isSpeakerDiarizationEnabled;\r\n        this.privMustReportEndOfStream = false;\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privAudioSource = audioSource;\r\n        this.privRecognizerConfig = recognizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privRecognizer = recognizer;\r\n        this.privRequestSession = new RequestSession(this.privAudioSource.id());\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privServiceEvents = new EventSource<ServiceEvent>();\r\n        this.privDynamicGrammar = new DynamicGrammarBuilder();\r\n        this.privSpeechContext = new SpeechContext(this.privDynamicGrammar);\r\n        this.privAgentConfig = new AgentConfig();\r\n        const webWorkerLoadType: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.WebWorkerLoadType, \"on\").toLowerCase();\r\n        if (webWorkerLoadType === \"on\" && typeof (Blob) !== \"undefined\" && typeof (Worker) !== \"undefined\") {\r\n            this.privSetTimeout = Timeout.setTimeout;\r\n        } else {\r\n            if (typeof window !== \"undefined\") {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                this.privSetTimeout = window.setTimeout.bind(window);\r\n            }\r\n            if (typeof globalThis !== \"undefined\") {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                this.privSetTimeout = globalThis.setTimeout.bind(globalThis);\r\n            }\r\n        }\r\n\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                const connectionClosedEvent = connectionEvent as ConnectionClosedEvent;\r\n                if (connectionClosedEvent.statusCode === 1003 ||\r\n                    connectionClosedEvent.statusCode === 1007 ||\r\n                    connectionClosedEvent.statusCode === 1002 ||\r\n                    connectionClosedEvent.statusCode === 4000 ||\r\n                    this.privRequestSession.numConnectionAttempts > this.privRecognizerConfig.maxRetryCount\r\n                ) {\r\n                    void this.cancelRecognitionLocal(CancellationReason.Error,\r\n                        connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure,\r\n                        `${connectionClosedEvent.reason} websocket error code: ${connectionClosedEvent.statusCode}`);\r\n                }\r\n            }\r\n        });\r\n\r\n        if (this.privEnableSpeakerId) {\r\n            this.privDiarizationSessionId = createNoDashGuid();\r\n        }\r\n\r\n        this.setLanguageIdJson();\r\n        this.setOutputDetailLevelJson();\r\n    }\r\n\r\n    protected setTranslationJson(): void {\r\n        const targetLanguages: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined);\r\n        if (targetLanguages !== undefined) {\r\n            const languages = targetLanguages.split(\",\");\r\n            const translationVoice: string =  this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n            const action = ( translationVoice !== undefined ) ? \"Synthesize\" : \"None\";\r\n            this.privSpeechContext.setSection(\"translation\", {\r\n                onSuccess: { action },\r\n                output: { interimResults: { mode: \"Always\" } },\r\n                targetLanguages: languages,\r\n            });\r\n\r\n            if (translationVoice !== undefined) {\r\n                const languageToVoiceMap: { [key: string]: string } = {};\r\n                for (const lang of languages) {\r\n                    languageToVoiceMap[lang] = translationVoice;\r\n                }\r\n                this.privSpeechContext.setSection(\"synthesis\", {\r\n                    defaultVoices: languageToVoiceMap\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    protected setSpeechSegmentationTimeoutJson(): void {\r\n        const speechSegmentationTimeout: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.Speech_SegmentationSilenceTimeoutMs, undefined);\r\n        if (speechSegmentationTimeout !== undefined) {\r\n            const mode = this.recognitionMode === RecognitionMode.Conversation ? \"CONVERSATION\" :\r\n                this.recognitionMode === RecognitionMode.Dictation ? \"DICTATION\" : \"INTERACTIVE\";\r\n            const segmentationSilenceTimeoutMs: number = parseInt(speechSegmentationTimeout, 10);\r\n            const phraseDetection = this.privSpeechContext.getSection(\"phraseDetection\") as PhraseDetection;\r\n            phraseDetection.mode = mode;\r\n            phraseDetection[mode] = {\r\n                segmentation: {\r\n                    mode: \"Custom\",\r\n                    segmentationSilenceTimeoutMs\r\n                }\r\n            };\r\n            this.privSpeechContext.setSection(\"phraseDetection\", phraseDetection);\r\n        }\r\n    }\r\n\r\n    protected setLanguageIdJson(): void {\r\n        const phraseDetection = this.privSpeechContext.getSection(\"phraseDetection\") as PhraseDetection;\r\n        if (this.privRecognizerConfig.autoDetectSourceLanguages !== undefined) {\r\n            const sourceLanguages: string[] = this.privRecognizerConfig.autoDetectSourceLanguages.split(\",\");\r\n\r\n            let speechContextLidMode;\r\n            if (this.privRecognizerConfig.languageIdMode === \"Continuous\") {\r\n                speechContextLidMode = \"DetectContinuous\";\r\n            } else {// recognizerConfig.languageIdMode === \"AtStart\"\r\n                speechContextLidMode = \"DetectAtAudioStart\";\r\n            }\r\n\r\n            this.privSpeechContext.setSection(\"languageId\", {\r\n                Priority: \"PrioritizeLatency\",\r\n                languages: sourceLanguages,\r\n                mode: speechContextLidMode,\r\n                onSuccess: { action: \"Recognize\" },\r\n                onUnknown: { action: \"None\" }\r\n            });\r\n            this.privSpeechContext.setSection(\"phraseOutput\", {\r\n                interimResults: {\r\n                    resultType: \"Auto\"\r\n                },\r\n                phraseResults: {\r\n                    resultType: \"Always\"\r\n                }\r\n            });\r\n            const customModels: CustomModel[] = this.privRecognizerConfig.sourceLanguageModels;\r\n            if (customModels !== undefined) {\r\n                phraseDetection.customModels = customModels;\r\n                phraseDetection.onInterim = { action: \"None\" };\r\n                phraseDetection.onSuccess = { action: \"None\" };\r\n            }\r\n        }\r\n        const targetLanguages: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined);\r\n        if (targetLanguages !== undefined) {\r\n            phraseDetection.onInterim = { action: \"Translate\" };\r\n            phraseDetection.onSuccess = { action: \"Translate\" };\r\n            this.privSpeechContext.setSection(\"phraseOutput\", {\r\n                interimResults: {\r\n                    resultType: \"None\"\r\n                },\r\n                phraseResults: {\r\n                    resultType: \"None\"\r\n                }\r\n            });\r\n        }\r\n\r\n        this.privSpeechContext.setSection(\"phraseDetection\", phraseDetection);\r\n    }\r\n\r\n    protected setOutputDetailLevelJson(): void {\r\n        if (this.privEnableSpeakerId) {\r\n            const requestWordLevelTimestamps: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"false\").toLowerCase();\r\n            if (requestWordLevelTimestamps === \"true\") {\r\n                this.privSpeechContext.setWordLevelTimings();\r\n            } else {\r\n                const outputFormat: string = this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n                if (outputFormat === OutputFormat[OutputFormat.Detailed].toLocaleLowerCase()) {\r\n                    this.privSpeechContext.setDetailedOutputFormat();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public get isSpeakerDiarizationEnabled(): boolean {\r\n        return this.privEnableSpeakerId;\r\n    }\r\n\r\n    public get audioSource(): IAudioSource {\r\n        return this.privAudioSource;\r\n    }\r\n\r\n    public get speechContext(): SpeechContext {\r\n        return this.privSpeechContext;\r\n    }\r\n\r\n    public get dynamicGrammar(): DynamicGrammarBuilder {\r\n        return this.privDynamicGrammar;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n\r\n    public set conversationTranslatorToken(token: string) {\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.ConversationTranslator_Token, token);\r\n    }\r\n\r\n    public set voiceProfileType(type: string) {\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.SpeechServiceConnection_SpeakerIdMode, type);\r\n    }\r\n\r\n    public set authentication(auth: IAuthentication) {\r\n        this.privAuthentication = auth;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privIsDisposed = true;\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            try {\r\n                const connection: IConnection = await this.privConnectionConfigurationPromise;\r\n                await connection.dispose(reason);\r\n            } catch (error) {\r\n                // The connection is in a bad state. But we're trying to kill it, so...\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    public get connectionEvents(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    public get serviceEvents(): EventSource<ServiceEvent> {\r\n        return this.privServiceEvents;\r\n    }\r\n\r\n    public get recognitionMode(): RecognitionMode {\r\n        return this.privRecognizerConfig.recognitionMode;\r\n    }\r\n\r\n    protected recognizeOverride: (recoMode: RecognitionMode, sc: (e: SpeechRecognitionResult) => void, ec: (e: string) => void) => Promise<void> = undefined;\r\n\r\n    public recognizeSpeaker: (model: SpeakerRecognitionModel) => Promise<SpeakerRecognitionResult> = undefined;\r\n\r\n    public async recognize(\r\n        recoMode: RecognitionMode,\r\n        successCallback: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n    ): Promise<void> {\r\n\r\n        if (this.recognizeOverride !== undefined) {\r\n            await this.recognizeOverride(recoMode, successCallback, errorCallBack);\r\n            return;\r\n        }\r\n        // Clear the existing configuration promise to force a re-transmission of config and context.\r\n        this.privConnectionConfigurationPromise = undefined;\r\n        this.privRecognizerConfig.recognitionMode = recoMode;\r\n        this.setSpeechSegmentationTimeoutJson();\r\n        this.setTranslationJson();\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallBack;\r\n\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privAudioSource.events);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        let audioNode: ReplayableAudioNode;\r\n\r\n        try {\r\n            const audioStreamNode: IAudioStreamNode = await this.audioSource.attach(this.privRequestSession.audioNodeId);\r\n            const format: AudioStreamFormatImpl = await this.audioSource.format;\r\n            const deviceInfo: ISpeechConfigAudioDevice = await this.audioSource.deviceInfo;\r\n            this.privIsLiveAudio = deviceInfo.type && deviceInfo.type === type.Microphones;\r\n\r\n            audioNode = new ReplayableAudioNode(audioStreamNode, format.avgBytesPerSec);\r\n            await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n            this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        } catch (error) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n            throw error;\r\n        }\r\n\r\n        try {\r\n            await conPromise;\r\n        } catch (error) {\r\n            await this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error as string);\r\n            return;\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        void this.receiveMessage();\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        audioSendPromise.catch(async (error: string): Promise<void> => {\r\n            await this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n\r\n        return;\r\n    }\r\n\r\n    public async stopRecognizing(): Promise<void> {\r\n        if (this.privRequestSession.isRecognizing) {\r\n            try {\r\n                await this.audioSource.turnOff();\r\n                await this.sendFinalAudio();\r\n                await this.privRequestSession.onStopRecognizing();\r\n                await this.privRequestSession.turnCompletionPromise;\r\n            } finally {\r\n                await this.privRequestSession.dispose();\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    public async connect(): Promise<void> {\r\n        await this.connectImpl();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public connectAsync(cb?: Callback, err?: Callback): void {\r\n        this.connectImpl().then((): void => {\r\n            try {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }\r\n        }, (reason: any): void => {\r\n            try {\r\n                if (!!err) {\r\n                    err(reason);\r\n                }\r\n                /* eslint-disable no-empty */\r\n            } catch (error) {\r\n            }\r\n        });\r\n    }\r\n\r\n    protected disconnectOverride: () => Promise<void> = undefined;\r\n\r\n    public async disconnect(): Promise<void> {\r\n        await this.cancelRecognitionLocal(CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        if (this.disconnectOverride !== undefined) {\r\n            await this.disconnectOverride();\r\n        }\r\n\r\n        if (this.privConnectionPromise !== undefined) {\r\n            try {\r\n                await (await this.privConnectionPromise).dispose();\r\n            } catch (error) {\r\n\r\n            }\r\n        }\r\n        this.privConnectionPromise = undefined;\r\n    }\r\n\r\n    // Called when telemetry data is sent to the service.\r\n    // Used for testing Telemetry capture.\r\n    public static telemetryData: (json: string) => void;\r\n    public static telemetryDataEnabled: boolean = true;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public sendMessage(message: string): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public async sendNetworkMessage(path: string, payload: string | ArrayBuffer): Promise<void> {\r\n        const type: MessageType = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\r\n        const contentType: string = typeof payload === \"string\" ? \"application/json\" : \"\";\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new SpeechConnectionMessage(type, path, this.privRequestSession.requestId, contentType, payload));\r\n    }\r\n\r\n    public set activityTemplate(messagePayload: string) {\r\n        this.privActivityTemplate = messagePayload;\r\n    }\r\n\r\n    public get activityTemplate(): string {\r\n        return this.privActivityTemplate;\r\n    }\r\n\r\n    public set expectContentAssessmentResponse(value: boolean) {\r\n        this.privExpectContentAssessmentResponse = value;\r\n    }\r\n\r\n    protected abstract processTypeSpecificMessages(\r\n        connectionMessage: SpeechConnectionMessage,\r\n        successCallback?: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack?: (e: string) => void): Promise<boolean>;\r\n\r\n    protected async sendTelemetryData(): Promise<void> {\r\n        const telemetryData = this.privRequestSession.getTelemetry();\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true ||\r\n            this.privIsDisposed ||\r\n            null === telemetryData) {\r\n            return;\r\n        }\r\n\r\n        if (!!ServiceRecognizerBase.telemetryData) {\r\n            try {\r\n                ServiceRecognizerBase.telemetryData(telemetryData);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"telemetry\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json\",\r\n            telemetryData));\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected abstract cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void;\r\n\r\n    // Cancels recognition.\r\n    protected async cancelRecognitionLocal(\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): Promise<void> {\r\n\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n\r\n            this.cancelRecognition(\r\n                this.privRequestSession.sessionId,\r\n                this.privRequestSession.requestId,\r\n                cancellationReason,\r\n                errorCode,\r\n                error);\r\n        }\r\n    }\r\n\r\n    protected receiveMessageOverride: () => Promise<void> = undefined;\r\n\r\n    protected async receiveMessage(): Promise<void> {\r\n        try {\r\n            if (this.privIsDisposed) {\r\n                // We're done.\r\n                return;\r\n            }\r\n\r\n            let connection = await this.fetchConnection();\r\n            const message = await connection.read();\r\n\r\n            if (this.receiveMessageOverride !== undefined) {\r\n                return this.receiveMessageOverride();\r\n            }\r\n\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!message) {\r\n                return this.receiveMessage();\r\n            }\r\n\r\n            this.privServiceHasSentMessage = true;\r\n            const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n            if (connectionMessage.requestId.toLowerCase() === this.privRequestSession.requestId.toLowerCase()) {\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        this.privMustReportEndOfStream = true;\r\n                        this.privRequestSession.onServiceTurnStartResponse();\r\n                        break;\r\n\r\n                    case \"speech.startdetected\":\r\n                        const speechStartDetected: SpeechDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\r\n                        const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\r\n                        if (!!this.privRecognizer.speechStartDetected) {\r\n                            this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"speech.enddetected\":\r\n                        let json: string;\r\n                        if (connectionMessage.textBody.length > 0) {\r\n                            json = connectionMessage.textBody;\r\n                        } else {\r\n                            // If the request was empty, the JSON returned is empty.\r\n                            json = \"{ Offset: 0 }\";\r\n                        }\r\n                        const speechStopDetected: SpeechDetected = SpeechDetected.fromJSON(json);\r\n                        const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n                        if (!!this.privRecognizer.speechEndDetected) {\r\n                            this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"turn.end\":\r\n                        await this.sendTelemetryData();\r\n                        if (this.privRequestSession.isSpeechEnded && this.privMustReportEndOfStream) {\r\n                            this.privMustReportEndOfStream = false;\r\n                            await this.cancelRecognitionLocal(CancellationReason.EndOfStream, CancellationErrorCode.NoError, undefined);\r\n                        }\r\n                        const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n                        await this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition);\r\n                        if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {\r\n                            if (!!this.privRecognizer.sessionStopped) {\r\n                                this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\r\n                            }\r\n                            return;\r\n                        } else {\r\n                            connection = await this.fetchConnection();\r\n                            await this.sendPrePayloadJSON(connection);\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        if (!await this.processTypeSpecificMessages(connectionMessage)) {\r\n                            // here are some messages that the derived class has not processed, dispatch them to connect class\r\n                            if (!!this.privServiceEvents) {\r\n                                this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                            }\r\n                        }\r\n                }\r\n            }\r\n            return this.receiveMessage();\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private updateSpeakerDiarizationAudioOffset(): void {\r\n        const bytesSent: number = this.privRequestSession.recognitionBytesSent;\r\n        const audioOffsetMs: number = bytesSent / this.privAverageBytesPerMs;\r\n        this.privSpeechContext.setSpeakerDiarizationAudioOffsetMs(audioOffsetMs);\r\n    }\r\n\r\n    protected sendSpeechContext(connection: IConnection, generateNewRequestId: boolean): Promise<void> {\r\n        if (this.privEnableSpeakerId) {\r\n            this.updateSpeakerDiarizationAudioOffset();\r\n        }\r\n        const speechContextJson = this.speechContext.toJSON();\r\n        if (generateNewRequestId) {\r\n            this.privRequestSession.onSpeechContext();\r\n        }\r\n\r\n        if (speechContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.context\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                speechContextJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected sendPrePayloadJSONOverride: (connection: IConnection) => Promise<void> = undefined;\r\n\r\n    protected noOp(): Promise<void> {\r\n        // operation not supported\r\n        return;\r\n    }\r\n\r\n    // Encapsulated for derived service recognizers that need to send additional JSON\r\n    protected async sendPrePayloadJSON(connection: IConnection, generateNewRequestId: boolean = true): Promise<void> {\r\n        if (this.sendPrePayloadJSONOverride !== undefined) {\r\n            return this.sendPrePayloadJSONOverride(connection);\r\n        }\r\n\r\n        await this.sendSpeechContext(connection, generateNewRequestId);\r\n        await this.sendWaveHeader(connection);\r\n        return;\r\n    }\r\n\r\n    protected async sendWaveHeader(connection: IConnection): Promise<void> {\r\n        const format: AudioStreamFormatImpl = await this.audioSource.format;\r\n        // this.writeBufferToConsole(format.header);\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Binary,\r\n            \"audio\",\r\n            this.privRequestSession.requestId,\r\n            \"audio/x-wav\",\r\n            format.header\r\n        ));\r\n    }\r\n\r\n    protected postConnectImplOverride: (connection: Promise<IConnection>) => Promise<IConnection> = undefined;\r\n\r\n    // Establishes a websocket connection to the end point.\r\n    protected connectImpl(): Promise<IConnection> {\r\n        if (this.privConnectionPromise !== undefined) {\r\n            return this.privConnectionPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionPromise = undefined;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.connectImpl();\r\n                }\r\n                return this.privConnectionPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionPromise = undefined;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.connectImpl();\r\n            });\r\n        }\r\n\r\n        this.privConnectionPromise = this.retryableConnect();\r\n\r\n        // Attach an empty handler to allow the promise to run in the background while\r\n        // other startup events happen. It'll eventually be awaited on.\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        this.privConnectionPromise.catch((): void => { });\r\n\r\n        if (this.postConnectImplOverride !== undefined) {\r\n            return this.postConnectImplOverride(this.privConnectionPromise);\r\n        }\r\n\r\n        return this.privConnectionPromise;\r\n    }\r\n\r\n    protected configConnectionOverride: (connection: IConnection) => Promise<IConnection> = undefined;\r\n    protected handleSpeechPhraseMessage: (textBody: string) => Promise<void> = undefined;\r\n    protected handleSpeechHypothesisMessage: (textBody: string) => void = undefined;\r\n\r\n    protected sendSpeechServiceConfig(connection: IConnection, requestSession: RequestSession, SpeechServiceConfigJson: string): Promise<void> {\r\n        requestSession.onSpeechContext();\r\n        // filter out anything that is not required for the service to work.\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true) {\r\n            const withTelemetry: { context: { system: string } } = JSON.parse(SpeechServiceConfigJson) as { context: { system: string } };\r\n\r\n            const replacement: any = {\r\n                context: {\r\n                    system: withTelemetry.context.system,\r\n                },\r\n            };\r\n\r\n            SpeechServiceConfigJson = JSON.stringify(replacement);\r\n        }\r\n\r\n        if (this.privRecognizerConfig.parameters.getProperty(\"f0f5debc-f8c9-4892-ac4b-90a7ab359fd2\", \"false\").toLowerCase() === \"true\") {\r\n            const json: { context: { DisableReferenceChannel: string; MicSpec: string } } = JSON.parse(SpeechServiceConfigJson) as { context: { DisableReferenceChannel: string; MicSpec: string } };\r\n            json.context.DisableReferenceChannel = \"True\";\r\n            json.context.MicSpec = \"1_0_0\";\r\n            SpeechServiceConfigJson = JSON.stringify(json);\r\n        }\r\n\r\n        if (SpeechServiceConfigJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.config\",\r\n                requestSession.requestId,\r\n                \"application/json\",\r\n                SpeechServiceConfigJson));\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    protected async fetchConnection(): Promise<IConnection> {\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            return this.privConnectionConfigurationPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigurationPromise = undefined;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.fetchConnection();\r\n                }\r\n                return this.privConnectionConfigurationPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigurationPromise = undefined;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.fetchConnection();\r\n            });\r\n        }\r\n\r\n        this.privConnectionConfigurationPromise = this.configureConnection();\r\n        return await this.privConnectionConfigurationPromise;\r\n    }\r\n\r\n    protected async sendAudio(audioStreamNode: IAudioStreamNode): Promise<void> {\r\n        const audioFormat: AudioStreamFormatImpl = await this.audioSource.format;\r\n        this.privAverageBytesPerMs = audioFormat.avgBytesPerSec / 1000;\r\n        // The time we last sent data to the service.\r\n        let nextSendTime: number = Date.now();\r\n\r\n        // Max amount to send before we start to throttle\r\n        const fastLaneSizeMs: string = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-TransmitLengthBeforThrottleMs\", \"5000\");\r\n        const maxSendUnthrottledBytes: number = audioFormat.avgBytesPerSec / 1000 * parseInt(fastLaneSizeMs, 10);\r\n        const startRecogNumber: number = this.privRequestSession.recogNumber;\r\n\r\n        const readAndUploadCycle = async (): Promise<void> => {\r\n            // If speech is done, stop sending audio.\r\n            if (!this.privIsDisposed &&\r\n                !this.privRequestSession.isSpeechEnded &&\r\n                this.privRequestSession.isRecognizing &&\r\n                this.privRequestSession.recogNumber === startRecogNumber) {\r\n\r\n                const connection: IConnection = await this.fetchConnection();\r\n                const audioStreamChunk: IStreamChunk<ArrayBuffer> = await audioStreamNode.read();\r\n                // we have a new audio chunk to upload.\r\n                if (this.privRequestSession.isSpeechEnded) {\r\n                    // If service already recognized audio end then don't send any more audio\r\n                    return;\r\n                }\r\n\r\n                let payload: ArrayBuffer;\r\n                let sendDelay: number;\r\n\r\n                if (!audioStreamChunk || audioStreamChunk.isEnd) {\r\n                    payload = null;\r\n                    sendDelay = 0;\r\n                } else {\r\n                    payload = audioStreamChunk.buffer;\r\n\r\n                    this.privRequestSession.onAudioSent(payload.byteLength);\r\n\r\n                    if (maxSendUnthrottledBytes >= this.privRequestSession.bytesSent) {\r\n                        sendDelay = 0;\r\n                    } else {\r\n                        sendDelay = Math.max(0, nextSendTime - Date.now());\r\n                    }\r\n                }\r\n\r\n                if (0 !== sendDelay) {\r\n                    await this.delay(sendDelay);\r\n                }\r\n\r\n                if (payload !== null) {\r\n                    nextSendTime = Date.now() + (payload.byteLength * 1000 / (audioFormat.avgBytesPerSec * 2));\r\n                }\r\n\r\n                // Are we still alive?\r\n                if (!this.privIsDisposed &&\r\n                    !this.privRequestSession.isSpeechEnded &&\r\n                    this.privRequestSession.isRecognizing &&\r\n                    this.privRequestSession.recogNumber === startRecogNumber) {\r\n                    connection.send(\r\n                        new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, payload)\r\n                    ).catch((): void => {\r\n                        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                        this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition).catch((): void => { });\r\n                    });\r\n\r\n                    if (!audioStreamChunk?.isEnd) {\r\n                        // this.writeBufferToConsole(payload);\r\n                        // Regardless of success or failure, schedule the next upload.\r\n                        // If the underlying connection was broken, the next cycle will\r\n                        // get a new connection and re-transmit missing audio automatically.\r\n                        return readAndUploadCycle();\r\n                    } else {\r\n                        // the audio stream has been closed, no need to schedule next\r\n                        // read-upload cycle.\r\n                        if (!this.privIsLiveAudio) {\r\n                            this.privRequestSession.onSpeechEnded();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        return readAndUploadCycle();\r\n    }\r\n\r\n    private async retryableConnect(): Promise<IConnection> {\r\n        let isUnAuthorized: boolean = false;\r\n\r\n        this.privAuthFetchEventId = createNoDashGuid();\r\n        const sessionId: string = this.privRequestSession.sessionId;\r\n        this.privConnectionId = (sessionId !== undefined) ? sessionId : createNoDashGuid();\r\n\r\n        this.privRequestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\r\n        let lastStatusCode: number = 0;\r\n        let lastReason: string = \"\";\r\n\r\n        while (this.privRequestSession.numConnectionAttempts <= this.privRecognizerConfig.maxRetryCount) {\r\n\r\n            // Get the auth information for the connection. This is a bit of overkill for the current API surface, but leaving the plumbing in place to be able to raise a developer-customer\r\n            // facing event when a connection fails to let them try and provide new auth information.\r\n            const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n            const auth: AuthInfo = await authPromise;\r\n\r\n            await this.privRequestSession.onAuthCompleted(false);\r\n\r\n            // Create the connection\r\n            const connection: IConnection = this.privConnectionFactory.create(this.privRecognizerConfig, auth, this.privConnectionId);\r\n            // Attach the telemetry handlers.\r\n            this.privRequestSession.listenForServiceTelemetry(connection.events);\r\n\r\n            // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n            // it'll stop sending events.\r\n            connection.events.attach((event: ConnectionEvent): void => {\r\n                this.connectionEvents.onEvent(event);\r\n            });\r\n\r\n            const response: ConnectionOpenResponse = await connection.open();\r\n            // 200 == everything is fine.\r\n            if (response.statusCode === 200) {\r\n                await this.privRequestSession.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.resolve(connection);\r\n            } else if (response.statusCode === 1006) {\r\n                isUnAuthorized = true;\r\n            }\r\n\r\n            lastStatusCode = response.statusCode;\r\n            lastReason = response.reason;\r\n\r\n            this.privRequestSession.onRetryConnection();\r\n        }\r\n\r\n        await this.privRequestSession.onConnectionEstablishCompleted(lastStatusCode, lastReason);\r\n        return Promise.reject(`Unable to contact server. StatusCode: ${lastStatusCode}, ${this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${lastReason}`);\r\n    }\r\n\r\n    private delay(delayMs: number): Promise<void> {\r\n        return new Promise((resolve: () => void): number => this.privSetTimeout(resolve, delayMs));\r\n    }\r\n\r\n    private writeBufferToConsole(buffer: ArrayBuffer): void {\r\n        let out: string = \"Buffer Size: \";\r\n        if (null === buffer) {\r\n            out += \"null\";\r\n        } else {\r\n            const readView: Uint8Array = new Uint8Array(buffer);\r\n            out += `${buffer.byteLength}\\r\\n`;\r\n            for (let i: number = 0; i < buffer.byteLength; i++) {\r\n                out += readView[i].toString(16).padStart(2, \"0\") + \" \";\r\n                if (((i + 1) % 16) === 0) {\r\n                    // eslint-disable-next-line no-console\r\n                    console.info(out);\r\n                    out = \"\";\r\n                }\r\n            }\r\n        }\r\n        // eslint-disable-next-line no-console\r\n        console.info(out);\r\n    }\r\n\r\n    private async sendFinalAudio(): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, null));\r\n        return;\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configureConnection(): Promise<IConnection> {\r\n        const connection: IConnection = await this.connectImpl();\r\n        if (this.configConnectionOverride !== undefined) {\r\n            return this.configConnectionOverride(connection);\r\n        }\r\n        await this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize());\r\n        await this.sendPrePayloadJSON(connection, false);\r\n        return connection;\r\n    }\r\n}\r\n", "import { IAudioSource } from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    ResultReason,\r\n    SpeechRecognitionResult\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis\r\n} from \"./Exports.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\nexport class ConversationServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: Recognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.handleSpeechPhraseMessage = async (textBody: string): Promise<void> => this.handleSpeechPhrase(textBody);\r\n        this.handleSpeechHypothesisMessage = (textBody: string): void => this.handleSpeechHypothesis(textBody);\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n        void connectionMessage;\r\n        return;\r\n    }\r\n\r\n    protected handleRecognizedCallback(result: SpeechRecognitionResult, offset: number, sessionId: string): void {\r\n        void result;\r\n        void offset;\r\n        void sessionId;\r\n        return;\r\n    }\r\n\r\n    protected handleRecognizingCallback(result: SpeechRecognitionResult, duration: number, sessionId: string): void {\r\n        void result;\r\n        void duration;\r\n        void sessionId;\r\n        return;\r\n    }\r\n\r\n    protected async processSpeechMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n        let processed: boolean = false;\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                if (!!this.handleSpeechHypothesisMessage) {\r\n                    this.handleSpeechHypothesisMessage(connectionMessage.textBody);\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                if (!!this.handleSpeechPhraseMessage) {\r\n                    await this.handleSpeechPhraseMessage(connectionMessage.textBody);\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n            // Implementing to allow inheritance\r\n            void sessionId;\r\n            void requestId;\r\n            void cancellationReason;\r\n            void errorCode;\r\n            void error;\r\n        }\r\n\r\n    protected async handleSpeechPhrase(textBody: string): Promise<void> {\r\n\r\n        const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(textBody);\r\n        const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\r\n        let result: SpeechRecognitionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, textBody);\r\n        const simpleOffset = simple.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n        let offset = simpleOffset;\r\n\r\n        this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\r\n\r\n        if (ResultReason.Canceled === resultReason) {\r\n            const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n            const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);\r\n\r\n            await this.cancelRecognitionLocal(\r\n                cancelReason,\r\n                cancellationErrorCode,\r\n                EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n        } else {\r\n            if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                    result = new SpeechRecognitionResult(\r\n                        this.privRequestSession.requestId,\r\n                        resultReason,\r\n                        simple.DisplayText,\r\n                        simple.Duration,\r\n                        simpleOffset,\r\n                        simple.Language,\r\n                        simple.LanguageDetectionConfidence,\r\n                        simple.SpeakerId,\r\n                        undefined,\r\n                        textBody,\r\n                        resultProps);\r\n                } else {\r\n                    const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(textBody);\r\n                    const totalOffset: number = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n                    const offsetCorrectedJson: string = detailed.getJsonWithCorrectedOffsets(totalOffset);\r\n\r\n                    result = new SpeechRecognitionResult(\r\n                        this.privRequestSession.requestId,\r\n                        resultReason,\r\n                        detailed.Text,\r\n                        detailed.Duration,\r\n                        totalOffset,\r\n                        detailed.Language,\r\n                        detailed.LanguageDetectionConfidence,\r\n                        detailed.SpeakerId,\r\n                        undefined,\r\n                        offsetCorrectedJson,\r\n                        resultProps);\r\n\r\n                        offset = result.offset;\r\n                }\r\n\r\n                this.handleRecognizedCallback(result, offset, this.privRequestSession.sessionId);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected handleSpeechHypothesis(textBody: string): void {\r\n        const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(textBody);\r\n        const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, textBody);\r\n\r\n        const result = new SpeechRecognitionResult(\r\n            this.privRequestSession.requestId,\r\n            ResultReason.RecognizingSpeech,\r\n            hypothesis.Text,\r\n            hypothesis.Duration,\r\n            offset,\r\n            hypothesis.Language,\r\n            hypothesis.LanguageDetectionConfidence,\r\n            hypothesis.SpeakerId,\r\n            undefined,\r\n            textBody,\r\n            resultProps);\r\n\r\n        this.privRequestSession.onHypothesis(offset);\r\n\r\n        this.handleRecognizingCallback(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { PropertyCollection, PropertyId } from \"../sdk/Exports.js\";\r\nimport { Context, SpeechServiceConfig } from \"./Exports.js\";\r\n\r\nexport enum RecognitionMode {\r\n    Interactive,\r\n    Conversation,\r\n    Dictation,\r\n}\r\n\r\nexport enum SpeechResultFormat {\r\n    Simple,\r\n    Detailed,\r\n}\r\n\r\nexport class RecognizerConfig {\r\n    private privRecognitionMode: RecognitionMode;\r\n    private privLanguageIdMode: string;\r\n    private privSpeechServiceConfig: SpeechServiceConfig;\r\n    private privRecognitionActivityTimeout: number;\r\n    private privParameters: PropertyCollection;\r\n    private privMaxRetryCount: number;\r\n    private privEnableSpeakerId: boolean;\r\n\r\n    public constructor(\r\n        speechServiceConfig: SpeechServiceConfig,\r\n        parameters: PropertyCollection) {\r\n        this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));\r\n        this.privParameters = parameters;\r\n        this.privMaxRetryCount = parseInt(parameters.getProperty(\"SPEECH-Error-MaxRetryCount\", \"4\"), 10);\r\n        this.privLanguageIdMode = parameters.getProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, undefined);\r\n        this.privEnableSpeakerId = false;\r\n    }\r\n\r\n    public get parameters(): PropertyCollection {\r\n        return this.privParameters;\r\n    }\r\n\r\n    public get recognitionMode(): RecognitionMode {\r\n        return this.privRecognitionMode;\r\n    }\r\n\r\n    public set recognitionMode(value: RecognitionMode) {\r\n        this.privRecognitionMode = value;\r\n        this.privRecognitionActivityTimeout = value === RecognitionMode.Interactive ? 8000 : 25000;\r\n        this.privSpeechServiceConfig.Recognition = RecognitionMode[value];\r\n    }\r\n\r\n    public get SpeechServiceConfig(): SpeechServiceConfig {\r\n        return this.privSpeechServiceConfig;\r\n    }\r\n\r\n    public get recognitionActivityTimeout(): number {\r\n        return this.privRecognitionActivityTimeout;\r\n    }\r\n\r\n    public get isContinuousRecognition(): boolean {\r\n        return this.privRecognitionMode !== RecognitionMode.Interactive;\r\n    }\r\n\r\n    public get languageIdMode(): string {\r\n        return this.privLanguageIdMode;\r\n    }\r\n\r\n    public get autoDetectSourceLanguages(): string {\r\n        return this.parameters.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, undefined);\r\n    }\r\n\r\n    public get recognitionEndpointVersion(): string {\r\n        return this.parameters.getProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, undefined);\r\n    }\r\n\r\n    public get sourceLanguageModels(): { language: string; endpoint: string }[] {\r\n        const models: { language: string; endpoint: string }[] = [];\r\n        let modelsExist: boolean = false;\r\n        if (this.autoDetectSourceLanguages !== undefined) {\r\n            for (const language of this.autoDetectSourceLanguages.split(\",\")) {\r\n                const customProperty = language + PropertyId.SpeechServiceConnection_EndpointId.toString();\r\n                const modelId: string = this.parameters.getProperty(customProperty, undefined);\r\n                if (modelId !== undefined) {\r\n                    models.push( { language, endpoint: modelId });\r\n                    modelsExist = true;\r\n                } else {\r\n                    models.push( { language, endpoint: \"\" } );\r\n                }\r\n            }\r\n        }\r\n        return modelsExist ? models : undefined;\r\n    }\r\n\r\n    public get maxRetryCount(): number {\r\n        return this.privMaxRetryCount;\r\n    }\r\n\r\n    public get isSpeakerDiarizationEnabled(): boolean {\r\n        return this.privEnableSpeakerId;\r\n    }\r\n\r\n    public set isSpeakerDiarizationEnabled(value: boolean) {\r\n        this.privEnableSpeakerId = value;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionMessage,\r\n    Deferred,\r\n    IStringDictionary,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    RawWebsocketMessage,\r\n} from \"../common/Exports.js\";\r\n\r\nconst CRLF: string = \"\\r\\n\";\r\n\r\nexport class WebsocketMessageFormatter implements IWebsocketMessageFormatter {\r\n\r\n    public toConnectionMessage(message: RawWebsocketMessage): Promise<ConnectionMessage> {\r\n        const deferral = new Deferred<ConnectionMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const textMessage: string = message.textContent;\r\n                let headers: IStringDictionary<string> = {};\r\n                let body: string = null;\r\n\r\n                if (textMessage) {\r\n                    const headerBodySplit = textMessage.split(\"\\r\\n\\r\\n\");\r\n                    if (headerBodySplit && headerBodySplit.length > 0) {\r\n                        headers = this.parseHeaders(headerBodySplit[0]);\r\n                        if (headerBodySplit.length > 1) {\r\n                            body = headerBodySplit[1];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                deferral.resolve(new ConnectionMessage(message.messageType, body, headers, message.id));\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                const binaryMessage: ArrayBuffer = message.binaryContent;\r\n                let headers: IStringDictionary<string> = {};\r\n                let body: ArrayBuffer = null;\r\n\r\n                if (!binaryMessage || binaryMessage.byteLength < 2) {\r\n                    throw new Error(\"Invalid binary message format. Header length missing.\");\r\n                }\r\n\r\n                const dataView = new DataView(binaryMessage);\r\n                const headerLength = dataView.getInt16(0);\r\n\r\n                if (binaryMessage.byteLength < headerLength + 2) {\r\n                    throw new Error(\"Invalid binary message format. Header content missing.\");\r\n                }\r\n\r\n                let headersString = \"\";\r\n                for (let i = 0; i < headerLength; i++) {\r\n                    headersString += String.fromCharCode((dataView).getInt8(i + 2));\r\n                }\r\n\r\n                headers = this.parseHeaders(headersString);\r\n\r\n                if (binaryMessage.byteLength > headerLength + 2) {\r\n                    body = binaryMessage.slice(2 + headerLength);\r\n                }\r\n\r\n                deferral.resolve(new ConnectionMessage(message.messageType, body, headers, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. Error: ${e as string}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n\r\n    public fromConnectionMessage(message: ConnectionMessage): Promise<RawWebsocketMessage> {\r\n        const deferral = new Deferred<RawWebsocketMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const payload = `${this.makeHeaders(message)}${CRLF}${message.textBody ? message.textBody : \"\"}`;\r\n\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Text, payload, message.id));\r\n\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                const headersString = this.makeHeaders(message);\r\n                const content = message.binaryBody;\r\n\r\n                const headerBuffer = this.stringToArrayBuffer(headersString);\r\n                const headerInt8Array = new Int8Array(headerBuffer);\r\n                const headerLength = headerInt8Array.byteLength;\r\n\r\n                const payloadInt8Array = new Int8Array(2 + headerLength + (content ? content.byteLength : 0));\r\n                payloadInt8Array[0] = ((headerLength >> 8) & 0xff);\r\n                payloadInt8Array[1] = headerLength & 0xff;\r\n                payloadInt8Array.set(headerInt8Array, 2);\r\n\r\n                if (content) {\r\n                    const bodyInt8Array = new Int8Array(content);\r\n                    payloadInt8Array.set(bodyInt8Array, 2 + headerLength);\r\n                }\r\n\r\n                const payload: ArrayBuffer = payloadInt8Array.buffer;\r\n\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Binary, payload, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. ${e as string}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n\r\n    private makeHeaders(message: ConnectionMessage): string {\r\n        let headersString: string = \"\";\r\n\r\n        if (message.headers) {\r\n            for (const header in message.headers) {\r\n                if (header) {\r\n                    headersString += `${header}: ${message.headers[header]}${CRLF}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        return headersString;\r\n    }\r\n\r\n    private parseHeaders(headersString: string): IStringDictionary<string> {\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (headersString) {\r\n            const headerMatches = headersString.match(/[^\\r\\n]+/g);\r\n            if (headers) {\r\n                for (const header of headerMatches) {\r\n                    if (header) {\r\n                        const separatorIndex = header.indexOf(\":\");\r\n                        const headerName = separatorIndex > 0 ? header.substr(0, separatorIndex).trim().toLowerCase() : header;\r\n                        const headerValue =\r\n                            separatorIndex > 0 && header.length > (separatorIndex + 1) ?\r\n                                header.substr(separatorIndex + 1).trim() :\r\n                                \"\";\r\n\r\n                        headers[headerName] = headerValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return headers;\r\n    }\r\n\r\n    private stringToArrayBuffer(str: string): ArrayBuffer {\r\n        const buffer = new ArrayBuffer(str.length);\r\n        const view = new DataView(buffer);\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(i, str.charCodeAt(i));\r\n        }\r\n        return buffer;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    OutputFormat,\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames.js\";\r\n\r\nexport class SpeechConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private readonly interactiveRelativeUri: string = \"/speech/recognition/interactive/cognitiveservices/v1\";\r\n    private readonly conversationRelativeUri: string = \"/speech/recognition/conversation/cognitiveservices/v1\";\r\n    private readonly dictationRelativeUri: string = \"/speech/recognition/dictation/cognitiveservices/v1\";\r\n    private readonly universalUri: string = \"/speech/universal/v\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".stt.speech\" + hostSuffix);\r\n        const queryParams: IStringDictionary<string> = {};\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\r\n                queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n            }\r\n        } else if (language) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\r\n                queryParams[QueryParameterNames.Language] = language;\r\n            }\r\n        }\r\n\r\n        if (!endpoint || endpoint.search(QueryParameterNames.Format) === -1) {\r\n            queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n        }\r\n\r\n        if (config.autoDetectSourceLanguages !== undefined) {\r\n            queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        if (!endpoint) {\r\n            switch (config.recognitionMode) {\r\n                case RecognitionMode.Conversation:\r\n                    if (config.parameters.getProperty(ForceDictationPropertyName, \"false\") === \"true\") {\r\n                        endpoint = host + this.dictationRelativeUri;\r\n                    } else {\r\n                        if (config.recognitionEndpointVersion !== undefined && parseInt(config.recognitionEndpointVersion, 10) > 1) {\r\n                            endpoint = `${host}${this.universalUri}${config.recognitionEndpointVersion}`;\r\n                        } else {\r\n                            endpoint = host + this.conversationRelativeUri;\r\n                        }\r\n                    }\r\n                    break;\r\n                case RecognitionMode.Dictation:\r\n                    endpoint = host + this.dictationRelativeUri;\r\n                    break;\r\n                default:\r\n                    if (config.recognitionEndpointVersion !== undefined && parseInt(config.recognitionEndpointVersion, 10) > 1) {\r\n                        endpoint = `${host}${this.universalUri}${config.recognitionEndpointVersion}`;\r\n                    } else {\r\n                        endpoint = host + this.interactiveRelativeUri; // default is interactive\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n\r\n        const webSocketConnection = new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n\r\n        // Set the value of SpeechServiceConnection_Url to webSocketConnection.uri (and not to `endpoint`), since this value is the final\r\n        // URI that was used to make the connection (including query parameters).\r\n        const uri: string = webSocketConnection.uri;\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, uri);\r\n\r\n        return webSocketConnection;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ServicePropertiesPropertyName\r\n} from \"../common.speech/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames.js\";\r\n\r\nexport class ConversationTranscriberConnectionFactory extends ConnectionFactoryBase {\r\n    private readonly universalUri: string = \"/speech/universal/v2\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".stt.speech\" + hostSuffix);\r\n        const queryParams: IStringDictionary<string> = {};\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\r\n                queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n            }\r\n        } else if (language) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\r\n                queryParams[QueryParameterNames.Language] = language;\r\n            }\r\n        }\r\n\r\n        if (config.autoDetectSourceLanguages !== undefined) {\r\n            queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\r\n        }\r\n\r\n        this.setV2UrlParams(config, queryParams, endpoint);\r\n\r\n        if (!endpoint) {\r\n            endpoint = `${host}${this.universalUri}`;\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n\r\n        const webSocketConnection = new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n\r\n        // Set the value of SpeechServiceConnection_Url to webSocketConnection.uri (and not to `endpoint`), since this value is the final\r\n        // URI that was used to make the connection (including query parameters).\r\n        const uri: string = webSocketConnection.uri;\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, uri);\r\n\r\n        return webSocketConnection;\r\n    }\r\n\r\n    protected setV2UrlParams(\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        const propertyIdToParameterMap: Map<number, string> = new Map([\r\n            [PropertyId.Speech_SegmentationSilenceTimeoutMs, QueryParameterNames.SegmentationSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_EnableAudioLogging, QueryParameterNames.EnableAudioLogging],\r\n            [PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs, QueryParameterNames.EndSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs, QueryParameterNames.InitialSilenceTimeoutMs],\r\n            [PropertyId.SpeechServiceResponse_PostProcessingOption, QueryParameterNames.Postprocessing],\r\n            [PropertyId.SpeechServiceResponse_ProfanityOption, QueryParameterNames.Profanity],\r\n            [PropertyId.SpeechServiceResponse_StablePartialResultThreshold, QueryParameterNames.StableIntermediateThreshold],\r\n        ]);\r\n\r\n        propertyIdToParameterMap.forEach((parameterName: string, propertyId: PropertyId): void => {\r\n            this.setUrlParameter(propertyId, parameterName, config, queryParams, endpoint);\r\n        });\r\n\r\n\r\n        const serviceProperties: IStringDictionary<string> = JSON.parse(config.parameters.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\r\n\r\n        Object.keys(serviceProperties).forEach((value: string): void => {\r\n            queryParams[value] = serviceProperties[value];\r\n        });\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    OutputFormat,\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    OutputFormatPropertyName,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames.js\";\r\n\r\nexport class TranscriberConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private readonly multiaudioRelativeUri: string = \"/speech/recognition/multiaudio\";\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"centralus\");\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const hostDefault: string = \"wss://transcribe.\" + region + \".cts.speech\" + hostSuffix + this.multiaudioRelativeUri;\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, hostDefault);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        this.setQueryParams(queryParams, config, endpoint);\r\n\r\n        if (!endpoint) {\r\n            endpoint = host;\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n    public setQueryParams(queryParams: IStringDictionary<string>, config: RecognizerConfig, endpointUrl: string): void {\r\n\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId && !(QueryParameterNames.CustomSpeechDeploymentId in queryParams)) {\r\n            queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n        }\r\n\r\n        if (language && !(QueryParameterNames.Language in queryParams)) {\r\n            queryParams[QueryParameterNames.Language] = language;\r\n        }\r\n\r\n        const wordLevelTimings: boolean = config.parameters.getProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"false\").toLowerCase() === \"true\";\r\n        const detailed: boolean = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) !== OutputFormat[OutputFormat.Simple];\r\n        if (wordLevelTimings || detailed) {\r\n            queryParams[QueryParameterNames.Format] = OutputFormat[OutputFormat.Detailed].toLowerCase();\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpointUrl);\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary,\r\n} from \"../common/Exports.js\";\r\nimport { StringUtils } from \"../common/StringUtils.js\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase.js\";\r\nimport {\r\n    AuthInfo,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames.js\";\r\n\r\nexport class TranslationConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    public create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection {\r\n\r\n        const endpoint: string = this.getEndpointUrl(config);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n\r\n        if (config.autoDetectSourceLanguages !== undefined) {\r\n            queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\r\n        }\r\n        this.setQueryParams(queryParams, config, endpoint);\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n    public getEndpointUrl(config: RecognizerConfig, returnRegionPlaceholder?: boolean): string {\r\n\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n\r\n        let endpointUrl: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpointUrl) {\r\n            if (config.autoDetectSourceLanguages !== undefined) {\r\n                const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://{region}.stt.speech\" + hostSuffix);\r\n                endpointUrl = host + \"/speech/universal/v2\";\r\n            } else {\r\n                const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://{region}.s2s.speech\" + hostSuffix);\r\n                endpointUrl = host + \"/speech/translation/cognitiveservices/v1\";\r\n            }\r\n        }\r\n\r\n        if (returnRegionPlaceholder === true) {\r\n            return endpointUrl;\r\n        }\r\n\r\n        return StringUtils.formatString(endpointUrl, { region });\r\n    }\r\n\r\n    public setQueryParams(queryParams: IStringDictionary<string>, config: RecognizerConfig, endpointUrl: string): void {\r\n\r\n        queryParams.from = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n        queryParams.to = config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages);\r\n        queryParams.scenario = config.recognitionMode === RecognitionMode.Interactive ? \"interactive\" :\r\n            config.recognitionMode === RecognitionMode.Conversation ? \"conversation\" : \"\";\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpointUrl);\r\n        this.setUrlParameter(\r\n            PropertyId.SpeechServiceResponse_TranslationRequestStablePartialResult,\r\n            QueryParameterNames.StableTranslation,\r\n            config,\r\n            queryParams,\r\n            endpointUrl\r\n        );\r\n\r\n        const translationVoice: string =  config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n        if (translationVoice !== undefined) {\r\n            queryParams.voice = translationVoice;\r\n            queryParams.features = \"texttospeech\";\r\n        }\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ResultReason\r\n} from \"../sdk/Exports.js\";\r\nimport { RecognitionStatus } from \"./Exports.js\";\r\n\r\nexport class EnumTranslation {\r\n    public static implTranslateRecognitionResult(recognitionStatus: RecognitionStatus, expectEndOfDictation: boolean = false): ResultReason {\r\n        let reason = ResultReason.Canceled;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Success:\r\n                reason = ResultReason.RecognizedSpeech;\r\n                break;\r\n            case RecognitionStatus.EndOfDictation:\r\n                // If we need the result in EndOfDictation (typically some session level result),\r\n                // translate into RecognizedSpeech, otherwise NoMatch\r\n                reason = expectEndOfDictation ? ResultReason.RecognizedSpeech : ResultReason.NoMatch;\r\n                break;\r\n            case RecognitionStatus.NoMatch:\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n            case RecognitionStatus.BabbleTimeout:\r\n                reason = ResultReason.NoMatch;\r\n                break;\r\n            case RecognitionStatus.Error:\r\n            case RecognitionStatus.BadRequest:\r\n            case RecognitionStatus.Forbidden:\r\n            default:\r\n                reason = ResultReason.Canceled;\r\n                break;\r\n        }\r\n        return reason;\r\n    }\r\n\r\n    public static implTranslateCancelResult(recognitionStatus: RecognitionStatus): CancellationReason {\r\n        let reason = CancellationReason.EndOfStream;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Success:\r\n            case RecognitionStatus.EndOfDictation:\r\n            case RecognitionStatus.NoMatch:\r\n                reason = CancellationReason.EndOfStream;\r\n                break;\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n            case RecognitionStatus.BabbleTimeout:\r\n            case RecognitionStatus.Error:\r\n            case RecognitionStatus.BadRequest:\r\n            case RecognitionStatus.Forbidden:\r\n            default:\r\n                reason = CancellationReason.Error;\r\n                break;\r\n        }\r\n        return reason;\r\n    }\r\n\r\n    public static implTranslateCancelErrorCode(recognitionStatus: RecognitionStatus): CancellationErrorCode {\r\n        let reason: CancellationErrorCode = CancellationErrorCode.NoError;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Error:\r\n                reason = CancellationErrorCode.ServiceError;\r\n                break;\r\n            case RecognitionStatus.TooManyRequests:\r\n                reason = CancellationErrorCode.TooManyRequests;\r\n                break;\r\n            case RecognitionStatus.BadRequest:\r\n                reason = CancellationErrorCode.BadRequestParameters;\r\n                break;\r\n            case RecognitionStatus.Forbidden:\r\n                reason = CancellationErrorCode.Forbidden;\r\n                break;\r\n            default:\r\n                reason = CancellationErrorCode.NoError;\r\n                break;\r\n        }\r\n\r\n        return reason;\r\n\r\n    }\r\n\r\n    public static implTranslateErrorDetails(cancellationErrorCode: CancellationErrorCode): string {\r\n        let errorDetails: string = \"The speech service encountered an internal error and could not continue.\";\r\n        switch (cancellationErrorCode) {\r\n            case CancellationErrorCode.Forbidden:\r\n                errorDetails = \"The recognizer is using a free subscription that ran out of quota.\";\r\n                break;\r\n            case CancellationErrorCode.BadRequestParameters:\r\n                errorDetails = \"Invalid parameter or unsupported audio format in the request.\";\r\n                break;\r\n            case CancellationErrorCode.TooManyRequests:\r\n                errorDetails = \"The number of parallel requests exceeded the number of allowed concurrent transcriptions.\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return errorDetails;\r\n    }\r\n\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * @class SynthesisStatus\r\n * @private\r\n */\r\nexport enum SynthesisStatus {\r\n    /**\r\n     * The response contains valid audio data.\r\n     * @member SynthesisStatus.Success\r\n     */\r\n    Success,\r\n\r\n    /**\r\n     * Indicates the end of audio data. No valid audio data is included in the message.\r\n     * @member SynthesisStatus.SynthesisEnd\r\n     */\r\n    SynthesisEnd,\r\n\r\n    /**\r\n     * Indicates an error occurred during synthesis data processing.\r\n     * @member SynthesisStatus.Error\r\n     */\r\n    Error,\r\n}\r\n\r\nexport enum RecognitionStatus {\r\n    Success,\r\n    NoMatch,\r\n    InitialSilenceTimeout,\r\n    BabbleTimeout,\r\n    Error,\r\n    EndOfDictation,\r\n    TooManyRequests,\r\n    BadRequest,\r\n    Forbidden,\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SynthesisStatus } from \"../Exports.js\";\r\n\r\n// translation.synthesis.end\r\nexport interface ITranslationSynthesisEnd {\r\n    SynthesisStatus?: SynthesisStatus;\r\n    FailureReason?: string;\r\n    Status?: SynthesisStatus;\r\n}\r\n\r\nexport class TranslationSynthesisEnd implements ITranslationSynthesisEnd {\r\n    private privSynthesisEnd: ITranslationSynthesisEnd;\r\n\r\n    private constructor(json: string) {\r\n        this.privSynthesisEnd = JSON.parse(json) as ITranslationSynthesisEnd;\r\n        if (!!this.privSynthesisEnd.SynthesisStatus) {\r\n            this.privSynthesisEnd.SynthesisStatus = SynthesisStatus[this.privSynthesisEnd.SynthesisStatus as unknown as keyof typeof SynthesisStatus];\r\n        }\r\n        if (!!this.privSynthesisEnd.Status) {\r\n            this.privSynthesisEnd.SynthesisStatus = SynthesisStatus[this.privSynthesisEnd.Status as unknown as keyof typeof SynthesisStatus];\r\n        }\r\n    }\r\n\r\n    public static fromJSON(json: string): TranslationSynthesisEnd {\r\n        return new TranslationSynthesisEnd(json);\r\n    }\r\n\r\n    public get SynthesisStatus(): SynthesisStatus {\r\n        return this.privSynthesisEnd.SynthesisStatus;\r\n    }\r\n\r\n    public get FailureReason(): string {\r\n        return this.privSynthesisEnd.FailureReason;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport { IPrimaryLanguage, ITranslations } from \"../Exports.js\";\r\nimport { TranslationStatus } from \"../TranslationStatus.js\";\r\n\r\n// translation.hypothesis\r\nexport interface ITranslationHypothesis {\r\n    Duration: number;\r\n    Offset: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    Text: string;\r\n    Translation: ITranslations;\r\n}\r\n\r\nexport class TranslationHypothesis implements ITranslationHypothesis {\r\n    private privTranslationHypothesis: ITranslationHypothesis;\r\n\r\n    private constructor(hypothesis: ITranslationHypothesis) {\r\n        this.privTranslationHypothesis = hypothesis;\r\n        this.privTranslationHypothesis.Translation.TranslationStatus = TranslationStatus[this.privTranslationHypothesis.Translation.TranslationStatus as unknown as keyof typeof TranslationStatus];\r\n    }\r\n\r\n    public static fromJSON(json: string): TranslationHypothesis {\r\n        return new TranslationHypothesis(JSON.parse(json) as ITranslationHypothesis);\r\n    }\r\n\r\n    public static fromTranslationResponse(translationHypothesis: { SpeechHypothesis: ITranslationHypothesis }): TranslationHypothesis {\r\n        Contracts.throwIfNullOrUndefined(translationHypothesis, \"translationHypothesis\");\r\n        const hypothesis: ITranslationHypothesis = translationHypothesis.SpeechHypothesis;\r\n        translationHypothesis.SpeechHypothesis = undefined;\r\n        hypothesis.Translation = (translationHypothesis as unknown as ITranslations);\r\n        return new TranslationHypothesis(hypothesis);\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privTranslationHypothesis.Duration;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privTranslationHypothesis.Offset;\r\n    }\r\n\r\n    public get Text(): string {\r\n        return this.privTranslationHypothesis.Text;\r\n    }\r\n\r\n    public get Translation(): ITranslations {\r\n        return this.privTranslationHypothesis.Translation;\r\n    }\r\n\r\n    public get Language(): string {\r\n        return this.privTranslationHypothesis.PrimaryLanguage?.Language;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport { IPrimaryLanguage, ITranslations, RecognitionStatus } from \"../Exports.js\";\r\nimport { TranslationStatus } from \"../TranslationStatus.js\";\r\n\r\n// translation.phrase\r\nexport interface ITranslationPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    Offset: number;\r\n    Duration: number;\r\n    Translation?: ITranslations;\r\n    Text?: string;\r\n    DisplayText?: string;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n}\r\n\r\nexport class TranslationPhrase implements ITranslationPhrase {\r\n    private privTranslationPhrase: ITranslationPhrase;\r\n\r\n    private constructor(phrase: ITranslationPhrase) {\r\n        this.privTranslationPhrase = phrase;\r\n        this.privTranslationPhrase.RecognitionStatus = RecognitionStatus[this.privTranslationPhrase.RecognitionStatus as unknown as keyof typeof RecognitionStatus];\r\n        if (this.privTranslationPhrase.Translation !== undefined) {\r\n            this.privTranslationPhrase.Translation.TranslationStatus = TranslationStatus[this.privTranslationPhrase.Translation.TranslationStatus as unknown as keyof typeof TranslationStatus];\r\n        }\r\n    }\r\n\r\n    public static fromJSON(json: string): TranslationPhrase {\r\n        return new TranslationPhrase(JSON.parse(json) as ITranslationPhrase);\r\n    }\r\n\r\n    public static fromTranslationResponse(translationResponse: { SpeechPhrase: ITranslationPhrase }): TranslationPhrase {\r\n        Contracts.throwIfNullOrUndefined(translationResponse, \"translationResponse\");\r\n        const phrase: ITranslationPhrase = translationResponse.SpeechPhrase;\r\n        translationResponse.SpeechPhrase = undefined;\r\n        phrase.Translation = (translationResponse as unknown as ITranslations);\r\n        phrase.Text = phrase.DisplayText;\r\n        return new TranslationPhrase(phrase);\r\n    }\r\n\r\n    public get RecognitionStatus(): RecognitionStatus {\r\n        return this.privTranslationPhrase.RecognitionStatus;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privTranslationPhrase.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privTranslationPhrase.Duration;\r\n    }\r\n\r\n    public get Text(): string | undefined {\r\n        return this.privTranslationPhrase.Text;\r\n    }\r\n\r\n    public get Language(): string | undefined {\r\n        return this.privTranslationPhrase.PrimaryLanguage?.Language;\r\n    }\r\n\r\n    public get Confidence(): string | undefined {\r\n        return this.privTranslationPhrase.PrimaryLanguage?.Confidence;\r\n    }\r\n\r\n    public get Translation(): ITranslations | undefined {\r\n        return this.privTranslationPhrase.Translation;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionEvent,\r\n    IAudioSource,\r\n    MessageType,\r\n    TranslationStatus,\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionResult,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognitionResult,\r\n    TranslationRecognizer,\r\n    Translations,\r\n    TranslationSynthesisEventArgs,\r\n    TranslationSynthesisResult,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    ConversationServiceRecognizer,\r\n    EnumTranslation,\r\n    ITranslationHypothesis,\r\n    RecognitionStatus,\r\n    SynthesisStatus,\r\n    TranslationHypothesis,\r\n    TranslationPhrase,\r\n    TranslationSynthesisEnd,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { ITranslationPhrase } from \"./ServiceMessages/TranslationPhrase.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class TranslationServiceRecognizer extends ConversationServiceRecognizer {\r\n    private privTranslationRecognizer: TranslationRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        translationRecognizer: TranslationRecognizer) {\r\n\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, translationRecognizer);\r\n        this.privTranslationRecognizer = translationRecognizer;\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionEstablishedEvent\") {\r\n                this.privTranslationRecognizer.onConnection();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        let processed: boolean = await this.processSpeechMessages(connectionMessage);\r\n        if (processed) {\r\n            return true;\r\n        }\r\n\r\n        const handleTranslationPhrase = async (translatedPhrase: TranslationPhrase): Promise<void> => {\r\n            this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset + translatedPhrase.Duration);\r\n\r\n            if (translatedPhrase.RecognitionStatus === RecognitionStatus.Success) {\r\n\r\n                // OK, the recognition was successful. How'd the translation do?\r\n                const result: TranslationRecognitionEventArgs = this.fireEventForResult(translatedPhrase, resultProps);\r\n                if (!!this.privTranslationRecognizer.recognized) {\r\n                    try {\r\n                        this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, result);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n\r\n                // report result to promise.\r\n                if (!!this.privSuccessCallback) {\r\n                    try {\r\n                        this.privSuccessCallback(result.result);\r\n                    } catch (e) {\r\n                        if (!!this.privErrorCallback) {\r\n                            this.privErrorCallback(e as string);\r\n                        }\r\n                    }\r\n                    // Only invoke the call back once.\r\n                    // and if it's successful don't invoke the\r\n                    // error after that.\r\n                    this.privSuccessCallback = undefined;\r\n                    this.privErrorCallback = undefined;\r\n                }\r\n            } else {\r\n                const reason: ResultReason = EnumTranslation.implTranslateRecognitionResult(translatedPhrase.RecognitionStatus);\r\n\r\n                const result = new TranslationRecognitionResult(\r\n                    undefined,\r\n                    this.privRequestSession.requestId,\r\n                    reason,\r\n                    translatedPhrase.Text,\r\n                    translatedPhrase.Duration,\r\n                    this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset,\r\n                    translatedPhrase.Language,\r\n                    translatedPhrase.Confidence,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                if (reason === ResultReason.Canceled) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(translatedPhrase.RecognitionStatus);\r\n                    const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(translatedPhrase.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        cancellationErrorCode,\r\n                        EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && reason === ResultReason.NoMatch && translatedPhrase.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        const ev = new TranslationRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privTranslationRecognizer.recognized) {\r\n                            try {\r\n                                this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, ev);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // report result to promise.\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e as string);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                }\r\n                processed = true;\r\n            }\r\n\r\n        };\r\n\r\n        const handleTranslationHypothesis = (hypothesis: TranslationHypothesis, resultProperties: PropertyCollection): void => {\r\n            const result: TranslationRecognitionEventArgs = this.fireEventForResult(hypothesis, resultProperties);\r\n            this.privRequestSession.onHypothesis(this.privRequestSession.currentTurnAudioOffset + result.offset);\r\n\r\n            if (!!this.privTranslationRecognizer.recognizing) {\r\n                try {\r\n                    this.privTranslationRecognizer.recognizing(this.privTranslationRecognizer, result);\r\n                    /* eslint-disable no-empty */\r\n                } catch (error) {\r\n                    // Not going to let errors in the event handler\r\n                    // trip things up.\r\n                }\r\n            }\r\n            processed = true;\r\n        };\r\n\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"translation.hypothesis\":\r\n                handleTranslationHypothesis(TranslationHypothesis.fromJSON(connectionMessage.textBody), resultProps);\r\n                break;\r\n\r\n            case \"translation.response\":\r\n                const phrase: { SpeechPhrase: ITranslationPhrase } = JSON.parse(connectionMessage.textBody) as { SpeechPhrase: ITranslationPhrase };\r\n                if (!!phrase.SpeechPhrase) {\r\n                    await handleTranslationPhrase(TranslationPhrase.fromTranslationResponse(phrase));\r\n                } else {\r\n                    const hypothesis: { SpeechHypothesis: ITranslationHypothesis } = JSON.parse(connectionMessage.textBody) as { SpeechHypothesis: ITranslationHypothesis };\r\n                    if (!!hypothesis.SpeechHypothesis) {\r\n                        handleTranslationHypothesis(TranslationHypothesis.fromTranslationResponse(hypothesis), resultProps);\r\n                    }\r\n                }\r\n                break;\r\n            case \"translation.phrase\":\r\n                await handleTranslationPhrase(TranslationPhrase.fromJSON(connectionMessage.textBody));\r\n                break;\r\n\r\n            case \"translation.synthesis\":\r\n                this.sendSynthesisAudio(connectionMessage.binaryBody, this.privRequestSession.sessionId);\r\n                processed = true;\r\n                break;\r\n\r\n            case \"audio.end\":\r\n            case \"translation.synthesis.end\":\r\n                const synthEnd: TranslationSynthesisEnd = TranslationSynthesisEnd.fromJSON(connectionMessage.textBody);\r\n\r\n                switch (synthEnd.SynthesisStatus) {\r\n                    case SynthesisStatus.Error:\r\n                        if (!!this.privTranslationRecognizer.synthesizing) {\r\n                            const result = new TranslationSynthesisResult(ResultReason.Canceled, undefined);\r\n                            const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, this.privRequestSession.sessionId);\r\n\r\n                            try {\r\n                                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n\r\n                        if (!!this.privTranslationRecognizer.canceled) {\r\n                            // And raise a canceled event to send the rich(er) error message back.\r\n                            const canceledResult: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\r\n                                this.privRequestSession.sessionId,\r\n                                CancellationReason.Error,\r\n                                synthEnd.FailureReason,\r\n                                CancellationErrorCode.ServiceError,\r\n                                null);\r\n\r\n                            try {\r\n                                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, canceledResult);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                        break;\r\n                    case SynthesisStatus.Success:\r\n                        this.sendSynthesisAudio(undefined, this.privRequestSession.sessionId);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privTranslationRecognizer.canceled) {\r\n\r\n            const cancelEvent: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\r\n                sessionId,\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined);\r\n\r\n            try {\r\n                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: TranslationRecognitionResult = new TranslationRecognitionResult(\r\n                undefined, // Translations\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Druation\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // LanguageDetectionConfidence\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                /* eslint-disable no-empty */\r\n                this.privSuccessCallback = undefined;\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    protected handleRecognizingCallback(result: SpeechRecognitionResult, duration: number, sessionId: string): void {\r\n        try {\r\n            const ev = new TranslationRecognitionEventArgs(TranslationRecognitionResult.fromSpeechRecognitionResult(result), duration, sessionId);\r\n            this.privTranslationRecognizer.recognizing(this.privTranslationRecognizer, ev);\r\n            /* eslint-disable no-empty */\r\n        } catch (error) {\r\n            // Not going to let errors in the event handler\r\n            // trip things up.\r\n        }\r\n    }\r\n\r\n    protected handleRecognizedCallback(result: SpeechRecognitionResult, offset: number, sessionId: string): void {\r\n        try {\r\n            const ev = new TranslationRecognitionEventArgs(TranslationRecognitionResult.fromSpeechRecognitionResult(result), offset, sessionId);\r\n            this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, ev);\r\n        } catch (error) {\r\n            // Not going to let errors in the event handler\r\n            // trip things up.\r\n        }\r\n    }\r\n\r\n    private fireEventForResult(serviceResult: TranslationHypothesis | TranslationPhrase, properties: PropertyCollection): TranslationRecognitionEventArgs {\r\n        let translations: Translations;\r\n\r\n        if (undefined !== serviceResult.Translation.Translations) {\r\n            translations = new Translations();\r\n            for (const translation of serviceResult.Translation.Translations) {\r\n                translations.set(translation.Language, translation.Text || translation.DisplayText);\r\n            }\r\n        }\r\n\r\n        let resultReason: ResultReason;\r\n        let confidence: string;\r\n        if (serviceResult instanceof TranslationPhrase) {\r\n            if (!!serviceResult.Translation && serviceResult.Translation.TranslationStatus === TranslationStatus.Success) {\r\n                resultReason = ResultReason.TranslatedSpeech;\r\n            } else {\r\n                resultReason = ResultReason.RecognizedSpeech;\r\n            }\r\n            confidence = serviceResult.Confidence;\r\n        } else {\r\n            resultReason = ResultReason.TranslatingSpeech;\r\n        }\r\n        const language = serviceResult.Language;\r\n\r\n        const offset: number = serviceResult.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n        const result = new TranslationRecognitionResult(\r\n            translations,\r\n            this.privRequestSession.requestId,\r\n            resultReason,\r\n            serviceResult.Text,\r\n            serviceResult.Duration,\r\n            offset,\r\n            language,\r\n            confidence,\r\n            serviceResult.Translation.FailureReason,\r\n            JSON.stringify(serviceResult),\r\n            properties);\r\n\r\n        const ev = new TranslationRecognitionEventArgs(result, offset, this.privRequestSession.sessionId);\r\n        return ev;\r\n    }\r\n\r\n    private sendSynthesisAudio(audio: ArrayBuffer, sessionId: string): void {\r\n        const reason = (undefined === audio) ? ResultReason.SynthesizingAudioCompleted : ResultReason.SynthesizingAudio;\r\n        const result = new TranslationSynthesisResult(reason, audio);\r\n        const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, sessionId);\r\n\r\n        if (!!this.privTranslationRecognizer.synthesizing) {\r\n            try {\r\n                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// speech.endDetected\r\nexport interface ISpeechDetected {\r\n    Offset: number;\r\n}\r\n\r\nexport class SpeechDetected implements ISpeechDetected {\r\n    private privSpeechStartDetected: ISpeechDetected;\r\n\r\n    private constructor(json: string) {\r\n        this.privSpeechStartDetected = JSON.parse(json) as ISpeechDetected;\r\n    }\r\n\r\n    public static fromJSON(json: string): SpeechDetected {\r\n        return new SpeechDetected(json);\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSpeechStartDetected.Offset;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IPrimaryLanguage } from \"./SimpleSpeechPhrase.js\";\r\n\r\n// speech.hypothesis\r\nexport interface ISpeechHypothesis {\r\n    Text: string;\r\n    Offset: number;\r\n    Duration: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    SpeakerId?: string;\r\n}\r\n\r\nexport class SpeechHypothesis implements ISpeechHypothesis {\r\n    private privSpeechHypothesis: ISpeechHypothesis;\r\n\r\n    private constructor(json: string) {\r\n        this.privSpeechHypothesis = JSON.parse(json) as ISpeechHypothesis;\r\n    }\r\n\r\n    public static fromJSON(json: string): SpeechHypothesis {\r\n        return new SpeechHypothesis(json);\r\n    }\r\n\r\n    public get Text(): string {\r\n        return this.privSpeechHypothesis.Text;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSpeechHypothesis.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privSpeechHypothesis.Duration;\r\n    }\r\n\r\n    public get Language(): string {\r\n        return this.privSpeechHypothesis.PrimaryLanguage === undefined ? undefined : this.privSpeechHypothesis.PrimaryLanguage.Language;\r\n    }\r\n\r\n    public get LanguageDetectionConfidence(): string {\r\n        return this.privSpeechHypothesis.PrimaryLanguage === undefined ? undefined : this.privSpeechHypothesis.PrimaryLanguage.Confidence;\r\n    }\r\n\r\n    public get SpeakerId(): string {\r\n        return this.privSpeechHypothesis.SpeakerId;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// speech.keyword\r\nexport interface ISpeechKeyword {\r\n    Status: string;\r\n    Text: string;\r\n    Offset: number;\r\n    Duration: number;\r\n}\r\n\r\nexport class SpeechKeyword implements ISpeechKeyword {\r\n    private privSpeechKeyword: ISpeechKeyword;\r\n\r\n    private constructor(json: string) {\r\n        this.privSpeechKeyword = JSON.parse(json) as ISpeechKeyword;\r\n    }\r\n\r\n    public static fromJSON(json: string): SpeechKeyword {\r\n        return new SpeechKeyword(json);\r\n    }\r\n\r\n    public get Status(): string {\r\n        return this.privSpeechKeyword.Status;\r\n    }\r\n\r\n    public get Text(): string {\r\n        return this.privSpeechKeyword.Text;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSpeechKeyword.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privSpeechKeyword.Duration;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IAudioSource } from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n    SpeechRecognizer,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class SpeechServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    private privSpeechRecognizer: SpeechRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        speechRecognizer: SpeechRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer);\r\n        this.privSpeechRecognizer = speechRecognizer;\r\n\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let result: SpeechRecognitionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        let processed: boolean = false;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    undefined, // Speaker Id\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privSpeechRecognizer.recognizing) {\r\n                    try {\r\n                        this.privSpeechRecognizer.recognizing(this.privSpeechRecognizer, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus, this.privExpectContentAssessmentResponse);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\r\n\r\n                if (ResultReason.Canceled === resultReason) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n                    const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        cancellationErrorCode,\r\n                        EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                simple.DisplayText,\r\n                                simple.Duration,\r\n                                simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                                simple.Language,\r\n                                simple.LanguageDetectionConfidence,\r\n                                undefined, // Speaker Id\r\n                                undefined,\r\n                                connectionMessage.textBody,\r\n                                resultProps);\r\n                        } else {\r\n                            const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                            const totalOffset: number = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n                            const offsetCorrectedJson: string = detailed.getJsonWithCorrectedOffsets(totalOffset);\r\n\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : undefined,\r\n                                detailed.Duration,\r\n                                totalOffset,\r\n                                detailed.Language,\r\n                                detailed.LanguageDetectionConfidence,\r\n                                undefined, // Speaker Id\r\n                                undefined,\r\n                                offsetCorrectedJson,\r\n                                resultProps);\r\n                        }\r\n\r\n                        const event: SpeechRecognitionEventArgs = new SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privSpeechRecognizer.recognized) {\r\n                            try {\r\n                                this.privSpeechRecognizer.recognized(this.privSpeechRecognizer, event);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e as string);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privSpeechRecognizer.canceled) {\r\n            const cancelEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privSpeechRecognizer.canceled(this.privSpeechRecognizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // Language Detection Confidence\r\n                undefined, // Speaker Id\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IAudioSource } from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    ConversationTranscriptionCanceledEventArgs,\r\n    ConversationTranscriptionEventArgs,\r\n    ConversationTranscriptionResult,\r\n    ConversationTranscriber,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\nimport { PhraseDetection, SpeakerDiarization } from \"./ServiceRecognizerBase.js\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class ConversationTranscriptionServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    private privConversationTranscriber: ConversationTranscriber;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        conversationTranscriber: ConversationTranscriber) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, conversationTranscriber);\r\n        this.privConversationTranscriber = conversationTranscriber;\r\n        this.setSpeakerDiarizationJson();\r\n    }\r\n\r\n    protected setSpeakerDiarizationJson(): void {\r\n        if (this.privEnableSpeakerId) {\r\n            const phraseDetection = this.privSpeechContext.getSection(\"phraseDetection\") as PhraseDetection;\r\n            phraseDetection.mode = \"Conversation\";\r\n            const speakerDiarization: SpeakerDiarization = {};\r\n            speakerDiarization.mode = \"Anonymous\";\r\n            speakerDiarization.audioSessionId = this.privDiarizationSessionId;\r\n            speakerDiarization.audioOffsetMs = 0;\r\n            phraseDetection.speakerDiarization = speakerDiarization;\r\n            this.privSpeechContext.setSection(\"phraseDetection\", phraseDetection);\r\n        }\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let result: ConversationTranscriptionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        let processed: boolean = false;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new ConversationTranscriptionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    undefined, // Speaker Id\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new ConversationTranscriptionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privConversationTranscriber.transcribing) {\r\n                    try {\r\n                        this.privConversationTranscriber.transcribing(this.privConversationTranscriber, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\r\n\r\n                if (ResultReason.Canceled === resultReason) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n                    const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        cancellationErrorCode,\r\n                        EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                            result = new ConversationTranscriptionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                simple.DisplayText,\r\n                                simple.Duration,\r\n                                simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                                simple.Language,\r\n                                simple.LanguageDetectionConfidence,\r\n                                simple.SpeakerId,\r\n                                undefined,\r\n                                connectionMessage.textBody,\r\n                                resultProps);\r\n                        } else {\r\n                            const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                            const totalOffset: number = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n                            const offsetCorrectedJson: string = detailed.getJsonWithCorrectedOffsets(totalOffset);\r\n\r\n                            result = new ConversationTranscriptionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : undefined,\r\n                                detailed.Duration,\r\n                                totalOffset,\r\n                                detailed.Language,\r\n                                detailed.LanguageDetectionConfidence,\r\n                                simple.SpeakerId,\r\n                                undefined,\r\n                                offsetCorrectedJson,\r\n                                resultProps);\r\n                        }\r\n\r\n                        const event: ConversationTranscriptionEventArgs = new ConversationTranscriptionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privConversationTranscriber.transcribed) {\r\n                            try {\r\n                                this.privConversationTranscriber.transcribed(this.privConversationTranscriber, event);\r\n                                /* eslint-disable no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privConversationTranscriber.canceled) {\r\n            const cancelEvent: ConversationTranscriptionCanceledEventArgs = new ConversationTranscriptionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privConversationTranscriber.canceled(this.privConversationTranscriber, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAudioSource,\r\n    IConnection,\r\n    MessageType\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ConversationTranscriptionCanceledEventArgs,\r\n    MeetingTranscriptionCanceledEventArgs,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"../sdk/Exports.js\";\r\nimport { ConversationInfo, MeetingInfo } from \"../sdk/Transcription/Exports.js\";\r\nimport { ConversationProperties } from \"../sdk/Transcription/IConversation.js\";\r\nimport { MeetingProperties } from \"../sdk/Transcription/IMeeting.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    ConversationServiceRecognizer,\r\n    TranscriberRecognizer\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class TranscriptionServiceRecognizer extends ConversationServiceRecognizer {\r\n\r\n    private privTranscriberRecognizer: TranscriberRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        transcriber: TranscriberRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, transcriber);\r\n        this.privTranscriberRecognizer = transcriber;\r\n        this.sendPrePayloadJSONOverride = (connection: IConnection): Promise<void> => this.sendTranscriptionStartJSON(connection);\r\n        if (this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps) === \"true\") {\r\n            this.privSpeechContext.setWordLevelTimings();\r\n        }\r\n    }\r\n\r\n    public async sendSpeechEventAsync(info: ConversationInfo, command: string): Promise<void> {\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            await this.sendSpeechEvent(connection, this.createSpeechEventPayload(info, command));\r\n        }\r\n    }\r\n\r\n    public async sendMeetingSpeechEventAsync(info: MeetingInfo, command: string): Promise<void> {\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            await this.sendSpeechEvent(connection, this.createMeetingSpeechEventPayload(info, command));\r\n        }\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n        return this.processSpeechMessages(connectionMessage);\r\n    }\r\n\r\n    protected handleRecognizedCallback(result: SpeechRecognitionResult, offset: number, sessionId: string): void {\r\n        try {\r\n            const event: SpeechRecognitionEventArgs = new SpeechRecognitionEventArgs(result, offset, sessionId);\r\n            this.privTranscriberRecognizer.recognized(this.privTranscriberRecognizer, event);\r\n            if (!!this.privSuccessCallback) {\r\n                try {\r\n                    this.privSuccessCallback(result);\r\n                } catch (e) {\r\n                    if (!!this.privErrorCallback) {\r\n                        this.privErrorCallback(e as string);\r\n                    }\r\n                }\r\n                // Only invoke the call back once.\r\n                // and if it's successful don't invoke the\r\n                // error after that.\r\n                this.privSuccessCallback = undefined;\r\n                this.privErrorCallback = undefined;\r\n            }\r\n        /* eslint-disable no-empty */\r\n        } catch (error) {\r\n            // Not going to let errors in the event handler\r\n            // trip things up.\r\n        }\r\n    }\r\n\r\n    protected handleRecognizingCallback(result: SpeechRecognitionResult, duration: number, sessionId: string): void {\r\n        try {\r\n            const ev = new SpeechRecognitionEventArgs(result, duration, sessionId);\r\n            this.privTranscriberRecognizer.recognizing(this.privTranscriberRecognizer, ev);\r\n            /* eslint-disable no-empty */\r\n        } catch (error) {\r\n            // Not going to let errors in the event handler\r\n            // trip things up.\r\n        }\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (this.privTranscriberRecognizer.IsMeetingRecognizer()) {\r\n            if (!!this.privTranscriberRecognizer.canceled) {\r\n                const cancelEvent: MeetingTranscriptionCanceledEventArgs = new MeetingTranscriptionCanceledEventArgs(\r\n                    cancellationReason,\r\n                    error,\r\n                    errorCode,\r\n                    undefined,\r\n                    sessionId);\r\n                try {\r\n                    this.privTranscriberRecognizer.canceled(this.privTranscriberRecognizer, cancelEvent);\r\n                    /* eslint-disable no-empty */\r\n                } catch { }\r\n            }\r\n        } else {\r\n            if (!!this.privTranscriberRecognizer.canceled) {\r\n                const cancelEvent: ConversationTranscriptionCanceledEventArgs = new ConversationTranscriptionCanceledEventArgs(\r\n                    cancellationReason,\r\n                    error,\r\n                    errorCode,\r\n                    undefined,\r\n                    sessionId);\r\n                try {\r\n                    this.privTranscriberRecognizer.canceled(this.privTranscriberRecognizer, cancelEvent);\r\n                    /* eslint-disable no-empty */\r\n                } catch { }\r\n            }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // Language Detection Confidence\r\n                undefined, // Speaker Id\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    // Encapsulated for derived service recognizers that need to send additional JSON\r\n    protected async sendTranscriptionStartJSON(connection: IConnection): Promise<void> {\r\n        await this.sendSpeechContext(connection, true);\r\n        if (this.privTranscriberRecognizer.IsMeetingRecognizer()) {\r\n            const info: MeetingInfo = this.privTranscriberRecognizer.getMeetingInfo();\r\n            const payload: { [id: string]: any } = this.createMeetingSpeechEventPayload(info, \"start\");\r\n            await this.sendSpeechEvent(connection, payload);\r\n        } else {\r\n            const info: ConversationInfo = this.privTranscriberRecognizer.getConversationInfo();\r\n            const payload: { [id: string]: any } = this.createSpeechEventPayload(info, \"start\");\r\n            await this.sendSpeechEvent(connection, payload);\r\n        }\r\n        await this.sendWaveHeader(connection);\r\n        return;\r\n    }\r\n\r\n    protected sendSpeechEvent(connection: IConnection, payload: { [id: string]: any }): Promise<void> {\r\n        const speechEventJson = JSON.stringify(payload);\r\n\r\n        if (speechEventJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.event\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                speechEventJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    private createSpeechEventPayload(info: ConversationInfo, command: string): { [id: string]: any } {\r\n        const eventDict: { id: string; name: string; meeting: ConversationProperties } = { id: \"meeting\", name: command, meeting: info.conversationProperties };\r\n        eventDict.meeting.id = info.id;\r\n        eventDict.meeting.attendees = info.participants;\r\n        return eventDict;\r\n    }\r\n\r\n    private createMeetingSpeechEventPayload(info: MeetingInfo, command: string): { [id: string]: any } {\r\n        const eventDict: { id: string; name: string; meeting: MeetingProperties } = { id: \"meeting\", name: command, meeting: info.meetingProperties };\r\n        eventDict.meeting.id = info.id;\r\n        eventDict.meeting.attendees = info.participants;\r\n        return eventDict;\r\n    }\r\n\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IPrimaryLanguage, RecognitionStatus } from \"../Exports.js\";\r\n\r\n// speech.phrase for detailed\r\nexport interface IDetailedSpeechPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    NBest: IPhrase[];\r\n    Duration?: number;\r\n    Offset?: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    DisplayText?: string;\r\n    SpeakerId?: string;\r\n}\r\n\r\nexport interface IPhrase {\r\n    Confidence?: number;\r\n    Lexical: string;\r\n    ITN: string;\r\n    MaskedITN: string;\r\n    Display?: string;\r\n    DisplayText?: string;\r\n    Words?: IWord[];\r\n    DisplayWords?: IWord[];\r\n}\r\n\r\nexport interface IWord {\r\n    Word: string;\r\n    Offset: number;\r\n    Duration: number;\r\n}\r\n\r\nexport class DetailedSpeechPhrase implements IDetailedSpeechPhrase {\r\n    private privDetailedSpeechPhrase: IDetailedSpeechPhrase;\r\n\r\n    private constructor(json: string) {\r\n        this.privDetailedSpeechPhrase = JSON.parse(json) as IDetailedSpeechPhrase;\r\n        this.privDetailedSpeechPhrase.RecognitionStatus = RecognitionStatus[this.privDetailedSpeechPhrase.RecognitionStatus as unknown as keyof typeof RecognitionStatus];\r\n    }\r\n\r\n    public static fromJSON(json: string): DetailedSpeechPhrase {\r\n        return new DetailedSpeechPhrase(json);\r\n    }\r\n\r\n    public getJsonWithCorrectedOffsets(baseOffset: number): string {\r\n        if (!!this.privDetailedSpeechPhrase.NBest) {\r\n            let firstWordOffset: number;\r\n            for (const phrase of this.privDetailedSpeechPhrase.NBest) {\r\n                if (!!phrase.Words && !!phrase.Words[0]) {\r\n                    firstWordOffset = phrase.Words[0].Offset;\r\n                    break;\r\n                }\r\n            }\r\n            if (!!firstWordOffset && firstWordOffset < baseOffset) {\r\n                const offset: number = baseOffset - firstWordOffset;\r\n                for (const details of this.privDetailedSpeechPhrase.NBest) {\r\n                    if (!!details.Words) {\r\n                        for (const word of details.Words) {\r\n                            word.Offset += offset;\r\n                        }\r\n                    }\r\n                    if (!!details.DisplayWords) {\r\n                        for (const word of details.DisplayWords) {\r\n                            word.Offset += offset;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return JSON.stringify(this.privDetailedSpeechPhrase);\r\n    }\r\n\r\n    public get RecognitionStatus(): RecognitionStatus {\r\n        return this.privDetailedSpeechPhrase.RecognitionStatus;\r\n    }\r\n    public get NBest(): IPhrase[] {\r\n        return this.privDetailedSpeechPhrase.NBest;\r\n    }\r\n    public get Duration(): number {\r\n        return this.privDetailedSpeechPhrase.Duration;\r\n    }\r\n    public get Offset(): number {\r\n        return this.privDetailedSpeechPhrase.Offset;\r\n    }\r\n    public get Language(): string {\r\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Language;\r\n    }\r\n    public get LanguageDetectionConfidence(): string {\r\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Confidence;\r\n    }\r\n    public get Text(): string {\r\n        if (!!this.privDetailedSpeechPhrase.NBest && this.privDetailedSpeechPhrase.NBest[0]) {\r\n            return this.privDetailedSpeechPhrase.NBest[0].Display || this.privDetailedSpeechPhrase.NBest[0].DisplayText;\r\n        }\r\n        return this.privDetailedSpeechPhrase.DisplayText;\r\n    }\r\n    public get SpeakerId(): string {\r\n        return this.privDetailedSpeechPhrase.SpeakerId;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognitionStatus } from \"../Exports.js\";\r\n\r\n// speech.phrase\r\nexport interface ISimpleSpeechPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    DisplayText: string;\r\n    Offset?: number;\r\n    Duration?: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    SpeakerId?: string;\r\n}\r\n\r\nexport interface IPrimaryLanguage {\r\n    Language: string;\r\n    Confidence: string;\r\n}\r\n\r\nexport class SimpleSpeechPhrase implements ISimpleSpeechPhrase {\r\n    private privSimpleSpeechPhrase: ISimpleSpeechPhrase;\r\n\r\n    private constructor(json: string) {\r\n        this.privSimpleSpeechPhrase = JSON.parse(json) as ISimpleSpeechPhrase;\r\n        this.privSimpleSpeechPhrase.RecognitionStatus = RecognitionStatus[this.privSimpleSpeechPhrase.RecognitionStatus as unknown as keyof typeof RecognitionStatus];\r\n    }\r\n\r\n    public static fromJSON(json: string): SimpleSpeechPhrase {\r\n        return new SimpleSpeechPhrase(json);\r\n    }\r\n\r\n    public get RecognitionStatus(): RecognitionStatus {\r\n        return this.privSimpleSpeechPhrase.RecognitionStatus;\r\n    }\r\n\r\n    public get DisplayText(): string {\r\n        return this.privSimpleSpeechPhrase.DisplayText;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSimpleSpeechPhrase.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privSimpleSpeechPhrase.Duration;\r\n    }\r\n\r\n    public get Language(): string {\r\n        return this.privSimpleSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privSimpleSpeechPhrase.PrimaryLanguage.Language;\r\n    }\r\n\r\n    public get LanguageDetectionConfidence(): string {\r\n        return this.privSimpleSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privSimpleSpeechPhrase.PrimaryLanguage.Confidence;\r\n    }\r\n\r\n    public get SpeakerId(): string {\r\n        return this.privSimpleSpeechPhrase.SpeakerId;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { LanguageUnderstandingModelImpl } from \"../sdk/LanguageUnderstandingModel.js\";\r\n\r\n/**\r\n * @class AddedLmIntent\r\n */\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class AddedLmIntent {\r\n    public modelImpl: LanguageUnderstandingModelImpl;\r\n    public intentName: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param modelImpl - The model.\r\n     * @param intentName - The intent name.\r\n     */\r\n    public constructor(modelImpl: LanguageUnderstandingModelImpl, intentName: string) {\r\n        this.modelImpl = modelImpl;\r\n        this.intentName = intentName;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    Deferred,\r\n    IAudioSource,\r\n    MessageType,\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    IntentRecognitionCanceledEventArgs,\r\n    IntentRecognitionEventArgs,\r\n    IntentRecognitionResult,\r\n    IntentRecognizer,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    AddedLmIntent,\r\n    CancellationErrorCodePropertyName,\r\n    EnumTranslation,\r\n    IntentResponse,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class IntentServiceRecognizer extends ServiceRecognizerBase {\r\n    private privIntentRecognizer: IntentRecognizer;\r\n    private privAddedLmIntents: { [id: string]: AddedLmIntent };\r\n    private privIntentDataSent: boolean;\r\n    private privUmbrellaIntent: AddedLmIntent;\r\n    private privPendingIntentArgs: IntentRecognitionEventArgs;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: IntentRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.privIntentRecognizer = recognizer;\r\n        this.privIntentDataSent = false;\r\n    }\r\n\r\n    public setIntents(addedIntents: { [id: string]: AddedLmIntent }, umbrellaIntent: AddedLmIntent): void {\r\n        this.privAddedLmIntents = addedIntents;\r\n        this.privUmbrellaIntent = umbrellaIntent;\r\n        this.privIntentDataSent = true;\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let result: IntentRecognitionResult;\r\n        let ev: IntentRecognitionEventArgs;\r\n        let processed: boolean = false;\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n                const speechHypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n\r\n                result = new IntentRecognitionResult(\r\n                    undefined,\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingIntent,\r\n                    speechHypothesis.Text,\r\n                    speechHypothesis.Duration,\r\n                    speechHypothesis.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                    speechHypothesis.Language,\r\n                    speechHypothesis.LanguageDetectionConfidence,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(result.offset);\r\n\r\n                ev = new IntentRecognitionEventArgs(result, speechHypothesis.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privIntentRecognizer.recognizing) {\r\n                    try {\r\n                        this.privIntentRecognizer.recognizing(this.privIntentRecognizer, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                result = new IntentRecognitionResult(\r\n                    undefined,\r\n                    this.privRequestSession.requestId,\r\n                    EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus),\r\n                    simple.DisplayText,\r\n                    simple.Duration,\r\n                    simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                    simple.Language,\r\n                    simple.LanguageDetectionConfidence,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                ev = new IntentRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                const sendEvent: () => void = (): void => {\r\n                    if (!!this.privIntentRecognizer.recognized) {\r\n                        try {\r\n                            this.privIntentRecognizer.recognized(this.privIntentRecognizer, ev);\r\n                            /* eslint-disable no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n\r\n                    // report result to promise.\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e as string);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                };\r\n\r\n                // If intent data was sent, the terminal result for this recognizer is an intent being found.\r\n                // If no intent data was sent, the terminal event is speech recognition being successful.\r\n                if (false === this.privIntentDataSent || ResultReason.NoMatch === ev.result.reason) {\r\n                    // Advance the buffers.\r\n                    this.privRequestSession.onPhraseRecognized(ev.offset + ev.result.duration);\r\n                    sendEvent();\r\n                } else {\r\n                    // Squirrel away the args, when the response event arrives it will build upon them\r\n                    // and then return\r\n                    this.privPendingIntentArgs = ev;\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"response\":\r\n                // Response from LUIS\r\n                ev = this.privPendingIntentArgs;\r\n                this.privPendingIntentArgs = undefined;\r\n\r\n                if (undefined === ev) {\r\n                    if (\"\" === connectionMessage.textBody) {\r\n                        // This condition happens if there is nothing but silence in the\r\n                        // audio sent to the service.\r\n                        return;\r\n                    }\r\n\r\n                    // Odd... Not sure this can happen\r\n                    ev = new IntentRecognitionEventArgs(new IntentRecognitionResult(), 0, this.privRequestSession.sessionId);\r\n                }\r\n\r\n                const intentResponse: IntentResponse = IntentResponse.fromJSON(connectionMessage.textBody);\r\n\r\n                // If LUIS didn't return anything, send the existing event, else\r\n                // modify it to show the match.\r\n                // See if the intent found is in the list of intents asked for.\r\n\r\n                if (null !== intentResponse && !!intentResponse.topScoringIntent && !!intentResponse.topScoringIntent.intent) {\r\n                    let addedIntent: AddedLmIntent = this.privAddedLmIntents[intentResponse.topScoringIntent.intent];\r\n\r\n                    if (this.privUmbrellaIntent !== undefined) {\r\n                        addedIntent = this.privUmbrellaIntent;\r\n                    }\r\n\r\n                    if (!!addedIntent) {\r\n                        const intentId = addedIntent === undefined || addedIntent.intentName === undefined ? intentResponse.topScoringIntent.intent : addedIntent.intentName;\r\n                        let reason = ev.result.reason;\r\n\r\n                        if (undefined !== intentId) {\r\n                            reason = ResultReason.RecognizedIntent;\r\n                        }\r\n\r\n                        // make sure, properties is set.\r\n                        const properties = (undefined !== ev.result.properties) ?\r\n                            ev.result.properties : new PropertyCollection();\r\n\r\n                        properties.setProperty(PropertyId.LanguageUnderstandingServiceResponse_JsonResult, connectionMessage.textBody);\r\n\r\n                        ev = new IntentRecognitionEventArgs(\r\n                            new IntentRecognitionResult(\r\n                                intentId,\r\n                                ev.result.resultId,\r\n                                reason,\r\n                                ev.result.text,\r\n                                ev.result.duration,\r\n                                ev.result.offset,\r\n                                undefined,\r\n                                undefined,\r\n                                ev.result.errorDetails,\r\n                                ev.result.json,\r\n                                properties),\r\n                            ev.offset,\r\n                            ev.sessionId);\r\n\r\n                    }\r\n                }\r\n                this.privRequestSession.onPhraseRecognized(ev.offset + ev.result.duration);\r\n\r\n                if (!!this.privIntentRecognizer.recognized) {\r\n                    try {\r\n                        this.privIntentRecognizer.recognized(this.privIntentRecognizer, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n\r\n                // report result to promise.\r\n                if (!!this.privSuccessCallback) {\r\n                    try {\r\n                        this.privSuccessCallback(ev.result);\r\n                    } catch (e) {\r\n                        if (!!this.privErrorCallback) {\r\n                            this.privErrorCallback(e as string);\r\n                        }\r\n                    }\r\n                    // Only invoke the call back once.\r\n                    // and if it's successful don't invoke the\r\n                    // error after that.\r\n                    this.privSuccessCallback = undefined;\r\n                    this.privErrorCallback = undefined;\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        const defferal = new Deferred<boolean>();\r\n        defferal.resolve(processed);\r\n        return defferal.promise;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privIntentRecognizer.canceled) {\r\n\r\n            const cancelEvent: IntentRecognitionCanceledEventArgs = new IntentRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privIntentRecognizer.canceled(this.privIntentRecognizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: IntentRecognitionResult = new IntentRecognitionResult(\r\n                undefined, // Intent Id\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // LanguageDetectionConfidence\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// response\r\n\r\nexport interface IIntentResponse {\r\n    query?: string;\r\n    topScoringIntent?: ISingleIntent;\r\n    entities?: IIntentEntity[];\r\n}\r\n\r\nexport interface IIntentEntity {\r\n    entity: string;\r\n    type: string;\r\n    startIndex: number;\r\n    endIndex: number;\r\n    score: number;\r\n}\r\n\r\nexport interface ISingleIntent {\r\n    intent: string;\r\n    score: number;\r\n}\r\n\r\nexport class IntentResponse implements IIntentResponse {\r\n    private privIntentResponse: IIntentResponse;\r\n\r\n    private constructor(json: string) {\r\n        if (json === \"\") {\r\n            this.privIntentResponse = {};\r\n        } else {\r\n            this.privIntentResponse = JSON.parse(json) as IIntentResponse;\r\n        }\r\n    }\r\n\r\n    public static fromJSON(json: string): IntentResponse {\r\n        return new IntentResponse(json);\r\n    }\r\n\r\n    public get query(): string {\r\n        return this.privIntentResponse.query;\r\n    }\r\n\r\n    public get topScoringIntent(): ISingleIntent {\r\n        return this.privIntentResponse.topScoringIntent;\r\n    }\r\n\r\n    public get entities(): IIntentEntity[] {\r\n        return this.privIntentResponse.entities;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEstablishErrorEvent,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionStartEvent,\r\n    IEventListener,\r\n    IStringDictionary,\r\n    PlatformEvent,\r\n} from \"../common/Exports.js\";\r\nimport { ConnectingToServiceEvent, RecognitionTriggeredEvent } from \"./RecognitionEvents.js\";\r\n\r\nexport interface ITelemetry {\r\n    Metrics: IMetric[];\r\n    ReceivedMessages: IStringDictionary<string[]>;\r\n}\r\n\r\nexport interface IMetric {\r\n    End?: string;\r\n    Error?: string;\r\n    Id?: string;\r\n    Name?: string;\r\n    Start?: string;\r\n    PhraseLatencyMs?: number[];\r\n    FirstHypothesisLatencyMs?: number[];\r\n}\r\n\r\nexport class ServiceTelemetryListener implements IEventListener<PlatformEvent> {\r\n    private privIsDisposed: boolean = false;\r\n\r\n    private privRequestId: string;\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n\r\n    private privListeningTriggerMetric: IMetric = null;\r\n    private privMicMetric: IMetric = null;\r\n    private privConnectionEstablishMetric: IMetric = null;\r\n\r\n    private privMicStartTime: string;\r\n\r\n    private privConnectionId: string;\r\n    private privConnectionStartTime: string;\r\n\r\n    private privReceivedMessages: IStringDictionary<string[]>;\r\n    private privPhraseLatencies: number[];\r\n    private privHypothesisLatencies: number[];\r\n\r\n    public constructor(requestId: string, audioSourceId: string, audioNodeId: string) {\r\n        this.privRequestId = requestId;\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n\r\n        this.privReceivedMessages = {};\r\n        this.privPhraseLatencies = [];\r\n        this.privHypothesisLatencies = [];\r\n    }\r\n\r\n    public phraseReceived(audioReceivedTime: number): void {\r\n        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.\r\n            this.privPhraseLatencies.push(Date.now() - audioReceivedTime);\r\n        }\r\n    }\r\n\r\n    public hypothesisReceived(audioReceivedTime: number): void {\r\n        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.\r\n            this.privHypothesisLatencies.push(Date.now() - audioReceivedTime);\r\n        }\r\n    }\r\n\r\n    public onEvent(e: PlatformEvent): void {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (e instanceof RecognitionTriggeredEvent && e.requestId === this.privRequestId) {\r\n            this.privListeningTriggerMetric = {\r\n                End: e.eventTime,\r\n                Name: \"ListeningTrigger\",\r\n                Start: e.eventTime,\r\n            };\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeAttachingEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            this.privMicStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeAttachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            this.privMicStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof AudioSourceErrorEvent && e.audioSourceId === this.privAudioSourceId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Error: e.error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeErrorEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Error: e.error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeDetachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectingToServiceEvent && e.requestId === this.privRequestId) {\r\n            this.privConnectionId = e.sessionId;\r\n        }\r\n\r\n        if (e instanceof ConnectionStartEvent && e.connectionId === this.privConnectionId) {\r\n            this.privConnectionStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof ConnectionEstablishedEvent && e.connectionId === this.privConnectionId) {\r\n            if (!this.privConnectionEstablishMetric) {\r\n                this.privConnectionEstablishMetric = {\r\n                    End: e.eventTime,\r\n                    Id: this.privConnectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.privConnectionStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectionEstablishErrorEvent && e.connectionId === this.privConnectionId) {\r\n            if (!this.privConnectionEstablishMetric) {\r\n                this.privConnectionEstablishMetric = {\r\n                    End: e.eventTime,\r\n                    Error: this.getConnectionError(e.statusCode),\r\n                    Id: this.privConnectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.privConnectionStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectionMessageReceivedEvent && e.connectionId === this.privConnectionId) {\r\n            if (e.message && e.message.headers && e.message.headers.path) {\r\n                if (!this.privReceivedMessages[e.message.headers.path]) {\r\n                    this.privReceivedMessages[e.message.headers.path] = new Array<string>();\r\n                }\r\n                const maxMessagesToSend = 50;\r\n                if (this.privReceivedMessages[e.message.headers.path].length < maxMessagesToSend) {\r\n                    this.privReceivedMessages[e.message.headers.path].push(e.networkReceivedTime);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public getTelemetry(): string {\r\n        const metrics = new Array<IMetric>();\r\n\r\n        if (this.privListeningTriggerMetric) {\r\n            metrics.push(this.privListeningTriggerMetric);\r\n        }\r\n\r\n        if (this.privMicMetric) {\r\n            metrics.push(this.privMicMetric);\r\n        }\r\n\r\n        if (this.privConnectionEstablishMetric) {\r\n            metrics.push(this.privConnectionEstablishMetric);\r\n        }\r\n\r\n        if (this.privPhraseLatencies.length > 0) {\r\n            metrics.push({\r\n                PhraseLatencyMs: this.privPhraseLatencies,\r\n            });\r\n        }\r\n\r\n        if (this.privHypothesisLatencies.length > 0) {\r\n            metrics.push({\r\n                FirstHypothesisLatencyMs: this.privHypothesisLatencies,\r\n            });\r\n        }\r\n\r\n        const telemetry: ITelemetry = {\r\n            Metrics: metrics,\r\n            ReceivedMessages: this.privReceivedMessages,\r\n        };\r\n\r\n        const json = JSON.stringify(telemetry);\r\n\r\n        // We dont want to send the same telemetry again. So clean those out.\r\n        this.privReceivedMessages = {};\r\n        this.privListeningTriggerMetric = null;\r\n        this.privMicMetric = null;\r\n        this.privConnectionEstablishMetric = null;\r\n        this.privPhraseLatencies = [];\r\n        this.privHypothesisLatencies = [];\r\n        return json;\r\n    }\r\n\r\n    // Determines if there are any telemetry events to send to the service.\r\n    public get hasTelemetry(): boolean {\r\n        return (Object.keys(this.privReceivedMessages).length !== 0 ||\r\n            this.privListeningTriggerMetric !== null ||\r\n            this.privMicMetric !== null ||\r\n            this.privConnectionEstablishMetric !== null ||\r\n            this.privPhraseLatencies.length !== 0 ||\r\n            this.privHypothesisLatencies.length !== 0);\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.privIsDisposed = true;\r\n    }\r\n\r\n    private getConnectionError(statusCode: number): string {\r\n        /*\r\n        -- Websocket status codes --\r\n        NormalClosure = 1000,\r\n        EndpointUnavailable = 1001,\r\n        ProtocolError = 1002,\r\n        InvalidMessageType = 1003,\r\n        Empty = 1005,\r\n        InvalidPayloadData = 1007,\r\n        PolicyViolation = 1008,\r\n        MessageTooBig = 1009,\r\n        MandatoryExtension = 1010,\r\n        InternalServerError = 1011\r\n        */\r\n\r\n        switch (statusCode) {\r\n            case 400:\r\n            case 1002:\r\n            case 1003:\r\n            case 1005:\r\n            case 1007:\r\n            case 1008:\r\n            case 1009: return \"BadRequest\";\r\n            case 401: return \"Unauthorized\";\r\n            case 403: return \"Forbidden\";\r\n            case 503:\r\n            case 1001: return \"ServerUnavailable\";\r\n            case 500:\r\n            case 1011: return \"ServerError\";\r\n            case 408:\r\n            case 504: return \"Timeout\";\r\n            default: return \"statuscode:\" + statusCode.toString();\r\n        }\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports.js\";\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    IDetachable,\r\n    IEventSource,\r\n    PlatformEvent\r\n} from \"../common/Exports.js\";\r\nimport {\r\n    ConnectingToServiceEvent,\r\n    ListeningStartedEvent,\r\n    RecognitionStartedEvent,\r\n    RecognitionTriggeredEvent,\r\n    SpeechRecognitionEvent,\r\n} from \"./RecognitionEvents.js\";\r\nimport { ServiceTelemetryListener } from \"./ServiceTelemetryListener.Internal.js\";\r\n\r\nexport class RequestSession {\r\n    private privIsDisposed: boolean = false;\r\n    private privServiceTelemetryListener: ServiceTelemetryListener;\r\n    private privDetachables: IDetachable[] = new Array<IDetachable>();\r\n    private privRequestId: string;\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n    private privAudioNode: ReplayableAudioNode;\r\n    private privAuthFetchEventId: string;\r\n    private privIsAudioNodeDetached: boolean = false;\r\n    private privIsRecognizing: boolean = false;\r\n    private privIsSpeechEnded: boolean = false;\r\n    private privTurnStartAudioOffset: number = 0;\r\n    private privLastRecoOffset: number = 0;\r\n    private privHypothesisReceived: boolean = false;\r\n    private privBytesSent: number = 0;\r\n    private privRecognitionBytesSent: number = 0;\r\n    private privRecogNumber: number = 0;\r\n    private privSessionId: string;\r\n    private privTurnDeferral: Deferred<void>;\r\n    private privInTurn: boolean = false;\r\n    private privConnectionAttempts: number = 0;\r\n\r\n    public constructor(audioSourceId: string) {\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privAudioNodeId = createNoDashGuid();\r\n        this.privTurnDeferral = new Deferred<void>();\r\n\r\n        // We're not in a turn, so resolve.\r\n        this.privTurnDeferral.resolve();\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n\r\n    public get turnCompletionPromise(): Promise<void> {\r\n        return this.privTurnDeferral.promise;\r\n    }\r\n\r\n    public get isSpeechEnded(): boolean {\r\n        return this.privIsSpeechEnded;\r\n    }\r\n\r\n    public get isRecognizing(): boolean {\r\n        return this.privIsRecognizing;\r\n    }\r\n\r\n    public get currentTurnAudioOffset(): number {\r\n        return this.privTurnStartAudioOffset;\r\n    }\r\n\r\n    public get recogNumber(): number {\r\n        return this.privRecogNumber;\r\n    }\r\n\r\n    public get numConnectionAttempts(): number {\r\n        return this.privConnectionAttempts;\r\n    }\r\n\r\n    // The number of bytes sent for the current connection.\r\n    // Counter is reset to 0 each time a connection is established.\r\n    public get bytesSent(): number {\r\n        return this.privBytesSent;\r\n    }\r\n\r\n    // The number of bytes sent for the current recognition.\r\n    // Counter is reset to 0 each time recognition is started.\r\n    public get recognitionBytesSent(): number {\r\n        return this.privRecognitionBytesSent;\r\n    }\r\n\r\n    public listenForServiceTelemetry(eventSource: IEventSource<PlatformEvent>): void {\r\n        if (!!this.privServiceTelemetryListener) {\r\n            this.privDetachables.push(eventSource.attachListener(this.privServiceTelemetryListener));\r\n        }\r\n    }\r\n\r\n    public startNewRecognition(): void {\r\n        this.privRecognitionBytesSent = 0;\r\n        this.privIsSpeechEnded = false;\r\n        this.privIsRecognizing = true;\r\n        this.privTurnStartAudioOffset = 0;\r\n        this.privLastRecoOffset = 0;\r\n        this.privRecogNumber++;\r\n        this.privServiceTelemetryListener = new ServiceTelemetryListener(this.privRequestId, this.privAudioSourceId, this.privAudioNodeId);\r\n        this.onEvent(new RecognitionTriggeredEvent(this.requestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));\r\n    }\r\n\r\n    public async onAudioSourceAttachCompleted(audioNode: ReplayableAudioNode, isError: boolean): Promise<void> {\r\n        this.privAudioNode = audioNode;\r\n        this.privIsAudioNodeDetached = false;\r\n\r\n        if (isError) {\r\n            await this.onComplete();\r\n        } else {\r\n            this.onEvent(new ListeningStartedEvent(this.privRequestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));\r\n        }\r\n    }\r\n\r\n    public onPreConnectionStart(authFetchEventId: string, connectionId: string): void {\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n        this.privSessionId = connectionId;\r\n        this.onEvent(new ConnectingToServiceEvent(this.privRequestId, this.privAuthFetchEventId, this.privSessionId));\r\n    }\r\n\r\n    public async onAuthCompleted(isError: boolean): Promise<void> {\r\n        if (isError) {\r\n            await this.onComplete();\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public async onConnectionEstablishCompleted(statusCode: number, reason?: string): Promise<void> {\r\n        if (statusCode === 200) {\r\n            this.onEvent(new RecognitionStartedEvent(this.requestId, this.privAudioSourceId, this.privAudioNodeId, this.privAuthFetchEventId, this.privSessionId));\r\n            if (!!this.privAudioNode) {\r\n                this.privAudioNode.replay();\r\n            }\r\n            this.privTurnStartAudioOffset = this.privLastRecoOffset;\r\n            this.privBytesSent = 0;\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            await this.onComplete();\r\n        }\r\n    }\r\n\r\n    public async onServiceTurnEndResponse(continuousRecognition: boolean): Promise<void> {\r\n        this.privTurnDeferral.resolve();\r\n\r\n        if (!continuousRecognition || this.isSpeechEnded) {\r\n            await this.onComplete();\r\n            this.privInTurn = false;\r\n        } else {\r\n            // Start a new request set.\r\n            this.privTurnStartAudioOffset = this.privLastRecoOffset;\r\n            this.privAudioNode.replay();\r\n        }\r\n    }\r\n\r\n    public onSpeechContext(): void {\r\n        this.privRequestId = createNoDashGuid();\r\n    }\r\n\r\n    public onServiceTurnStartResponse(): void {\r\n        if (!!this.privTurnDeferral && !!this.privInTurn) {\r\n            // What? How are we starting a turn with another not done?\r\n            this.privTurnDeferral.reject(\"Another turn started before current completed.\");\r\n            // Avoid UnhandledPromiseRejection if privTurnDeferral is not being awaited\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            this.privTurnDeferral.promise.then().catch((): void => { });\r\n        }\r\n        this.privInTurn = true;\r\n        this.privTurnDeferral = new Deferred<void>();\r\n    }\r\n\r\n    public onHypothesis(offset: number): void {\r\n        if (!this.privHypothesisReceived) {\r\n            this.privHypothesisReceived = true;\r\n            this.privServiceTelemetryListener.hypothesisReceived(this.privAudioNode.findTimeAtOffset(offset));\r\n        }\r\n    }\r\n\r\n    public onPhraseRecognized(offset: number): void {\r\n        this.privServiceTelemetryListener.phraseReceived(this.privAudioNode.findTimeAtOffset(offset));\r\n        this.onServiceRecognized(offset);\r\n    }\r\n\r\n    public onServiceRecognized(offset: number): void {\r\n        this.privLastRecoOffset = offset;\r\n        this.privHypothesisReceived = false;\r\n        this.privAudioNode.shrinkBuffers(offset);\r\n        this.privConnectionAttempts = 0;\r\n    }\r\n\r\n    public onAudioSent(bytesSent: number): void {\r\n        this.privBytesSent += bytesSent;\r\n        this.privRecognitionBytesSent += bytesSent;\r\n    }\r\n\r\n    public onRetryConnection(): void {\r\n        this.privConnectionAttempts++;\r\n    }\r\n\r\n    public async dispose(): Promise<void> {\r\n        if (!this.privIsDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.privIsDisposed = true;\r\n            for (const detachable of this.privDetachables) {\r\n                await detachable.detach();\r\n            }\r\n\r\n            if (!!this.privServiceTelemetryListener) {\r\n                this.privServiceTelemetryListener.dispose();\r\n            }\r\n            this.privIsRecognizing = false;\r\n        }\r\n    }\r\n\r\n    public getTelemetry(): string {\r\n        if (this.privServiceTelemetryListener.hasTelemetry) {\r\n            return this.privServiceTelemetryListener.getTelemetry();\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public async onStopRecognizing(): Promise<void> {\r\n        await this.onComplete();\r\n    }\r\n\r\n    // Should be called with the audioNode for this session has indicated that it is out of speech.\r\n    public onSpeechEnded(): void {\r\n        this.privIsSpeechEnded = true;\r\n    }\r\n\r\n    protected onEvent(event: SpeechRecognitionEvent): void {\r\n        if (!!this.privServiceTelemetryListener) {\r\n            this.privServiceTelemetryListener.onEvent(event);\r\n        }\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private async onComplete(): Promise<void> {\r\n        if (!!this.privIsRecognizing) {\r\n            this.privIsRecognizing = false;\r\n            await this.detachAudioNode();\r\n        }\r\n    }\r\n\r\n    private async detachAudioNode(): Promise<void> {\r\n        if (!this.privIsAudioNodeDetached) {\r\n            this.privIsAudioNodeDetached = true;\r\n            if (this.privAudioNode) {\r\n                await this.privAudioNode.detach();\r\n            }\r\n        }\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    DynamicGrammarBuilder,\r\n    IDynamicGrammar,\r\n} from \"./Exports.js\";\r\n\r\ninterface Context {\r\n    [section: string]: any;\r\n}\r\n\r\ninterface PhraseContext {\r\n    [section: string]: any;\r\n    phraseDetection?: {\r\n        enrichment?: {\r\n            pronunciationAssessment: any;\r\n            contentAssessment?: {\r\n                topic: string;\r\n            };\r\n        };\r\n        speakerDiarization?: {\r\n            mode?: string;\r\n            audioSessionId?: string;\r\n            audioOffsetMs?: number;\r\n            identityProvider?: string;\r\n        };\r\n        mode?: string;\r\n    };\r\n    phraseOutput?: {\r\n        detailed?: {\r\n            options?: string[];\r\n        };\r\n        format?: any;\r\n    };\r\n}\r\n\r\n/**\r\n * Represents the JSON used in the speech.context message sent to the speech service.\r\n * The dynamic grammar is always refreshed from the encapsulated dynamic grammar object.\r\n */\r\nexport class SpeechContext {\r\n    private privContext: PhraseContext = {};\r\n    private privDynamicGrammar: DynamicGrammarBuilder;\r\n\r\n    public constructor(dynamicGrammar: DynamicGrammarBuilder) {\r\n        this.privDynamicGrammar = dynamicGrammar;\r\n    }\r\n\r\n    /**\r\n     * Gets a section of the speech.context object.\r\n     * @param sectionName Name of the section to get.\r\n     * @return string or Context JSON serializable object that represents the value.\r\n     */\r\n    public getSection(sectionName: string): string | Context {\r\n        return (this.privContext[sectionName] || {}) as string | Context;\r\n    }\r\n\r\n    /**\r\n     * Adds a section to the speech.context object.\r\n     * @param sectionName Name of the section to add.\r\n     * @param value JSON serializable object that represents the value.\r\n     */\r\n    public setSection(sectionName: string, value: string | Context): void {\r\n        this.privContext[sectionName] = value;\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * This is only used by pronunciation assessment config.\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public setPronunciationAssessmentParams(params: string,\r\n        contentAssessmentTopic: string,\r\n        isSpeakerDiarizationEnabled: boolean = false): void {\r\n        if (this.privContext.phraseDetection === undefined) {\r\n            this.privContext.phraseDetection = {\r\n                enrichment: {\r\n                    pronunciationAssessment: {}\r\n                }\r\n            };\r\n        }\r\n        if (this.privContext.phraseDetection.enrichment === undefined) {\r\n            this.privContext.phraseDetection.enrichment = {\r\n                pronunciationAssessment: {}\r\n            };\r\n        }\r\n        this.privContext.phraseDetection.enrichment.pronunciationAssessment = JSON.parse(params) as Context;\r\n        if (isSpeakerDiarizationEnabled) {\r\n            this.privContext.phraseDetection.mode = \"Conversation\";\r\n        }\r\n        this.setWordLevelTimings();\r\n        this.privContext.phraseOutput.detailed.options.push(\"PronunciationAssessment\");\r\n        if (this.privContext.phraseOutput.detailed.options.indexOf(\"SNR\") === -1) {\r\n            this.privContext.phraseOutput.detailed.options.push(\"SNR\");\r\n        }\r\n        if (!!contentAssessmentTopic) {\r\n            this.privContext.phraseDetection.enrichment.contentAssessment = {\r\n                topic: contentAssessmentTopic\r\n            };\r\n            this.privContext.phraseOutput.detailed.options.push(\"ContentAssessment\");\r\n        }\r\n    }\r\n\r\n    public setDetailedOutputFormat(): void {\r\n        if (this.privContext.phraseOutput === undefined) {\r\n            this.privContext.phraseOutput = {\r\n                detailed: {\r\n                    options: []\r\n                },\r\n                format: {}\r\n            };\r\n        }\r\n        if (this.privContext.phraseOutput.detailed === undefined) {\r\n            this.privContext.phraseOutput.detailed = {\r\n                options: []\r\n            };\r\n        }\r\n        this.privContext.phraseOutput.format = \"Detailed\";\r\n    }\r\n\r\n    public setWordLevelTimings(): void {\r\n        if (this.privContext.phraseOutput === undefined) {\r\n            this.privContext.phraseOutput = {\r\n                detailed: {\r\n                    options: []\r\n                },\r\n                format: {}\r\n            };\r\n        }\r\n        if (this.privContext.phraseOutput.detailed === undefined) {\r\n            this.privContext.phraseOutput.detailed = {\r\n                options: []\r\n            };\r\n        }\r\n        this.privContext.phraseOutput.format = \"Detailed\";\r\n        if (this.privContext.phraseOutput.detailed.options.indexOf(\"WordTimings\") === -1) {\r\n            this.privContext.phraseOutput.detailed.options.push(\"WordTimings\");\r\n        }\r\n    }\r\n\r\n    public setSpeakerDiarizationAudioOffsetMs(audioOffsetMs: number): void {\r\n        this.privContext.phraseDetection.speakerDiarization.audioOffsetMs = audioOffsetMs;\r\n    }\r\n\r\n    public toJSON(): string {\r\n\r\n        const dgi: IDynamicGrammar = this.privDynamicGrammar.generateGrammarObject();\r\n        this.setSection(\"dgi\", dgi);\r\n\r\n        const ret: string = JSON.stringify(this.privContext);\r\n        return ret;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IDynamicGrammar,\r\n    IDynamicGrammarGeneric,\r\n} from \"./Exports.js\";\r\n\r\n/**\r\n * Responsible for building the object to be sent to the speech service to support dynamic grammars.\r\n * @class DynamicGrammarBuilder\r\n */\r\nexport class DynamicGrammarBuilder {\r\n\r\n    private privPhrases: string[];\r\n    private privGrammars: string[];\r\n\r\n    // Adds one more reference phrases to the dynamic grammar to send.\r\n    // All added phrases are generic phrases.\r\n    public addPhrase(phrase: string | string[]): void {\r\n        if (!this.privPhrases) {\r\n            this.privPhrases = [];\r\n        }\r\n\r\n        if (phrase instanceof Array) {\r\n            this.privPhrases = this.privPhrases.concat(phrase);\r\n        } else {\r\n            this.privPhrases.push(phrase);\r\n        }\r\n    }\r\n\r\n    // Clears all phrases stored in the current object.\r\n    public clearPhrases(): void {\r\n        this.privPhrases = undefined;\r\n    }\r\n\r\n    // Adds one or more reference grammars to the current grammar.\r\n    public addReferenceGrammar(grammar: string | string[]): void {\r\n        if (!this.privGrammars) {\r\n            this.privGrammars = [];\r\n        }\r\n\r\n        if (grammar instanceof Array) {\r\n            this.privGrammars = this.privGrammars.concat(grammar);\r\n        } else {\r\n            this.privGrammars.push(grammar);\r\n        }\r\n    }\r\n\r\n    // clears all grammars stored on the recognizer.\r\n    public clearGrammars(): void {\r\n        this.privGrammars = undefined;\r\n    }\r\n\r\n    // Generates an object that represents the dynamic grammar used by the Speech Service.\r\n    // This is done by building an object with the correct layout based on the phrases and reference grammars added to this instance\r\n    // of a DynamicGrammarBuilder\r\n    public generateGrammarObject(): IDynamicGrammar {\r\n        if (this.privGrammars === undefined && this.privPhrases === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        const retObj: IDynamicGrammar = {};\r\n        retObj.ReferenceGrammars = this.privGrammars;\r\n\r\n        if (undefined !== this.privPhrases && 0 !== this.privPhrases.length) {\r\n            const retPhrases: IDynamicGrammarGeneric[] = [];\r\n\r\n            this.privPhrases.forEach((value: string): void => {\r\n                retPhrases.push({\r\n                    Text: value,\r\n                });\r\n            });\r\n\r\n            retObj.Groups = [{ Type: \"Generic\", Items: retPhrases }];\r\n        }\r\n\r\n        return retObj;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// response\r\n\r\nexport interface IActivityPayloadResponse {\r\n    conversationId: string;\r\n    messageDataStreamType: number;\r\n    messagePayload: string | object;\r\n    version: number;\r\n}\r\n\r\nexport class ActivityPayloadResponse implements IActivityPayloadResponse {\r\n    private privActivityResponse: IActivityPayloadResponse;\r\n\r\n    private constructor(json: string) {\r\n        this.privActivityResponse = JSON.parse(json) as IActivityPayloadResponse;\r\n    }\r\n\r\n    public static fromJSON(json: string): ActivityPayloadResponse {\r\n        return new ActivityPayloadResponse(json);\r\n    }\r\n\r\n    public get conversationId(): string {\r\n        return this.privActivityResponse.conversationId;\r\n    }\r\n\r\n    public get messageDataStreamType(): number {\r\n        return this.privActivityResponse.messageDataStreamType;\r\n    }\r\n\r\n    public get messagePayload(): string | object {\r\n        return this.privActivityResponse.messagePayload;\r\n    }\r\n\r\n    public get version(): number {\r\n        return this.privActivityResponse.version;\r\n    }\r\n}\r\n\r\nexport enum MessageDataStreamType {\r\n    None = 0,\r\n    TextToSpeechAudio = 1,\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat.js\";\r\nimport { AudioOutputStream, PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream.js\";\r\nimport { DialogServiceTurnStateManager } from \"./DialogServiceTurnStateManager.js\";\r\nimport { ActivityPayloadResponse, MessageDataStreamType } from \"./ServiceMessages/ActivityResponsePayload.js\";\r\n\r\nexport class DialogServiceTurnState {\r\n    private privRequestId: string;\r\n    private privIsCompleted: boolean;\r\n    private privAudioStream: PullAudioOutputStreamImpl;\r\n    private privTimeoutToken: any;\r\n    private privTurnManager: DialogServiceTurnStateManager;\r\n\r\n    public constructor(manager: DialogServiceTurnStateManager, requestId: string) {\r\n        this.privRequestId = requestId;\r\n        this.privIsCompleted = false;\r\n        this.privAudioStream = null;\r\n        this.privTurnManager = manager;\r\n        this.resetTurnEndTimeout();\r\n    }\r\n\r\n    public get audioStream(): PullAudioOutputStreamImpl {\r\n        // Called when is needed to stream.\r\n        this.resetTurnEndTimeout();\r\n        return this.privAudioStream;\r\n    }\r\n\r\n    public processActivityPayload(payload: ActivityPayloadResponse, audioFormat?: AudioOutputFormatImpl): PullAudioOutputStreamImpl {\r\n        if (payload.messageDataStreamType === MessageDataStreamType.TextToSpeechAudio) {\r\n            this.privAudioStream = AudioOutputStream.createPullStream() as PullAudioOutputStreamImpl;\r\n            this.privAudioStream.format = (audioFormat !== undefined) ? audioFormat : AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        return this.privAudioStream;\r\n    }\r\n\r\n    public endAudioStream(): void {\r\n        if (this.privAudioStream !== null && !this.privAudioStream.isClosed) {\r\n            this.privAudioStream.close();\r\n        }\r\n    }\r\n\r\n    public complete(): void {\r\n        if (this.privTimeoutToken !== undefined) {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n            clearTimeout(this.privTimeoutToken);\r\n        }\r\n        this.endAudioStream();\r\n    }\r\n\r\n    private resetTurnEndTimeout(): void {\r\n        if (this.privTimeoutToken !== undefined) {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n            clearTimeout(this.privTimeoutToken);\r\n        }\r\n        this.privTimeoutToken = setTimeout((): void => {\r\n            this.privTurnManager.CompleteTurn(this.privRequestId);\r\n            return;\r\n        }, 2000);\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"../common/Error.js\";\r\nimport { DialogServiceTurnState } from \"./DialogServiceTurnState.js\";\r\n\r\nexport class DialogServiceTurnStateManager {\r\n    private privTurnMap: Map<string, DialogServiceTurnState>;\r\n\r\n    public constructor() {\r\n        this.privTurnMap = new Map<string, DialogServiceTurnState>();\r\n        return;\r\n    }\r\n\r\n    public StartTurn(id: string): DialogServiceTurnState {\r\n        if (this.privTurnMap.has(id)) {\r\n            throw new InvalidOperationError(\"Service error: There is already a turn with id:\" + id);\r\n        }\r\n        const turnState: DialogServiceTurnState = new DialogServiceTurnState(this, id);\r\n        this.privTurnMap.set(id, turnState);\r\n        return this.privTurnMap.get(id);\r\n    }\r\n\r\n    public GetTurn(id: string): DialogServiceTurnState {\r\n        return this.privTurnMap.get(id);\r\n    }\r\n\r\n    public CompleteTurn(id: string): DialogServiceTurnState {\r\n        if (!this.privTurnMap.has(id)) {\r\n            throw new InvalidOperationError(\"Service error: Received turn end for an unknown turn id:\" + id);\r\n        }\r\n        const turnState = this.privTurnMap.get(id);\r\n        turnState.complete();\r\n        this.privTurnMap.delete(id);\r\n        return turnState;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ReplayableAudioNode\r\n} from \"../common.browser/Exports.js\";\r\nimport { SendingAgentContextMessageEvent } from \"../common/DialogEvents.js\";\r\nimport {\r\n    BackgroundEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    createGuid,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    DialogEvent,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    MessageType,\r\n    ServiceEvent,\r\n} from \"../common/Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat.js\";\r\nimport { PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream.js\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat.js\";\r\nimport {\r\n    ActivityReceivedEventArgs,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    DialogServiceConfig,\r\n    DialogServiceConnector,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    ResultReason,\r\n    SessionEventArgs,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n    TurnStatusReceivedEventArgs,\r\n} from \"../sdk/Exports.js\";\r\nimport { DialogServiceTurnStateManager } from \"./DialogServiceTurnStateManager.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    EnumTranslation,\r\n    ISpeechConfigAudioDevice,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechDetected,\r\n    SpeechHypothesis,\r\n    SpeechKeyword,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognitionMode, RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { ActivityPayloadResponse } from \"./ServiceMessages/ActivityResponsePayload.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\nexport class DialogServiceAdapter extends ServiceRecognizerBase {\r\n    private privDialogServiceConnector: DialogServiceConnector;\r\n\r\n    private privDialogAudioSource: IAudioSource;\r\n\r\n    private privConnectionLoop: Promise<void>;\r\n    private terminateMessageLoop: boolean;\r\n    private agentConfigSent: boolean;\r\n    private privLastResult: SpeechRecognitionResult;\r\n    private privEvents: EventSource<DialogEvent>;\r\n\r\n    // Turns are of two kinds:\r\n    // 1: SR turns, end when the SR result is returned and then turn end.\r\n    // 2: Service turns where an activity is sent by the service along with the audio.\r\n    private privTurnStateManager: DialogServiceTurnStateManager;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        dialogServiceConnector: DialogServiceConnector) {\r\n\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, dialogServiceConnector);\r\n\r\n        this.privEvents = new EventSource<DialogEvent>();\r\n        this.privDialogServiceConnector = dialogServiceConnector;\r\n        this.receiveMessageOverride = (): Promise<void> => this.receiveDialogMessageOverride();\r\n        this.privTurnStateManager = new DialogServiceTurnStateManager();\r\n        this.recognizeOverride =\r\n            (recoMode: RecognitionMode, successCallback: (e: SpeechRecognitionResult) => void, errorCallback: (e: string) => void): Promise<void> =>\r\n            this.listenOnce(recoMode, successCallback, errorCallback);\r\n        this.postConnectImplOverride = (connection: Promise<IConnection>): Promise<IConnection> => this.dialogConnectImpl(connection);\r\n        this.configConnectionOverride = (connection: IConnection): Promise<IConnection> => this.configConnection(connection);\r\n        this.disconnectOverride = (): Promise<void> => this.privDisconnect();\r\n        this.privDialogAudioSource = audioSource;\r\n\r\n        this.agentConfigSent = false;\r\n        this.privLastResult = null;\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                this.terminateMessageLoop = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    public async sendMessage(message: string): Promise<void> {\r\n        const interactionGuid: string = createGuid();\r\n        const requestId: string = createNoDashGuid();\r\n\r\n        const agentMessage: any = {\r\n            context: {\r\n                interactionId: interactionGuid\r\n            },\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n            messagePayload: JSON.parse(message),\r\n            version: 0.5\r\n        };\r\n\r\n        const agentMessageJson = JSON.stringify(agentMessage);\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"agent\",\r\n            requestId,\r\n            \"application/json\",\r\n            agentMessageJson));\r\n\r\n    }\r\n\r\n    protected async privDisconnect(): Promise<void> {\r\n        await this.cancelRecognition(this.privRequestSession.sessionId,\r\n            this.privRequestSession.requestId,\r\n            CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        this.terminateMessageLoop = true;\r\n        this.agentConfigSent = false;\r\n        return;\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        let result: SpeechRecognitionResult;\r\n        let processed: boolean;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.phrase\":\r\n                const speechPhrase: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + speechPhrase.Offset + speechPhrase.Duration);\r\n\r\n                if (speechPhrase.RecognitionStatus !== RecognitionStatus.TooManyRequests && speechPhrase.RecognitionStatus !== RecognitionStatus.Error) {\r\n                    const args: SpeechRecognitionEventArgs = this.fireEventForResult(speechPhrase, resultProps);\r\n                    this.privLastResult = args.result;\r\n\r\n                    if (!!this.privDialogServiceConnector.recognized) {\r\n                        try {\r\n                            this.privDialogServiceConnector.recognized(this.privDialogServiceConnector, args);\r\n                            /* eslint-disable no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.hypothesis\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    undefined,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privDialogServiceConnector.recognizing) {\r\n                    try {\r\n                        this.privDialogServiceConnector.recognizing(this.privDialogServiceConnector, ev);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.keyword\":\r\n                const keyword: SpeechKeyword = SpeechKeyword.fromJSON(connectionMessage.textBody);\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    keyword.Status === \"Accepted\" ? ResultReason.RecognizedKeyword : ResultReason.NoMatch,\r\n                    keyword.Text,\r\n                    keyword.Duration,\r\n                    keyword.Offset,\r\n                    undefined,\r\n                    undefined,\r\n                    undefined,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                if (keyword.Status !== \"Accepted\") {\r\n                    this.privLastResult = result;\r\n                }\r\n\r\n                const event = new SpeechRecognitionEventArgs(result, result.duration, result.resultId);\r\n\r\n                if (!!this.privDialogServiceConnector.recognized) {\r\n                    try {\r\n                        this.privDialogServiceConnector.recognized(this.privDialogServiceConnector, event);\r\n                        /* eslint-disable no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"audio\":\r\n                {\r\n                    const audioRequestId = connectionMessage.requestId.toUpperCase();\r\n                    const turn = this.privTurnStateManager.GetTurn(audioRequestId);\r\n                    try {\r\n                        // Empty binary message signals end of stream.\r\n                        if (!connectionMessage.binaryBody) {\r\n                            turn.endAudioStream();\r\n                        } else {\r\n                            turn.audioStream.write(connectionMessage.binaryBody);\r\n                        }\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n\r\n            case \"response\":\r\n                {\r\n                    this.handleResponseMessage(connectionMessage);\r\n\r\n                }\r\n                processed = true;\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n        const defferal = new Deferred<boolean>();\r\n        defferal.resolve(processed);\r\n        return defferal.promise;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected async cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): Promise<void> {\r\n\r\n        this.terminateMessageLoop = true;\r\n\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n        }\r\n\r\n        if (!!this.privDialogServiceConnector.canceled) {\r\n            const properties: PropertyCollection = new PropertyCollection();\r\n            properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n            const cancelEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n\r\n            try {\r\n                this.privDialogServiceConnector.canceled(this.privDialogServiceConnector, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n\r\n            if (!!this.privSuccessCallback) {\r\n                const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                    undefined, // ResultId\r\n                    ResultReason.Canceled,\r\n                    undefined, // Text\r\n                    undefined, // Duration\r\n                    undefined, // Offset\r\n                    undefined, // Language\r\n                    undefined, // Language Detection Confidence\r\n                    undefined, // Speaker Id\r\n                    error,\r\n                    undefined, // Json\r\n                    properties);\r\n                try {\r\n                    this.privSuccessCallback(result);\r\n                    this.privSuccessCallback = undefined;\r\n                    /* eslint-disable no-empty */\r\n                } catch { }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected async listenOnce(\r\n        recoMode: RecognitionMode,\r\n        successCallback: (e: SpeechRecognitionResult) => void,\r\n        errorCallback: (e: string) => void\r\n    ): Promise<void> {\r\n        this.privRecognizerConfig.recognitionMode = recoMode;\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallback;\r\n\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privDialogAudioSource.events);\r\n\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.Speech_SessionId, this.privRequestSession.sessionId);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n\r\n        const preAudioPromise: Promise<void> = this.sendPreAudioMessages();\r\n\r\n        const node: IAudioStreamNode = await this.privDialogAudioSource.attach(this.privRequestSession.audioNodeId);\r\n        const format: AudioStreamFormatImpl = await this.privDialogAudioSource.format;\r\n        const deviceInfo: ISpeechConfigAudioDevice = await this.privDialogAudioSource.deviceInfo;\r\n\r\n        const audioNode = new ReplayableAudioNode(node, format.avgBytesPerSec);\r\n        await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n\r\n        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        try {\r\n            await conPromise;\r\n            await preAudioPromise;\r\n        } catch (error) {\r\n            await this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error as string);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        // /* eslint-disable no-empty */\r\n        audioSendPromise.then((): void => { /* add? return true;*/ }, async (error: string): Promise<void> => {\r\n            await this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n    }\r\n\r\n    // Establishes a websocket connection to the end point.\r\n    private dialogConnectImpl(connection: Promise<IConnection>): Promise<IConnection> {\r\n        this.privConnectionLoop = this.startMessageLoop();\r\n        return connection;\r\n    }\r\n\r\n    private receiveDialogMessageOverride(): Promise<void> {\r\n\r\n        // we won't rely on the cascading promises of the connection since we want to continually be available to receive messages\r\n        const communicationCustodian: Deferred<void> = new Deferred<void>();\r\n\r\n        const loop = async (): Promise<void> => {\r\n            try {\r\n                const isDisposed: boolean = this.isDisposed();\r\n                const terminateMessageLoop = (!this.isDisposed() && this.terminateMessageLoop);\r\n                if (isDisposed || terminateMessageLoop) {\r\n                    // We're done.\r\n                    communicationCustodian.resolve(undefined);\r\n                    return;\r\n                }\r\n\r\n                const connection: IConnection = await this.fetchConnection();\r\n                const message: ConnectionMessage = await connection.read();\r\n\r\n                if (!message) {\r\n                    return loop();\r\n                }\r\n\r\n                const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        {\r\n                            const turnRequestId = connectionMessage.requestId.toUpperCase();\r\n                            const audioSessionReqId = this.privRequestSession.requestId.toUpperCase();\r\n\r\n                            // turn started by the service\r\n                            if (turnRequestId !== audioSessionReqId) {\r\n                                this.privTurnStateManager.StartTurn(turnRequestId);\r\n                            } else {\r\n                                this.privRequestSession.onServiceTurnStartResponse();\r\n                            }\r\n                        }\r\n                        break;\r\n\r\n                    case \"speech.startdetected\":\r\n                        const speechStartDetected: SpeechDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\r\n\r\n                        const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privRecognizer.speechStartDetected) {\r\n                            this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\r\n                        }\r\n\r\n                        break;\r\n\r\n                    case \"speech.enddetected\":\r\n\r\n                        let json: string;\r\n\r\n                        if (connectionMessage.textBody.length > 0) {\r\n                            json = connectionMessage.textBody;\r\n                        } else {\r\n                            // If the request was empty, the JSON returned is empty.\r\n                            json = \"{ Offset: 0 }\";\r\n                        }\r\n\r\n                        const speechStopDetected: SpeechDetected = SpeechDetected.fromJSON(json);\r\n\r\n                        this.privRequestSession.onServiceRecognized(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset);\r\n\r\n                        const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privRecognizer.speechEndDetected) {\r\n                            this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"turn.end\":\r\n                        {\r\n                            const turnEndRequestId = connectionMessage.requestId.toUpperCase();\r\n\r\n                            const audioSessionReqId = this.privRequestSession.requestId.toUpperCase();\r\n\r\n                            // turn started by the service\r\n                            if (turnEndRequestId !== audioSessionReqId) {\r\n                                this.privTurnStateManager.CompleteTurn(turnEndRequestId);\r\n                            } else {\r\n                                // Audio session turn\r\n\r\n                                const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n                                await this.privRequestSession.onServiceTurnEndResponse(false);\r\n\r\n                                if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {\r\n                                    if (!!this.privRecognizer.sessionStopped) {\r\n                                        this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\r\n                                    }\r\n                                }\r\n\r\n                                // report result to promise.\r\n                                if (!!this.privSuccessCallback && this.privLastResult) {\r\n                                    try {\r\n                                        this.privSuccessCallback(this.privLastResult);\r\n                                        this.privLastResult = null;\r\n                                    } catch (e) {\r\n                                        if (!!this.privErrorCallback) {\r\n                                            this.privErrorCallback(e as string);\r\n                                        }\r\n                                    }\r\n                                    // Only invoke the call back once.\r\n                                    // and if it's successful don't invoke the\r\n                                    // error after that.\r\n                                    this.privSuccessCallback = undefined;\r\n                                    this.privErrorCallback = undefined;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        try {\r\n                            const processed = await this.processTypeSpecificMessages(connectionMessage);\r\n                            if (!processed) {\r\n                                if (!!this.serviceEvents) {\r\n                                    this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                                }\r\n                            }\r\n                        } catch (e) {\r\n                            //\r\n                        }\r\n                }\r\n                const ret: Promise<void> = loop();\r\n\r\n                return ret;\r\n            } catch (error) {\r\n                this.terminateMessageLoop = true;\r\n                communicationCustodian.resolve();\r\n            }\r\n        };\r\n\r\n        loop().catch((reason: string): void => {\r\n            Events.instance.onEvent(new BackgroundEvent(reason));\r\n        });\r\n\r\n        return communicationCustodian.promise;\r\n    }\r\n\r\n    private async startMessageLoop(): Promise<void> {\r\n\r\n        this.terminateMessageLoop = false;\r\n\r\n        try {\r\n            await this.receiveDialogMessageOverride();\r\n        } catch (error) {\r\n            await this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error as string);\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configConnection(connection: IConnection): Promise<IConnection> {\r\n        if (this.terminateMessageLoop) {\r\n            this.terminateMessageLoop = false;\r\n            return Promise.reject(\"Connection to service terminated.\");\r\n        }\r\n\r\n        await this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize());\r\n        await this.sendAgentConfig(connection);\r\n        return connection;\r\n    }\r\n\r\n    private async sendPreAudioMessages(): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.addKeywordContextData();\r\n        await this.sendSpeechContext(connection, true);\r\n        await this.sendAgentContext(connection);\r\n        await this.sendWaveHeader(connection);\r\n    }\r\n\r\n    private sendAgentConfig(connection: IConnection): Promise<void> {\r\n        if (this.agentConfig && !this.agentConfigSent) {\r\n\r\n            if (this.privRecognizerConfig\r\n                .parameters\r\n                .getProperty(PropertyId.Conversation_DialogType) === DialogServiceConfig.DialogTypes.CustomCommands) {\r\n                const config = this.agentConfig.get();\r\n                config.botInfo.commandsCulture = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-us\");\r\n                this.agentConfig.set(config);\r\n            }\r\n            this.onEvent(new SendingAgentContextMessageEvent(this.agentConfig));\r\n\r\n            const agentConfigJson = this.agentConfig.toJsonString();\r\n\r\n            // guard against sending this multiple times on one connection\r\n            this.agentConfigSent = true;\r\n\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"agent.config\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                agentConfigJson));\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    private sendAgentContext(connection: IConnection): Promise<void> {\r\n        const guid: string = createGuid();\r\n\r\n        const speechActivityTemplate = this.privDialogServiceConnector.properties.getProperty(PropertyId.Conversation_Speech_Activity_Template);\r\n\r\n        const agentContext: any = {\r\n            channelData: \"\",\r\n            context: {\r\n                interactionId: guid\r\n            },\r\n            messagePayload: typeof speechActivityTemplate === undefined ? undefined : speechActivityTemplate,\r\n            version: 0.5\r\n        };\r\n\r\n        const agentContextJson = JSON.stringify(agentContext);\r\n\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speech.agent.context\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json\",\r\n            agentContextJson));\r\n    }\r\n\r\n    private fireEventForResult(serviceResult: SimpleSpeechPhrase, properties: PropertyCollection): SpeechRecognitionEventArgs {\r\n        const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(serviceResult.RecognitionStatus);\r\n\r\n        const offset: number = serviceResult.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n        const result = new SpeechRecognitionResult(\r\n            this.privRequestSession.requestId,\r\n            resultReason,\r\n            serviceResult.DisplayText,\r\n            serviceResult.Duration,\r\n            offset,\r\n            serviceResult.Language,\r\n            serviceResult.LanguageDetectionConfidence,\r\n            undefined,\r\n            undefined,\r\n            JSON.stringify(serviceResult),\r\n            properties);\r\n\r\n        const ev = new SpeechRecognitionEventArgs(result, offset, this.privRequestSession.sessionId);\r\n        return ev;\r\n    }\r\n\r\n    private handleResponseMessage(responseMessage: SpeechConnectionMessage): void {\r\n        // \"response\" messages can contain either \"message\" (activity) or \"MessageStatus\" data. Fire the appropriate\r\n        // event according to the message type that's specified.\r\n        const responsePayload: { messageType: string } = JSON.parse(responseMessage.textBody) as { messageType: string };\r\n        switch (responsePayload.messageType.toLowerCase()) {\r\n            case \"message\":\r\n                const responseRequestId = responseMessage.requestId.toUpperCase();\r\n                const activityPayload: ActivityPayloadResponse = ActivityPayloadResponse.fromJSON(responseMessage.textBody);\r\n                const turn = this.privTurnStateManager.GetTurn(responseRequestId);\r\n\r\n                // update the conversation Id\r\n                if (activityPayload.conversationId) {\r\n                    const updateAgentConfig = this.agentConfig.get();\r\n                    updateAgentConfig.botInfo.conversationId = activityPayload.conversationId;\r\n                    this.agentConfig.set(updateAgentConfig);\r\n                }\r\n\r\n                const pullAudioOutputStream: PullAudioOutputStreamImpl = turn.processActivityPayload(\r\n                    activityPayload,\r\n                    AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(this.privDialogServiceConnector.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)));\r\n                const activity = new ActivityReceivedEventArgs(activityPayload.messagePayload, pullAudioOutputStream);\r\n                if (!!this.privDialogServiceConnector.activityReceived) {\r\n                    try {\r\n                        this.privDialogServiceConnector.activityReceived(this.privDialogServiceConnector, activity);\r\n                        /* eslint-disable-next-line no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case \"messagestatus\":\r\n                if (!!this.privDialogServiceConnector.turnStatusReceived) {\r\n                    try {\r\n                        this.privDialogServiceConnector.turnStatusReceived(\r\n                            this.privDialogServiceConnector,\r\n                            new TurnStatusReceivedEventArgs(responseMessage.textBody));\r\n                        /* eslint-disable-next-line no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                break;\r\n\r\n            default:\r\n                Events.instance.onEvent(\r\n                    new BackgroundEvent(`Unexpected response of type ${responsePayload.messageType}. Ignoring.`));\r\n                break;\r\n        }\r\n    }\r\n\r\n    private onEvent(event: DialogEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private addKeywordContextData(): void {\r\n        const keywordPropertyValue: string = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-KeywordsToDetect\");\r\n        if (keywordPropertyValue === undefined) {\r\n            return;\r\n        }\r\n\r\n        const keywordOffsetPropertyValue: string = this.privRecognizerConfig.parameters\r\n            .getProperty(\"SPEECH-KeywordsToDetect-Offsets\");\r\n        const keywordDurationPropertyValue: string = this.privRecognizerConfig.parameters\r\n            .getProperty(\"SPEECH-KeywordsToDetect-Durations\");\r\n\r\n        const keywords = keywordPropertyValue.split(\";\");\r\n        const keywordOffsets = keywordOffsetPropertyValue === undefined ? [] : keywordOffsetPropertyValue.split(\";\");\r\n        const keywordDurations = keywordDurationPropertyValue === undefined ? [] : keywordDurationPropertyValue.split(\";\");\r\n\r\n        const keywordDefinitionArray = [];\r\n        for (let i = 0; i < keywords.length; i++) {\r\n            const definition: { [section: string]: any } = {};\r\n            definition.text = keywords[i];\r\n            if (i < keywordOffsets.length) {\r\n                definition.offset = Number(keywordOffsets[i]);\r\n            }\r\n            if (i < keywordDurations.length) {\r\n                definition.duration = Number(keywordDurations[i]);\r\n            }\r\n            keywordDefinitionArray.push(definition);\r\n        }\r\n\r\n        this.speechContext.setSection(\"invocationSource\", \"VoiceActivationWithKeyword\");\r\n        this.speechContext.setSection(\"keywordDetection\", [{\r\n            clientDetectedKeywords: keywordDefinitionArray,\r\n            onReject: { action: \"EndOfTurn\" },\r\n            type: \"startTrigger\"\r\n        }]);\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Represents the JSON used in the agent.config message sent to the speech service.\r\n */\r\nexport class AgentConfig {\r\n    private iPrivConfig: IAgentConfig;\r\n\r\n    public toJsonString(): string {\r\n        return JSON.stringify(this.iPrivConfig);\r\n    }\r\n\r\n    public get(): IAgentConfig {\r\n        return this.iPrivConfig;\r\n    }\r\n\r\n    /**\r\n     * Setter for the agent.config object.\r\n     * @param value a JSON serializable object.\r\n     */\r\n    public set(value: IAgentConfig): void {\r\n        this.iPrivConfig = value;\r\n    }\r\n}\r\n\r\nexport interface IAgentConfig {\r\n    botInfo: {\r\n        commType: string;\r\n        connectionId: string;\r\n        conversationId: string;\r\n        fromId: string;\r\n        commandsCulture: string;\r\n        ttsAudioFormat: string;\r\n    };\r\n    version: number;\r\n}\r\n", "\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    RestConfigBase\r\n} from \"../../common.browser/RestConfigBase.js\";\r\n\r\nexport class ConversationConnectionConfig extends RestConfigBase {\r\n\r\n    private static readonly privHost: string = \"dev.microsofttranslator.com\";\r\n    private static readonly privRestPath: string = \"/capito/room\";\r\n    private static readonly privApiVersion: string = \"2.0\";\r\n    private static readonly privDefaultLanguageCode: string = \"en-US\";\r\n    private static readonly privClientAppId: string = \"FC539C22-1767-4F1F-84BC-B4D811114F15\";\r\n    private static readonly privWebSocketPath: string = \"/capito/translate\";\r\n    private static readonly privTranscriptionEventKeys: string[] = [\"iCalUid\", \"callId\", \"organizer\", \"FLAC\", \"MTUri\", \"DifferentiateGuestSpeakers\", \"audiorecording\", \"Threadid\", \"OrganizerMri\", \"OrganizerTenantId\", \"UserToken\"];\r\n\r\n    public static get host(): string {\r\n        return ConversationConnectionConfig.privHost;\r\n    }\r\n\r\n    public static get apiVersion(): string {\r\n        return ConversationConnectionConfig.privApiVersion;\r\n    }\r\n\r\n    public static get clientAppId(): string {\r\n        return ConversationConnectionConfig.privClientAppId;\r\n    }\r\n\r\n    public static get defaultLanguageCode(): string {\r\n        return ConversationConnectionConfig.privDefaultLanguageCode;\r\n    }\r\n\r\n    public static get restPath(): string {\r\n        return ConversationConnectionConfig.privRestPath;\r\n    }\r\n\r\n    public static get webSocketPath(): string {\r\n        return ConversationConnectionConfig.privWebSocketPath;\r\n    }\r\n\r\n    public static get transcriptionEventKeys(): string[] {\r\n        return ConversationConnectionConfig.privTranscriptionEventKeys;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IRequestOptions,\r\n    IRestParams,\r\n    IRestResponse,\r\n    RestMessageAdapter,\r\n    RestRequestType\r\n} from \"../../common.browser/Exports.js\";\r\nimport { IErrorMessages, IStringDictionary } from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport { PropertyCollection, PropertyId } from \"../../sdk/Exports.js\";\r\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig.js\";\r\nimport { IConversationResponseError, IInternalConversation } from \"./ConversationTranslatorInterfaces.js\";\r\n\r\nexport class ConversationManager {\r\n\r\n    private privRequestParams: IRestParams;\r\n    private privErrors: IErrorMessages;\r\n    private privHost: string;\r\n    private privApiVersion: string;\r\n    private privRestPath: string;\r\n    private privRestAdapter: RestMessageAdapter;\r\n\r\n    public constructor() {\r\n        //\r\n        this.privRequestParams = ConversationConnectionConfig.configParams;\r\n        this.privErrors = ConversationConnectionConfig.restErrors;\r\n        this.privHost = ConversationConnectionConfig.host;\r\n        this.privApiVersion = ConversationConnectionConfig.apiVersion;\r\n        this.privRestPath = ConversationConnectionConfig.restPath;\r\n        this.privRestAdapter = new RestMessageAdapter({});\r\n    }\r\n\r\n    /**\r\n     * Make a POST request to the Conversation Manager service endpoint to create or join a conversation.\r\n     * @param args\r\n     * @param conversationCode\r\n     * @param callback\r\n     * @param errorCallback\r\n     */\r\n    public createOrJoin(args: PropertyCollection, conversationCode: string, cb?: (c: any) => void, err?: (e: string) => void): void {\r\n\r\n        try {\r\n\r\n            Contracts.throwIfNullOrUndefined(args, \"args\");\r\n\r\n            const languageCode: string = args.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, ConversationConnectionConfig.defaultLanguageCode);\r\n            const nickname: string = args.getProperty(PropertyId.ConversationTranslator_Name, \"conversation_host\");\r\n            const endpointHost: string = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\r\n            const correlationId: string = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\r\n            const subscriptionKey: string = args.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n            const subscriptionRegion: string = args.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n            const authToken: string = args.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n\r\n            Contracts.throwIfNullOrWhitespace(languageCode, \"languageCode\");\r\n            Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n            Contracts.throwIfNullOrWhitespace(endpointHost, \"endpointHost\");\r\n\r\n            const queryParams: IStringDictionary<string> = {};\r\n            queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\r\n            queryParams[this.privRequestParams.languageCode] = languageCode;\r\n            queryParams[this.privRequestParams.nickname] = nickname;\r\n\r\n            const headers: IStringDictionary<string> = {};\r\n            if (correlationId) {\r\n                headers[this.privRequestParams.correlationId] = correlationId;\r\n            }\r\n            headers[this.privRequestParams.clientAppId] = ConversationConnectionConfig.clientAppId;\r\n\r\n            if (conversationCode !== undefined) {\r\n                queryParams[this.privRequestParams.roomId] = conversationCode;\r\n            } else {\r\n                Contracts.throwIfNullOrUndefined(subscriptionRegion, this.privErrors.authInvalidSubscriptionRegion);\r\n                headers[this.privRequestParams.subscriptionRegion] = subscriptionRegion;\r\n                if (subscriptionKey) {\r\n                    headers[this.privRequestParams.subscriptionKey] = subscriptionKey;\r\n                } else if (authToken) {\r\n                    headers[this.privRequestParams.authorization] = `Bearer ${authToken}`;\r\n                } else {\r\n                    Contracts.throwIfNullOrUndefined(subscriptionKey, this.privErrors.authInvalidSubscriptionKey);\r\n                }\r\n            }\r\n\r\n            const config: IRequestOptions = {};\r\n            config.headers = headers;\r\n            this.privRestAdapter.options = config;\r\n\r\n            const endpoint: string = `https://${endpointHost}${this.privRestPath}`;\r\n\r\n            // TODO: support a proxy and certificate validation\r\n            this.privRestAdapter.request(RestRequestType.Post, endpoint, queryParams, null).then((response: IRestResponse): void => {\r\n\r\n                const requestId: string = RestMessageAdapter.extractHeaderValue(this.privRequestParams.requestId, response.headers);\r\n\r\n                if (!response.ok) {\r\n                    if (!!err) {\r\n                        // get the error\r\n                        let errorMessage: string = this.privErrors.invalidCreateJoinConversationResponse.replace(\"{status}\", response.status.toString());\r\n                        let errMessageRaw: IConversationResponseError;\r\n                        try {\r\n                            errMessageRaw = JSON.parse(response.data) as IConversationResponseError;\r\n                            errorMessage += ` [${errMessageRaw.error.code}: ${errMessageRaw.error.message}]`;\r\n                        } catch (e) {\r\n                            errorMessage += ` [${response.data}]`;\r\n                        }\r\n                        if (requestId) {\r\n                            errorMessage += ` ${requestId}`;\r\n                        }\r\n\r\n                        err(errorMessage);\r\n                    }\r\n                    return;\r\n                }\r\n                const conversation: IInternalConversation = JSON.parse(response.data) as IInternalConversation;\r\n                if (conversation) {\r\n                    conversation.requestId = requestId;\r\n                }\r\n                if (!!cb) {\r\n                    try {\r\n                        cb(conversation);\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(e as string);\r\n                        }\r\n                    }\r\n                    cb = undefined;\r\n                }\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            }).catch( (): void => { });\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Make a DELETE request to the Conversation Manager service endpoint to leave the conversation.\r\n     * @param args\r\n     * @param sessionToken\r\n     * @param callback\r\n     */\r\n    public leave(args: PropertyCollection, sessionToken: string): Promise<void> {\r\n        return new Promise<void>((resolve: () => void, reject: (reason: string) => void): void => {\r\n            try {\r\n\r\n                Contracts.throwIfNullOrUndefined(args, this.privErrors.invalidArgs.replace(\"{arg}\", \"config\"));\r\n                Contracts.throwIfNullOrWhitespace(sessionToken, this.privErrors.invalidArgs.replace(\"{arg}\", \"token\"));\r\n\r\n                const endpointHost: string = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\r\n                const correlationId: string = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\r\n\r\n                const queryParams: IStringDictionary<string> = {};\r\n                queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\r\n                queryParams[this.privRequestParams.sessionToken] = sessionToken;\r\n\r\n                const headers: IStringDictionary<string> = {};\r\n                if (correlationId) {\r\n                    headers[this.privRequestParams.correlationId] = correlationId;\r\n                }\r\n\r\n                const config: IRequestOptions = {};\r\n                config.headers = headers;\r\n                this.privRestAdapter.options = config;\r\n\r\n                const endpoint: string = `https://${endpointHost}${this.privRestPath}`;\r\n\r\n                // TODO: support a proxy and certificate validation\r\n                this.privRestAdapter.request(RestRequestType.Delete, endpoint, queryParams, null).then((response: IRestResponse): void => {\r\n\r\n                    if (!response.ok) {\r\n                        // ignore errors on delete\r\n                    }\r\n\r\n                    resolve();\r\n                // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n                }).catch( (): void => {});\r\n\r\n            } catch (error) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    reject(typedError.name + \": \" + typedError.message);\r\n\r\n                } else {\r\n                    reject(error as string);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ConnectionMessage, IStringDictionary, MessageType } from \"../../common/Exports.js\";\r\n\r\nexport class ConversationConnectionMessage extends ConnectionMessage {\r\n    private privConversationMessageType: string;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        body: any,\r\n        headers?: IStringDictionary<string>,\r\n        id?: string) {\r\n            super(messageType, body, headers, id);\r\n            const json: { type: string } = JSON.parse(this.textBody) as { type: string };\r\n            if (json.type !== undefined) {\r\n                this.privConversationMessageType = json.type;\r\n            }\r\n    }\r\n\r\n    public get conversationMessageType(): string {\r\n        return this.privConversationMessageType;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionMessage,\r\n    Deferred,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    RawWebsocketMessage,\r\n} from \"../../common/Exports.js\";\r\nimport { ConversationConnectionMessage } from \"./ConversationConnectionMessage.js\";\r\n\r\n/**\r\n * Based off WebsocketMessageFormatter. The messages for Conversation Translator have some variations from the Speech messages.\r\n */\r\nexport class ConversationWebsocketMessageFormatter implements IWebsocketMessageFormatter {\r\n\r\n    /**\r\n     * Format incoming messages: text (speech partial/final, IM) or binary (tts)\r\n     */\r\n    public toConnectionMessage(message: RawWebsocketMessage): Promise<ConversationConnectionMessage> {\r\n        const deferral = new Deferred<ConversationConnectionMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const incomingMessage: ConversationConnectionMessage = new ConversationConnectionMessage(message.messageType, message.textContent, {}, message.id);\r\n                deferral.resolve(incomingMessage);\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                deferral.resolve(new ConversationConnectionMessage(message.messageType, message.binaryContent, undefined, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. Error: ${e as string}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n\r\n    /**\r\n     * Format outgoing messages: text (commands or IM)\r\n     */\r\n    public fromConnectionMessage(message: ConnectionMessage): Promise<RawWebsocketMessage> {\r\n\r\n        const deferral = new Deferred<RawWebsocketMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const payload = `${message.textBody ? message.textBody : \"\"}`;\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Text, payload, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. ${e as string}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ProxyInfo, WebsocketConnection } from \"../../common.browser/Exports.js\";\r\nimport { createGuid, IConnection, IStringDictionary } from \"../../common/Exports.js\";\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport { PropertyId } from \"../../sdk/Exports.js\";\r\nimport { ConnectionFactoryBase } from \"../ConnectionFactoryBase.js\";\r\nimport { AuthInfo, RecognizerConfig } from \"../Exports.js\";\r\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig.js\";\r\nimport { ConversationWebsocketMessageFormatter } from \"./ConversationWebsocketMessageFormatter.js\";\r\n\r\n/**\r\n * Create a connection to the Conversation Translator websocket for sending instant messages and commands, and for receiving translated messages.\r\n * The conversation must already have been started or joined.\r\n */\r\nexport class ConversationConnectionFactory extends ConnectionFactoryBase  {\r\n\r\n    public create(config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n\r\n        const endpointHost: string = config.parameters.getProperty(PropertyId.ConversationTranslator_Host, ConversationConnectionConfig.host);\r\n        const correlationId: string = config.parameters.getProperty(PropertyId.ConversationTranslator_CorrelationId, createGuid());\r\n\r\n        const endpoint: string = `wss://${endpointHost}${ConversationConnectionConfig.webSocketPath}`;\r\n        const token: string = config.parameters.getProperty(PropertyId.ConversationTranslator_Token, undefined);\r\n        Contracts.throwIfNullOrUndefined(token, \"token\");\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        queryParams[ConversationConnectionConfig.configParams.apiVersion] = ConversationConnectionConfig.apiVersion;\r\n        queryParams[ConversationConnectionConfig.configParams.token] = token;\r\n        queryParams[ConversationConnectionConfig.configParams.correlationId] = correlationId;\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, {}, new ConversationWebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    IDetachable,\r\n} from \"../../common/Exports.js\";\r\n\r\n/**\r\n * Placeholder class for the Conversation Request Session. Based off RequestSession.\r\n * TODO: define what telemetry is required.\r\n */\r\nexport class ConversationRequestSession {\r\n    private privIsDisposed: boolean = false;\r\n    private privDetachables: IDetachable[] = new Array<IDetachable>();\r\n    private privRequestId: string;\r\n    private privRequestCompletionDeferral: Deferred<void>;\r\n    private privSessionId: string;\r\n\r\n    public constructor(sessionId: string) {\r\n        this.privSessionId = sessionId;\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privRequestCompletionDeferral = new Deferred<void>();\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get completionPromise(): Promise<void> {\r\n        return this.privRequestCompletionDeferral.promise;\r\n    }\r\n\r\n    public onPreConnectionStart(authFetchEventId: string, connectionId: string): void {\r\n        this.privSessionId = connectionId;\r\n    }\r\n\r\n    public onAuthCompleted(isError: boolean): void {\r\n        if (isError) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onConnectionEstablishCompleted(statusCode: number): void {\r\n        if (statusCode === 200) {\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onServiceTurnEndResponse(continuousRecognition: boolean): void {\r\n        if (!continuousRecognition) {\r\n            this.onComplete();\r\n        } else {\r\n            this.privRequestId = createNoDashGuid();\r\n        }\r\n    }\r\n\r\n    public async dispose(): Promise<void> {\r\n        if (!this.privIsDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.privIsDisposed = true;\r\n            for (const detachable of this.privDetachables) {\r\n                await detachable.detach();\r\n            }\r\n        }\r\n    }\r\n\r\n    private onComplete(): void {\r\n        //\r\n    }\r\n\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/* eslint-disable max-classes-per-file */\r\nimport { ConversationTranslationResult, SessionEventArgs } from \"../../sdk/Exports.js\";\r\nimport { IInternalParticipant } from \"./ConversationTranslatorInterfaces.js\";\r\n\r\nexport class MuteAllEventArgs extends SessionEventArgs {\r\n    private privIsMuted: boolean;\r\n\r\n    public constructor(isMuted: boolean, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privIsMuted = isMuted;\r\n    }\r\n\r\n    public get isMuted(): boolean {\r\n        return this.privIsMuted;\r\n    }\r\n}\r\n\r\nexport class LockRoomEventArgs extends SessionEventArgs {\r\n    private privIsLocked: boolean;\r\n\r\n    public constructor(isLocked: boolean, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privIsLocked = isLocked;\r\n    }\r\n\r\n    public get isMuted(): boolean {\r\n        return this.privIsLocked;\r\n    }\r\n}\r\n\r\nexport class ParticipantEventArgs extends SessionEventArgs {\r\n    private privParticipant: IInternalParticipant;\r\n\r\n    public constructor(participant: IInternalParticipant, sessionId?: string) {\r\n        super(sessionId);\r\n        this.privParticipant = participant;\r\n    }\r\n\r\n    public get participant(): IInternalParticipant {\r\n        return this.privParticipant;\r\n    }\r\n}\r\n\r\nexport class ParticipantAttributeEventArgs extends SessionEventArgs {\r\n    private privValue: boolean | number | string | string[];\r\n    private privKey: string;\r\n    private privParticipantId: string;\r\n\r\n    public constructor(participantId: string, key: string, value: boolean | number | string |  string[], sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privKey = key;\r\n        this.privValue = value;\r\n        this.privParticipantId = participantId;\r\n    }\r\n\r\n    public get value(): boolean | number | string |  string[] {\r\n        return this.privValue;\r\n    }\r\n\r\n    public get key(): string {\r\n        return this.privKey;\r\n    }\r\n    public get id(): string {\r\n        return this.privParticipantId;\r\n    }\r\n}\r\n\r\nexport class ParticipantsListEventArgs extends SessionEventArgs {\r\n\r\n    private privRoomId: string;\r\n    private privSessionToken: string;\r\n    private privTranslateTo: string[];\r\n    private privProfanityFilter: string;\r\n    private privRoomProfanityFilter: string;\r\n    private privIsRoomLocked: boolean;\r\n    private privIsMuteAll: boolean;\r\n    private privParticipants: IInternalParticipant[];\r\n\r\n    public constructor(conversationId: string, token: string, translateTo: string[], profanityFilter: string,\r\n                       roomProfanityFilter: string, isRoomLocked: boolean, isMuteAll: boolean, participants: IInternalParticipant[], sessionId?: string) {\r\n        super(sessionId);\r\n        this.privRoomId = conversationId;\r\n        this.privSessionToken = token;\r\n        this.privTranslateTo = translateTo;\r\n        this.privProfanityFilter = profanityFilter;\r\n        this.privRoomProfanityFilter = roomProfanityFilter;\r\n        this.privIsRoomLocked = isRoomLocked;\r\n        this.privIsRoomLocked = isMuteAll;\r\n        this.privParticipants = participants;\r\n    }\r\n    public get sessionToken(): string {\r\n        return this.privSessionToken;\r\n    }\r\n\r\n    public get conversationId(): string {\r\n        return this.privRoomId;\r\n    }\r\n\r\n    public get translateTo(): string[] {\r\n        return this.privTranslateTo;\r\n    }\r\n\r\n    public get profanityFilter(): string {\r\n        return this.privProfanityFilter;\r\n    }\r\n\r\n    public get roomProfanityFilter(): string {\r\n        return this.privRoomProfanityFilter;\r\n    }\r\n\r\n    public get isRoomLocked(): boolean {\r\n        return this.privIsRoomLocked;\r\n    }\r\n\r\n    public get isMuteAll(): boolean {\r\n        return this.privIsMuteAll;\r\n    }\r\n\r\n    public get participants(): IInternalParticipant[] {\r\n        return this.privParticipants;\r\n    }\r\n}\r\n\r\nexport class ConversationReceivedTranslationEventArgs {\r\n    private privPayload: ConversationTranslationResult;\r\n    private privCommand: string;\r\n    private privSessionId: string;\r\n\r\n    public constructor(command: string, payload: ConversationTranslationResult,  sessionId?: string) {\r\n        this.privPayload = payload;\r\n        this.privCommand = command;\r\n        this.privSessionId = sessionId;\r\n    }\r\n\r\n    public get payload(): ConversationTranslationResult {\r\n        return this.privPayload;\r\n    }\r\n\r\n    public get command(): string {\r\n        return this.privCommand;\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    SessionEventArgs,\r\n    } from \"../../sdk/Exports.js\";\r\n// import { ConversationClient } from \"./ConversationConnection\";\r\nimport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs } from \"./ConversationTranslatorEventArgs.js\";\r\n\r\n/**\r\n * Internal conversation data\r\n */\r\nexport interface IInternalConversation {\r\n    // the token to use for connecting to the Speech Service\r\n    cognitiveSpeechAuthToken: string;\r\n    // the region to use for connecting to the Speech Service\r\n    cognitiveSpeechRegion: string;\r\n    // the unique id of the user who started or joined the Conversation\r\n    participantId: string;\r\n    // a descriptive name for the Conversation\r\n    name: string;\r\n    // a descriptive name for the Conversation\r\n    description: string;\r\n    // the speech model ID for custom speech\r\n    speechModel: string;\r\n    // represents the level of speech supported in the Conversation (0: everyone can speak, 2: only host can speak, 3: no-one can speak)\r\n    modalities: number;\r\n    // ?\r\n    isApproved: boolean;\r\n    // the mute flag has been set at conversation level and only the host can speak\r\n    isMuted: boolean;\r\n    // the 5 character conversation Id\r\n    roomId: string;\r\n    // the hex color string to represent a user. If there are many users this hex color may be reused (?).\r\n    avatar: string;\r\n    // the token to use when calling the websocket\r\n    token: string;\r\n    // used for tracking the session and help with troubleshooting problems in the logs\r\n    correlationId: string;\r\n    // extracted from the headers\r\n    requestId: string;\r\n    // set programmatically\r\n    isHost: boolean;\r\n}\r\n\r\n/**\r\n * The user who is participating in the conversation.\r\n */\r\nexport interface IInternalParticipant {\r\n    avatar?: string;\r\n    displayName?: string;\r\n    id?: string;\r\n    isHost?: boolean;\r\n    isMuted?: boolean;\r\n    isUsingTts?: boolean;\r\n    profanity?: boolean;\r\n    preferredLanguage?: string;\r\n    translateToLanguages?: string[];\r\n    voice?: string;\r\n}\r\n\r\n/** Users participating in the conversation */\r\nexport class InternalParticipants {\r\n\r\n    public constructor(public participants: IInternalParticipant[] = [], public meId?: string) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Add or update a participant\r\n     * @param value\r\n     */\r\n    public addOrUpdateParticipant(value: IInternalParticipant): IInternalParticipant {\r\n        if (value === undefined) {\r\n            return;\r\n        }\r\n\r\n        const exists: number = this.getParticipantIndex(value.id);\r\n        if (exists > -1) {\r\n            this.participants.splice(exists, 1, value);\r\n        } else {\r\n            this.participants.push(value);\r\n        }\r\n\r\n        // ensure it was added ok\r\n        return this.getParticipant(value.id);\r\n    }\r\n\r\n    /**\r\n     * Find the participant's position in the participants list.\r\n     * @param id\r\n     */\r\n    public getParticipantIndex(id: string): number {\r\n        return this.participants.findIndex((p: IInternalParticipant): boolean => p.id === id);\r\n    }\r\n\r\n    /**\r\n     * Find the participant by id.\r\n     * @param id\r\n     */\r\n    public getParticipant(id: string): IInternalParticipant {\r\n        return this.participants.find((p: IInternalParticipant): boolean => p.id === id);\r\n    }\r\n\r\n    /**\r\n     * Remove a participant from the participants list.\r\n     */\r\n    public deleteParticipant(id: string): void {\r\n        this.participants = this.participants.filter((p: IInternalParticipant): boolean => p.id !== id);\r\n    }\r\n\r\n    /**\r\n     * Helper to return the conversation host.\r\n     */\r\n    public get host(): IInternalParticipant {\r\n        return this.participants.find((p: IInternalParticipant): boolean => p.isHost === true );\r\n    }\r\n\r\n    /**\r\n     * Helper to return the current user.\r\n     */\r\n    public get me(): IInternalParticipant {\r\n        return this.getParticipant(this.meId);\r\n    }\r\n}\r\n\r\n/**\r\n * Recognizer for handling Conversation Translator websocket messages\r\n */\r\nexport interface ConversationRecognizer {\r\n    isDisposed(): boolean;\r\n    sendRequest: (command: string, cb?: () => void, err?: (e: string) => void) => void;\r\n    cancelSpeech?: () => Promise<void>;\r\n    close?: () => Promise<void>;\r\n    conversationExpiration?: (sender: ConversationRecognizer, event: ConversationExpirationEventArgs) => void;\r\n    connected?: (e: ConnectionEventArgs) => void;\r\n    disconnected?: (e: ConnectionEventArgs) => void;\r\n    canceled?: (sender: ConversationRecognizer, event: ConversationTranslationCanceledEventArgs) => void;\r\n    connectionOpened?: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    connectionClosed?: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    participantsListReceived?: (sender: ConversationRecognizer, event: ParticipantsListEventArgs) => void;\r\n    translationReceived?: (sender: ConversationRecognizer, event: ConversationReceivedTranslationEventArgs) => void;\r\n    lockRoomCommandReceived?: (sender: ConversationRecognizer, event: LockRoomEventArgs) => void;\r\n    muteAllCommandReceived?: (sender: ConversationRecognizer, event: MuteAllEventArgs) => void;\r\n    participantJoinCommandReceived?: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    participantLeaveCommandReceived?: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    participantUpdateCommandReceived?: (sender: ConversationRecognizer, event: ParticipantAttributeEventArgs) => void;\r\n    connect?: (token: string, cb?: () => void, err?: (e: string) => void) => void;\r\n}\r\n\r\n/**\r\n * Error message returned from the Conversation Translator websocket\r\n */\r\nexport interface IConversationResponseErrorMessage {\r\n    code: string;\r\n    message: string;\r\n}\r\n\r\n/**\r\n * Error returned from the Conversation Translator websocket\r\n */\r\nexport interface IConversationResponseError {\r\n    error: IConversationResponseErrorMessage;\r\n}\r\n\r\n/**\r\n * Base message command\r\n */\r\nexport interface IClientMessage {\r\n    type: any;\r\n}\r\n\r\n/**\r\n * Command message\r\n */\r\nexport interface ICommandMessage extends IClientMessage {\r\n    command?: string;\r\n}\r\n\r\n/**\r\n * Text message command\r\n */\r\nexport interface IInstantMessageCommand extends ICommandMessage {\r\n    roomId: string;\r\n    nickname?: string;\r\n    participantId: string;\r\n    text: string;\r\n}\r\n\r\n/**\r\n * Lock command\r\n */\r\nexport interface ILockConversationCommand extends ICommandMessage {\r\n    id?: string; // incoming ws\r\n    nickname?: string; // incoming ws\r\n    participantId: string; // host - incoming ws\r\n    roomid: string;\r\n    value: boolean;\r\n}\r\n\r\n/**\r\n * Mute all command\r\n */\r\nexport interface IMuteAllCommand extends ICommandMessage {\r\n    roomid: string;\r\n    nickname?: string;  // incoming ws\r\n    participantId: string; // host\r\n    value: boolean;\r\n    id?: string; // incoming ws\r\n}\r\n\r\n/**\r\n * Mute participant command\r\n */\r\nexport interface IMuteCommand extends ICommandMessage {\r\n    roomid: string;\r\n    nickname?: string;\r\n    participantId: string; // participant\r\n    value: boolean;\r\n    id?: string; // incoming ws\r\n}\r\n\r\n/**\r\n * Remove participant command\r\n */\r\nexport interface IEjectParticipantCommand extends ICommandMessage {\r\n    roomid: string;\r\n    participantId: string; // participant\r\n}\r\n\r\n/**\r\n * Change nickname command\r\n */\r\nexport interface IChangeNicknameCommand extends ICommandMessage {\r\n    roomid: string;\r\n    participantId: string;\r\n    nickname: string;\r\n    value: string;\r\n}\r\n\r\n/**\r\n * List of command message types\r\n */\r\nexport const ConversationTranslatorMessageTypes = {\r\n    command: \"command\",\r\n    final: \"final\",\r\n    info: \"info\",\r\n    instantMessage: \"instant_message\",\r\n    keepAlive: \"keep_alive\",\r\n    partial: \"partial\",\r\n    participantCommand: \"participant_command\",\r\n    translatedMessage: \"translated_message\"\r\n};\r\n\r\n/**\r\n * List of command types\r\n */\r\nexport const ConversationTranslatorCommandTypes = {\r\n    changeNickname: \"ChangeNickname\",\r\n    disconnectSession: \"DisconnectSession\",\r\n    ejectParticipant: \"EjectParticipant\",\r\n    instant_message: \"instant_message\",\r\n    joinSession: \"JoinSession\",\r\n    leaveSession: \"LeaveSession\",\r\n    participantList: \"ParticipantList\",\r\n    roomExpirationWarning: \"RoomExpirationWarning\",\r\n    setLockState: \"SetLockState\",\r\n    setMute: \"SetMute\",\r\n    setMuteAll: \"SetMuteAll\",\r\n    setProfanityFiltering: \"SetProfanityFiltering\",\r\n    setTranslateToLanguages: \"SetTranslateToLanguages\",\r\n    setUseTTS: \"SetUseTTS\"\r\n};\r\n\r\n/**\r\n * HTTP response helper\r\n */\r\nexport interface IResponse {\r\n    ok: boolean;\r\n    status: number;\r\n    statusText: string;\r\n    data: string;\r\n    json: <T>() => T;\r\n    headers: string;\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the payload for incoming websocket commands\r\n */\r\nexport interface ICommandResponsePayload {\r\n    type: string;\r\n    command?: string;\r\n    id?: string; // incoming ws\r\n    nickname?: string; // incoming ws\r\n    participantId?: string;\r\n    roomid?: string;\r\n    value: boolean | number | string;\r\n    token?: string;\r\n}\r\n\r\nconst parseCommandResponse = (json: string): ICommandResponsePayload => JSON.parse(json) as ICommandResponsePayload;\r\n\r\nexport class CommandResponsePayload implements ICommandResponsePayload {\r\n    private privCommandResponse: ICommandResponsePayload;\r\n\r\n    public constructor(json: string) {\r\n        this.privCommandResponse = parseCommandResponse(json);\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privCommandResponse.type;\r\n    }\r\n    public get command(): string {\r\n        return this.privCommandResponse.command;\r\n    }\r\n    public get id(): string {\r\n        return this.privCommandResponse.id;\r\n    }\r\n    public get nickname(): string {\r\n        return this.privCommandResponse.nickname;\r\n    }\r\n    public get participantId(): string {\r\n        return this.privCommandResponse.participantId;\r\n    }\r\n    public get roomid(): string {\r\n        return this.privCommandResponse.roomid;\r\n    }\r\n    public get value(): boolean | number | string {\r\n        return this.privCommandResponse.value;\r\n    }\r\n    public get token(): string {\r\n        return this.privCommandResponse.token;\r\n    }\r\n\r\n    public static fromJSON(json: string): CommandResponsePayload {\r\n        return new CommandResponsePayload(json);\r\n    }\r\n\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n/**\r\n * Defines the payload for incoming list of participants\r\n */\r\nexport interface IParticipantsListPayloadResponse {\r\n    roomid: string;\r\n    id: string;\r\n    command: string;\r\n    participants: IParticipantPayloadResponse[];\r\n    token: string;\r\n    translateTo: string[];\r\n    profanityFilter: string;\r\n    roomProfanityFilter: string;\r\n    roomLocked: boolean;\r\n    muteAll: boolean;\r\n    type: string;\r\n}\r\n\r\n/**\r\n * Defines the payload for incoming participant\r\n */\r\nexport interface IParticipantPayloadResponse {\r\n    nickname: string;\r\n    locale: string;\r\n    usetts: boolean;\r\n    ismuted: boolean;\r\n    ishost: boolean;\r\n    participantId: string;\r\n    avatar?: string;\r\n}\r\n\r\nconst parseListResponse = (json: string): IParticipantsListPayloadResponse => JSON.parse(json) as IParticipantsListPayloadResponse;\r\nconst parseParticipantResponse = (json: string): IParticipantPayloadResponse => JSON.parse(json) as IParticipantPayloadResponse;\r\n\r\nexport class ParticipantsListPayloadResponse implements IParticipantsListPayloadResponse {\r\n    private privParticipantsPayloadResponse: IParticipantsListPayloadResponse;\r\n\r\n    private constructor(json: string) {\r\n        this.privParticipantsPayloadResponse = parseListResponse(json);\r\n    }\r\n\r\n    public get roomid(): string {\r\n        return this.privParticipantsPayloadResponse.roomid;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privParticipantsPayloadResponse.id;\r\n    }\r\n\r\n    public get command(): string {\r\n        return this.privParticipantsPayloadResponse.command;\r\n    }\r\n\r\n    public get participants(): IParticipantPayloadResponse[] {\r\n        return this.privParticipantsPayloadResponse.participants;\r\n    }\r\n\r\n    public get token(): string {\r\n        return this.privParticipantsPayloadResponse.token;\r\n    }\r\n\r\n    public get translateTo(): string[] {\r\n        return this.privParticipantsPayloadResponse.translateTo;\r\n    }\r\n\r\n    public get profanityFilter(): string {\r\n        return this.privParticipantsPayloadResponse.profanityFilter;\r\n    }\r\n\r\n    public get roomProfanityFilter(): string {\r\n        return this.privParticipantsPayloadResponse.roomProfanityFilter;\r\n    }\r\n\r\n    public get roomLocked(): boolean {\r\n        return this.privParticipantsPayloadResponse.roomLocked;\r\n    }\r\n\r\n    public get muteAll(): boolean {\r\n        return this.privParticipantsPayloadResponse.muteAll;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privParticipantsPayloadResponse.type;\r\n    }\r\n\r\n    public static fromJSON(json: string): ParticipantsListPayloadResponse {\r\n        return new ParticipantsListPayloadResponse(json);\r\n    }\r\n\r\n}\r\n\r\nexport class ParticipantPayloadResponse implements IParticipantPayloadResponse {\r\n\r\n    private privParticipantPayloadResponse: IParticipantPayloadResponse;\r\n\r\n    private constructor(json: string) {\r\n        this.privParticipantPayloadResponse = parseParticipantResponse(json);\r\n    }\r\n\r\n    public get nickname(): string {\r\n        return this.privParticipantPayloadResponse.nickname;\r\n    }\r\n\r\n    public get locale(): string {\r\n        return this.privParticipantPayloadResponse.locale;\r\n    }\r\n\r\n    public get usetts(): boolean {\r\n        return this.privParticipantPayloadResponse.usetts;\r\n    }\r\n\r\n    public get ismuted(): boolean {\r\n        return this.privParticipantPayloadResponse.ismuted;\r\n    }\r\n\r\n    public get ishost(): boolean {\r\n        return this.privParticipantPayloadResponse.ishost;\r\n    }\r\n\r\n    public get participantId(): string {\r\n        return this.privParticipantPayloadResponse.participantId;\r\n    }\r\n\r\n    public get avatar(): string {\r\n        return this.privParticipantPayloadResponse.avatar;\r\n    }\r\n\r\n    public static fromJSON(json: string): ParticipantPayloadResponse {\r\n        return new ParticipantPayloadResponse(json);\r\n    }\r\n\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n/**\r\n * Defines the payload for incoming translation messages\r\n */\r\nexport interface ITranslationResponsePayload {\r\n    lang: string;\r\n    translation: string;\r\n}\r\n\r\nexport interface ITranslationCommandMessage {\r\n    translations: ITranslationResponsePayload[];\r\n    id: string;\r\n    language: string;\r\n    nickname: string;\r\n    participantId: string;\r\n    roomid: string;\r\n    timestamp: string;\r\n    type: string;\r\n}\r\n\r\nexport interface ISpeechResponsePayload extends ITranslationCommandMessage {\r\n    recognition: string;\r\n    isFinal: boolean;\r\n}\r\n\r\nexport interface ITextResponsePayload extends ITranslationCommandMessage {\r\n    originalText: string;\r\n}\r\n\r\nconst parseSpeechResponse = (json: string): ISpeechResponsePayload => JSON.parse(json) as ISpeechResponsePayload;\r\nconst parseTextResponse = (json: string): ITextResponsePayload => JSON.parse(json) as ITextResponsePayload;\r\n\r\nexport class SpeechResponsePayload implements ISpeechResponsePayload {\r\n\r\n    private privSpeechResponse: ISpeechResponsePayload;\r\n\r\n    private constructor(json: string) {\r\n        this.privSpeechResponse = parseSpeechResponse(json);\r\n    }\r\n\r\n    public get recognition(): string {\r\n        return this.privSpeechResponse.recognition;\r\n    }\r\n\r\n    public get translations(): ITranslationResponsePayload[] {\r\n        return this.privSpeechResponse.translations;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privSpeechResponse.id;\r\n    }\r\n\r\n    public get language(): string {\r\n        return this.privSpeechResponse.language;\r\n    }\r\n\r\n    public get nickname(): string {\r\n        return this.privSpeechResponse.nickname;\r\n    }\r\n\r\n    public get participantId(): string {\r\n        return this.privSpeechResponse.participantId;\r\n    }\r\n\r\n    public get roomid(): string {\r\n        return this.privSpeechResponse.roomid;\r\n    }\r\n\r\n    public get timestamp(): string {\r\n        return this.privSpeechResponse.timestamp;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privSpeechResponse.type;\r\n    }\r\n\r\n    public get isFinal(): boolean {\r\n        return this.privSpeechResponse.type === \"final\";\r\n    }\r\n\r\n    public static fromJSON(json: string): SpeechResponsePayload {\r\n        return new SpeechResponsePayload(json);\r\n    }\r\n\r\n}\r\n\r\nexport class TextResponsePayload implements ITextResponsePayload {\r\n\r\n    private privTextResponse: ITextResponsePayload;\r\n\r\n    private constructor(json: string) {\r\n        this.privTextResponse = parseTextResponse(json);\r\n    }\r\n\r\n    public get originalText(): string {\r\n        return this.privTextResponse.originalText;\r\n    }\r\n\r\n    public get translations(): ITranslationResponsePayload[] {\r\n        return this.privTextResponse.translations;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privTextResponse.id;\r\n    }\r\n\r\n    public get language(): string {\r\n        return this.privTextResponse.language;\r\n    }\r\n\r\n    public get nickname(): string {\r\n        return this.privTextResponse.nickname;\r\n    }\r\n\r\n    public get participantId(): string {\r\n        return this.privTextResponse.participantId;\r\n    }\r\n\r\n    public get roomid(): string {\r\n        return this.privTextResponse.roomid;\r\n    }\r\n\r\n    public get timestamp(): string {\r\n        return this.privTextResponse.timestamp;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privTextResponse.type;\r\n    }\r\n\r\n    public static fromJSON(json: string): TextResponsePayload {\r\n        return new TextResponsePayload(json);\r\n    }\r\n\r\n}\r\n", "export { CommandResponsePayload } from \"./CommandResponsePayload.js\";\r\nexport { IParticipantsListPayloadResponse, IParticipantPayloadResponse, ParticipantsListPayloadResponse, ParticipantPayloadResponse } from \"./ParticipantResponsePayload.js\";\r\nexport { ITranslationResponsePayload, SpeechResponsePayload, TextResponsePayload } from \"./TranslationResponsePayload.js\";\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    IAudioSource,\r\n    IConnection,\r\n    MessageType,\r\n} from \"../../common/Exports.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ConversationExpirationEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationResult,\r\n    ResultReason,\r\n    Translations\r\n} from \"../../sdk/Exports.js\";\r\nimport {\r\n    CognitiveTokenAuthentication,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase\r\n} from \"../Exports.js\";\r\nimport { ConversationConnectionMessage } from \"./ConversationConnectionMessage.js\";\r\nimport { ConversationRequestSession } from \"./ConversationRequestSession.js\";\r\nimport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs\r\n} from \"./ConversationTranslatorEventArgs.js\";\r\nimport {\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IInternalParticipant\r\n} from \"./ConversationTranslatorInterfaces.js\";\r\nimport { ConversationTranslatorRecognizer } from \"./ConversationTranslatorRecognizer.js\";\r\nimport {\r\n    CommandResponsePayload,\r\n    IParticipantPayloadResponse,\r\n    IParticipantsListPayloadResponse,\r\n    ITranslationResponsePayload,\r\n    ParticipantPayloadResponse,\r\n    ParticipantsListPayloadResponse,\r\n    SpeechResponsePayload,\r\n    TextResponsePayload\r\n} from \"./ServiceMessages/Exports.js\";\r\n\r\n/**\r\n * The service adapter handles sending and receiving messages to the Conversation Translator websocket.\r\n */\r\nexport class ConversationServiceAdapter extends ServiceRecognizerBase {\r\n    private privConversationServiceConnector: ConversationTranslatorRecognizer;\r\n    private privConversationConnectionFactory: IConnectionFactory;\r\n    private privConversationAuthFetchEventId: string;\r\n    private privConversationAuthentication: IAuthentication;\r\n    private privConversationRequestSession: ConversationRequestSession;\r\n    private privConnectionConfigPromise: Promise<IConnection> = undefined;\r\n    private privConnectionLoop: Promise<void>;\r\n    private terminateMessageLoop: boolean;\r\n    private privLastPartialUtteranceId: string;\r\n    private privConversationIsDisposed: boolean;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        conversationServiceConnector: ConversationTranslatorRecognizer) {\r\n\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, conversationServiceConnector);\r\n\r\n        this.privLastPartialUtteranceId = \"\";\r\n        this.privConversationServiceConnector = conversationServiceConnector;\r\n        this.privConversationAuthentication = authentication;\r\n        this.receiveMessageOverride = (): Promise<void> => this.receiveConversationMessageOverride();\r\n        this.recognizeOverride = (): Promise<void> => this.noOp();\r\n        this.postConnectImplOverride = (connection: Promise<IConnection>): Promise<IConnection> => this.conversationConnectImpl(connection);\r\n        this.configConnectionOverride = (): Promise<IConnection> => this.configConnection();\r\n        this.disconnectOverride = (): Promise<void> => this.privDisconnect();\r\n        this.privConversationRequestSession = new ConversationRequestSession(createNoDashGuid());\r\n        this.privConversationConnectionFactory = connectionFactory;\r\n        this.privConversationIsDisposed = false;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return super.isDisposed() || this.privConversationIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privConversationIsDisposed = true;\r\n        if (this.privConnectionConfigPromise !== undefined) {\r\n            const connection: IConnection = await this.privConnectionConfigPromise;\r\n            await connection.dispose(reason);\r\n        }\r\n        await super.dispose(reason);\r\n    }\r\n\r\n    public async sendMessage(message: string): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new ConversationConnectionMessage(\r\n            MessageType.Text,\r\n            message));\r\n    }\r\n\r\n    public async sendMessageAsync(message: string): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n\r\n        await connection.send(new ConversationConnectionMessage(MessageType.Text, message));\r\n    }\r\n\r\n    protected privDisconnect(): Promise<void> {\r\n        if (this.terminateMessageLoop) {\r\n            return;\r\n        }\r\n        this.cancelRecognition(this.privConversationRequestSession.sessionId,\r\n            this.privConversationRequestSession.requestId,\r\n            CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        this.terminateMessageLoop = true;\r\n        return Promise.resolve();\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/require-await\r\n    protected async processTypeSpecificMessages(): Promise<boolean> {\r\n        return true;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        this.terminateMessageLoop = true;\r\n\r\n        const cancelEvent: ConversationTranslationCanceledEventArgs = new ConversationTranslationCanceledEventArgs(\r\n            cancellationReason,\r\n            error,\r\n            errorCode,\r\n            undefined,\r\n            sessionId);\r\n\r\n        try {\r\n            if (!!this.privConversationServiceConnector.canceled) {\r\n                this.privConversationServiceConnector.canceled(this.privConversationServiceConnector, cancelEvent);\r\n            }\r\n        } catch {\r\n            // continue on error\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Establishes a websocket connection to the end point.\r\n     */\r\n    protected async conversationConnectImpl(connection: Promise<IConnection>): Promise<IConnection> {\r\n        this.privConnectionLoop = this.startMessageLoop();\r\n        return connection;\r\n    }\r\n\r\n    /**\r\n     * Process incoming websocket messages\r\n     */\r\n    private async receiveConversationMessageOverride(): Promise<void> {\r\n        if (this.isDisposed() || this.terminateMessageLoop) {\r\n            return Promise.resolve();\r\n        }\r\n        // we won't rely on the cascading promises of the connection since we want to continually be available to receive messages\r\n        const communicationCustodian: Deferred<void> = new Deferred<void>();\r\n\r\n        try {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            const message: ConversationConnectionMessage = await connection.read() as ConversationConnectionMessage;\r\n            if (this.isDisposed() || this.terminateMessageLoop) {\r\n                // We're done.\r\n                communicationCustodian.resolve();\r\n                return Promise.resolve();\r\n            }\r\n\r\n            if (!message) {\r\n                return this.receiveConversationMessageOverride();\r\n            }\r\n\r\n            const sessionId: string = this.privConversationRequestSession.sessionId;\r\n            const conversationMessageType: string = message.conversationMessageType.toLowerCase();\r\n            let sendFinal: boolean = false;\r\n\r\n            try {\r\n                switch (conversationMessageType) {\r\n                    case \"info\":\r\n                    case \"participant_command\":\r\n                    case \"command\":\r\n                        const commandPayload: CommandResponsePayload = CommandResponsePayload.fromJSON(message.textBody);\r\n                        switch (commandPayload.command.toLowerCase()) {\r\n\r\n                            /**\r\n                             * 'ParticpantList' is the first message sent to the user after the websocket connection has opened.\r\n                             * The consuming client must wait for this message to arrive\r\n                             * before starting to send their own data.\r\n                             */\r\n                            case \"participantlist\":\r\n\r\n                                const participantsPayload: IParticipantsListPayloadResponse = ParticipantsListPayloadResponse.fromJSON(message.textBody);\r\n\r\n                                const participantsResult: IInternalParticipant[] = participantsPayload.participants.map((p: IParticipantPayloadResponse): IInternalParticipant => {\r\n                                    const participant: IInternalParticipant = {\r\n                                        avatar: p.avatar,\r\n                                        displayName: p.nickname,\r\n                                        id: p.participantId,\r\n                                        isHost: p.ishost,\r\n                                        isMuted: p.ismuted,\r\n                                        isUsingTts: p.usetts,\r\n                                        preferredLanguage: p.locale\r\n                                    };\r\n                                    return participant;\r\n                                });\r\n\r\n                                if (!!this.privConversationServiceConnector.participantsListReceived) {\r\n                                    this.privConversationServiceConnector.participantsListReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantsListEventArgs(participantsPayload.roomid, participantsPayload.token,\r\n                                            participantsPayload.translateTo, participantsPayload.profanityFilter,\r\n                                            participantsPayload.roomProfanityFilter, participantsPayload.roomLocked,\r\n                                            participantsPayload.muteAll, participantsResult, sessionId));\r\n                                }\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetTranslateToLanguages' represents the list of languages being used in the Conversation by all users(?).\r\n                             * This is sent at the start of the Conversation\r\n                             */\r\n                            case \"settranslatetolanguages\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.setTranslateToLanguages,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetProfanityFiltering' lets the client set the level of profanity filtering.\r\n                             * If sent by the participant the setting will effect only their own profanity level.\r\n                             * If sent by the host, the setting will effect all participants including the host.\r\n                             * Note: the profanity filters differ from Speech Service (?): 'marked', 'raw', 'removed', 'tagged'\r\n                             */\r\n                            case \"setprofanityfiltering\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.setProfanityFiltering,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetMute' is sent if the participant has been muted by the host.\r\n                             * Check the 'participantId' to determine if the current user has been muted.\r\n                             */\r\n                            case \"setmute\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.setMute,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetMuteAll' is sent if the Conversation has been muted by the host.\r\n                             */\r\n                            case \"setmuteall\":\r\n\r\n                                if (!!this.privConversationServiceConnector.muteAllCommandReceived) {\r\n                                    this.privConversationServiceConnector.muteAllCommandReceived(this.privConversationServiceConnector,\r\n                                        new MuteAllEventArgs(commandPayload.value as boolean, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'RoomExpirationWarning' is sent towards the end of the Conversation session to give a timeout warning.\r\n                             */\r\n                            case \"roomexpirationwarning\":\r\n\r\n                                if (!!this.privConversationServiceConnector.conversationExpiration) {\r\n                                    this.privConversationServiceConnector.conversationExpiration(this.privConversationServiceConnector,\r\n                                        new ConversationExpirationEventArgs(commandPayload.value as number, this.privConversationRequestSession.sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetUseTts' is sent as a confirmation if the user requests TTS to be turned on or off.\r\n                             */\r\n                            case \"setusetts\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.setUseTTS,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetLockState' is set if the host has locked or unlocked the Conversation.\r\n                             */\r\n                            case \"setlockstate\":\r\n\r\n                                if (!!this.privConversationServiceConnector.lockRoomCommandReceived) {\r\n                                    this.privConversationServiceConnector.lockRoomCommandReceived(this.privConversationServiceConnector,\r\n                                        new LockRoomEventArgs(commandPayload.value as boolean, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'ChangeNickname' is received if a user changes their display name.\r\n                             * Any cached particpiants list should be updated to reflect the display name.\r\n                             */\r\n                            case \"changenickname\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.changeNickname,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'JoinSession' is sent when a user joins the Conversation.\r\n                             */\r\n                            case \"joinsession\":\r\n\r\n                                const joinParticipantPayload: ParticipantPayloadResponse = ParticipantPayloadResponse.fromJSON(message.textBody);\r\n\r\n                                const joiningParticipant: IInternalParticipant = {\r\n                                    avatar: joinParticipantPayload.avatar,\r\n                                    displayName: joinParticipantPayload.nickname,\r\n                                    id: joinParticipantPayload.participantId,\r\n                                    isHost: joinParticipantPayload.ishost,\r\n                                    isMuted: joinParticipantPayload.ismuted,\r\n                                    isUsingTts: joinParticipantPayload.usetts,\r\n                                    preferredLanguage: joinParticipantPayload.locale,\r\n                                };\r\n\r\n                                if (!!this.privConversationServiceConnector.participantJoinCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantJoinCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantEventArgs(\r\n                                            joiningParticipant,\r\n                                            sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'LeaveSession' is sent when a user leaves the Conversation'.\r\n                             */\r\n                            case \"leavesession\":\r\n\r\n                                const leavingParticipant: IInternalParticipant = {\r\n                                    id: commandPayload.participantId\r\n                                };\r\n\r\n                                if (!!this.privConversationServiceConnector.participantLeaveCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantLeaveCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantEventArgs(leavingParticipant, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'DisconnectSession' is sent when a user is disconnected from the session (e.g. network problem).\r\n                             * Check the 'ParticipantId' to check whether the message is for the current user.\r\n                             */\r\n                            case \"disconnectsession\":\r\n\r\n                                // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n                                const disconnectParticipant: IInternalParticipant = {\r\n                                    id: commandPayload.participantId\r\n                                };\r\n\r\n                                break;\r\n\r\n                            case \"token\":\r\n                                const token = new CognitiveTokenAuthentication(\r\n                                    (): Promise<string> => {\r\n                                        const authorizationToken = commandPayload.token;\r\n                                        return Promise.resolve(authorizationToken);\r\n                                    },\r\n                                    (): Promise<string> => {\r\n                                        const authorizationToken = commandPayload.token;\r\n                                        return Promise.resolve(authorizationToken);\r\n                                    });\r\n                                this.authentication = token;\r\n                                this.privConversationServiceConnector.onToken(token);\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * Message not recognized.\r\n                             */\r\n                            default:\r\n                                break;\r\n                        }\r\n                        break;\r\n\r\n                    /**\r\n                     * 'partial' (or 'hypothesis') represents a unfinalized speech message.\r\n                     */\r\n                    case \"partial\":\r\n\r\n                    /**\r\n                     * 'final' (or 'phrase') represents a finalized speech message.\r\n                     */\r\n                    case \"final\":\r\n\r\n                        const speechPayload: SpeechResponsePayload = SpeechResponsePayload.fromJSON(message.textBody);\r\n                        const conversationResultReason: ResultReason = (conversationMessageType === \"final\") ? ResultReason.TranslatedParticipantSpeech : ResultReason.TranslatingParticipantSpeech;\r\n\r\n                        const speechResult: ConversationTranslationResult = new ConversationTranslationResult(speechPayload.participantId,\r\n                            this.getTranslations(speechPayload.translations),\r\n                            speechPayload.language,\r\n                            speechPayload.id,\r\n                            conversationResultReason,\r\n                            speechPayload.recognition,\r\n                            undefined,\r\n                            undefined,\r\n                            message.textBody,\r\n                            undefined);\r\n\r\n                        if (speechPayload.isFinal) {\r\n                            // check the length, sometimes empty finals are returned\r\n                            if (speechResult.text !== undefined && speechResult.text.length > 0) {\r\n                                sendFinal = true;\r\n                            } else if (speechPayload.id === this.privLastPartialUtteranceId) {\r\n                                // send final as normal. We had a non-empty partial for this same utterance\r\n                                // so sending the empty final is important\r\n                                sendFinal = true;\r\n                            } else {\r\n                                // suppress unneeded final\r\n                            }\r\n\r\n                            if (sendFinal) {\r\n                                if (!!this.privConversationServiceConnector.translationReceived) {\r\n                                    this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector,\r\n                                        new ConversationReceivedTranslationEventArgs(ConversationTranslatorMessageTypes.final, speechResult, sessionId));\r\n                                }\r\n                            }\r\n                        } else if (speechResult.text !== undefined) {\r\n                            this.privLastPartialUtteranceId = speechPayload.id;\r\n                            if (!!this.privConversationServiceConnector.translationReceived) {\r\n                                this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector,\r\n                                    new ConversationReceivedTranslationEventArgs(ConversationTranslatorMessageTypes.partial, speechResult, sessionId));\r\n                            }\r\n                        }\r\n\r\n                        break;\r\n\r\n                    /**\r\n                     * \"translated_message\" is a text message or instant message (IM).\r\n                     */\r\n                    case \"translated_message\":\r\n\r\n                        const textPayload: TextResponsePayload = TextResponsePayload.fromJSON(message.textBody);\r\n                        // TODO: (Native parity) a result reason should be set based whether the participantId is ours or not\r\n\r\n                        const textResult: ConversationTranslationResult = new ConversationTranslationResult(textPayload.participantId,\r\n                            this.getTranslations(textPayload.translations),\r\n                            textPayload.language,\r\n                            undefined,\r\n                            undefined,\r\n                            textPayload.originalText,\r\n                            undefined,\r\n                            undefined,\r\n                            undefined,\r\n                            message.textBody,\r\n                            undefined);\r\n\r\n                        if (!!this.privConversationServiceConnector.translationReceived) {\r\n                            this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector,\r\n                                new ConversationReceivedTranslationEventArgs(ConversationTranslatorMessageTypes.instantMessage, textResult, sessionId));\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        // ignore any unsupported message types\r\n                        break;\r\n                }\r\n            } catch (e) {\r\n                // continue\r\n            }\r\n            return this.receiveConversationMessageOverride();\r\n        } catch (e) {\r\n            this.terminateMessageLoop = true;\r\n        }\r\n\r\n        return communicationCustodian.promise;\r\n    }\r\n\r\n    private async startMessageLoop(): Promise<void> {\r\n        if (this.isDisposed()) {\r\n            return Promise.resolve();\r\n        }\r\n        this.terminateMessageLoop = false;\r\n\r\n        const messageRetrievalPromise = this.receiveConversationMessageOverride();\r\n\r\n        try {\r\n            const r = await messageRetrievalPromise;\r\n            return r;\r\n        } catch (error) {\r\n            this.cancelRecognition(this.privRequestSession ? this.privRequestSession.sessionId : \"\", this.privRequestSession ? this.privRequestSession.requestId : \"\", CancellationReason.Error, CancellationErrorCode.RuntimeError, error as string);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint\r\n    private configConnection(): Promise<IConnection> {\r\n        if (this.isDisposed()) {\r\n            return Promise.resolve<IConnection>(undefined);\r\n        }\r\n        if (this.privConnectionConfigPromise !== undefined) {\r\n            return this.privConnectionConfigPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigPromise = undefined;\r\n                    return this.configConnection();\r\n                }\r\n                return this.privConnectionConfigPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigPromise = undefined;\r\n                return this.configConnection();\r\n            });\r\n        }\r\n        if (this.terminateMessageLoop) {\r\n            return Promise.resolve<IConnection>(undefined);\r\n        }\r\n\r\n        this.privConnectionConfigPromise = this.connectImpl().then((connection: IConnection): IConnection => connection);\r\n\r\n        return this.privConnectionConfigPromise;\r\n    }\r\n\r\n    private getTranslations(serviceResultTranslations: ITranslationResponsePayload[]): Translations {\r\n        let translations: Translations;\r\n\r\n        if (undefined !== serviceResultTranslations) {\r\n            translations = new Translations();\r\n            for (const translation of serviceResultTranslations) {\r\n                translations.set(translation.lang, translation.translation);\r\n            }\r\n        }\r\n\r\n        return translations;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig\r\n} from \"../../common.speech/Exports.js\";\r\nimport {\r\n    BackgroundEvent,\r\n    Events,\r\n    Timeout,\r\n} from \"../../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"../../sdk/Audio/AudioConfig.js\";\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    Connection,\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechTranslationConfig\r\n} from \"../../sdk/Exports.js\";\r\nimport { SpeechTranslationConfigImpl } from \"../../sdk/SpeechTranslationConfig.js\";\r\nimport { ConversationImpl } from \"../../sdk/Transcription/Conversation.js\";\r\nimport { Callback, IConversation } from \"../../sdk/Transcription/IConversation.js\";\r\nimport { ConversationConnectionFactory } from \"./ConversationConnectionFactory.js\";\r\nimport { ConversationServiceAdapter } from \"./ConversationServiceAdapter.js\";\r\nimport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs\r\n} from \"./ConversationTranslatorEventArgs.js\";\r\nimport {\r\n    ConversationRecognizer,\r\n} from \"./ConversationTranslatorInterfaces.js\";\r\n\r\nexport class ConversationRecognizerFactory {\r\n    public static fromConfig(conversation: IConversation, speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig): ConversationRecognizer {\r\n        return new ConversationTranslatorRecognizer(conversation, speechConfig, audioConfig);\r\n    }\r\n}\r\n\r\n/**\r\n * Sends messages to the Conversation Translator websocket and listens for incoming events containing websocket messages.\r\n * Based off the recognizers in the SDK folder.\r\n */\r\nexport class ConversationTranslatorRecognizer extends Recognizer implements ConversationRecognizer {\r\n\r\n    private privIsDisposed: boolean;\r\n    private privSpeechRecognitionLanguage: string;\r\n    private privConnection: Connection;\r\n    private privConversation: ConversationImpl;\r\n    private privTimeoutToken: any;\r\n    private privSetTimeout: (cb: () => void, delay: number) => number;\r\n    private privClearTimeout: (id: number) => void;\r\n\r\n    public constructor(conversation: IConversation, speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig) {\r\n        const serviceConfigImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(serviceConfigImpl, \"speechConfig\");\r\n        const conversationImpl = conversation as ConversationImpl;\r\n        Contracts.throwIfNull(conversationImpl, \"conversationImpl\");\r\n\r\n        super(audioConfig, serviceConfigImpl.properties, new ConversationConnectionFactory());\r\n\r\n        this.privConversation = conversationImpl;\r\n        this.privIsDisposed = false;\r\n        this.privProperties = serviceConfigImpl.properties.clone();\r\n        this.privConnection = Connection.fromRecognizer(this);\r\n        const webWorkerLoadType: string = this.privProperties.getProperty(PropertyId.WebWorkerLoadType, \"on\").toLowerCase();\r\n        if (webWorkerLoadType === \"on\" && typeof (Blob) !== \"undefined\" && typeof (Worker) !== \"undefined\") {\r\n            this.privSetTimeout = Timeout.setTimeout;\r\n            this.privClearTimeout = Timeout.clearTimeout;\r\n        } else {\r\n            if (typeof window !== \"undefined\") {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                this.privSetTimeout = window.setTimeout.bind(window);\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                this.privClearTimeout = window.clearTimeout.bind(window);\r\n            } else {\r\n                this.privSetTimeout = setTimeout;\r\n                this.privClearTimeout = clearTimeout;\r\n            }\r\n        }\r\n    }\r\n\r\n    public canceled: (sender: ConversationRecognizer, event: ConversationTranslationCanceledEventArgs) => void;\r\n    public conversationExpiration: (sender: ConversationRecognizer, event: ConversationExpirationEventArgs) => void;\r\n    public lockRoomCommandReceived: (sender: ConversationRecognizer, event: LockRoomEventArgs) => void;\r\n    public muteAllCommandReceived: (sender: ConversationRecognizer, event: MuteAllEventArgs) => void;\r\n    public participantJoinCommandReceived: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    public participantLeaveCommandReceived: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    public participantUpdateCommandReceived: (sender: ConversationRecognizer, event: ParticipantAttributeEventArgs) => void;\r\n    public connectionOpened: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    public connectionClosed: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    public translationReceived: (sender: ConversationRecognizer, event: ConversationReceivedTranslationEventArgs) => void;\r\n    public participantsListReceived: (sender: ConversationRecognizer, event: ParticipantsListEventArgs) => void;\r\n    public participantsChanged: (sender: ConversationRecognizer, event: ConversationParticipantsChangedEventArgs) => void;\r\n\r\n    public set connected(cb: (e: ConnectionEventArgs) => void) {\r\n        this.privConnection.connected = cb;\r\n    }\r\n\r\n    public set disconnected(cb: (e: ConnectionEventArgs) => void) {\r\n        this.privConnection.disconnected = cb;\r\n    }\r\n\r\n    /**\r\n     * Return the speech language used by the recognizer\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechRecognitionLanguage;\r\n    }\r\n\r\n    /**\r\n     * Return the properties for the recognizer\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    /**\r\n     * Connect to the recognizer\r\n     * @param token\r\n     */\r\n    public connect(token: string, cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n            this.privReco.conversationTranslatorToken = token;\r\n            this.resetConversationTimeout();\r\n            this.privReco.connectAsync(cb, err);\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disconnect from the recognizer\r\n     */\r\n    public disconnect(cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            if (this.privTimeoutToken !== undefined) {\r\n               // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n               this.privClearTimeout(this.privTimeoutToken);\r\n            }\r\n            this.privReco.disconnect().then((): void => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n            // Destroy the recognizer.\r\n            this.dispose(true).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send the mute all participants command to the websocket\r\n     * @param conversationId\r\n     * @param participantId\r\n     * @param isMuted\r\n     */\r\n    public sendRequest(command: string, cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            this.sendMessage(command, cb, err);\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error as string);\r\n                }\r\n            }\r\n\r\n            // Destroy the recognizer.\r\n            this.dispose(true).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle update of service auth token (#694)\r\n     */\r\n    public onToken(token: IAuthentication): void {\r\n        this.privConversation.onToken(token);\r\n    }\r\n\r\n    /**\r\n     * Close and dispose the recognizer\r\n     */\r\n    public async close(): Promise<void> {\r\n        if (!this.privIsDisposed) {\r\n            if (!!this.privConnection) {\r\n                this.privConnection.closeConnection();\r\n                this.privConnection.close();\r\n            }\r\n            this.privConnection = undefined;\r\n            await this.dispose(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose the recognizer\r\n     * @param disposing\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n        if (disposing) {\r\n            if (this.privTimeoutToken !== undefined) {\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n                this.privClearTimeout(this.privTimeoutToken);\r\n            }\r\n            this.privIsDisposed = true;\r\n            if (!!this.privConnection) {\r\n                this.privConnection.closeConnection();\r\n                this.privConnection.close();\r\n                this.privConnection = undefined;\r\n            }\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create the config for the recognizer\r\n     * @param speechConfig\r\n     */\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    /**\r\n     * Create the service recognizer.\r\n     * The audio source is redundnant here but is required by the implementation.\r\n     * @param authentication\r\n     * @param connectionFactory\r\n     * @param audioConfig\r\n     * @param recognizerConfig\r\n     */\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const audioSource: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new ConversationServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\r\n    }\r\n\r\n    private sendMessage(msg: string, cb?: Callback, err?: Callback): void {\r\n        const withAsync = this.privReco as ConversationServiceAdapter;\r\n        const PromiseToEmptyCallback = <T>(promise: Promise<T>, cb?: Callback, err?: Callback): void => {\r\n            if (promise !== undefined) {\r\n                promise.then((): void => {\r\n                    try {\r\n                        if (!!cb) {\r\n                            cb();\r\n                        }\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(`'Unhandled error on promise callback: ${e as string}'`);\r\n                        }\r\n                    }\r\n                }, (reason: any): void => {\r\n                    try {\r\n                        if (!!err) {\r\n                            err(reason);\r\n                        }\r\n                        // eslint-disable-next-line no-empty\r\n                    } catch (error) { }\r\n                });\r\n            } else {\r\n                if (!!err) {\r\n                    err(\"Null promise\");\r\n                }\r\n            }\r\n        };\r\n\r\n        PromiseToEmptyCallback(withAsync.sendMessageAsync(msg), cb, err);\r\n        this.resetConversationTimeout();\r\n    }\r\n\r\n    private resetConversationTimeout(): void {\r\n        if (this.privTimeoutToken !== undefined) {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n            this.privClearTimeout(this.privTimeoutToken);\r\n        }\r\n\r\n        this.privTimeoutToken = this.privSetTimeout((): void => {\r\n            this.sendRequest(this.privConversation.getKeepAlive());\r\n        }, 60000);\r\n    }\r\n\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { marshalPromiseToCallbacks } from \"../../common/Exports.js\";\r\nimport { AudioConfigImpl } from \"../../sdk/Audio/AudioConfig.js\";\r\nimport { AudioStreamFormatImpl } from \"../../sdk/Audio/AudioStreamFormat.js\";\r\nimport { Contracts } from \"../../sdk/Contracts.js\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationEventArgs,\r\n    Conversation,\r\n    ConversationInfo,\r\n    Meeting,\r\n    MeetingInfo,\r\n    MeetingTranscriber,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechTranslationConfig,\r\n    SpeechTranslationConfigImpl,\r\n} from \"../../sdk/Exports.js\";\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    TranscriberConnectionFactory,\r\n    TranscriptionServiceRecognizer,\r\n} from \"../Exports.js\";\r\n\r\nexport class TranscriberRecognizer extends Recognizer {\r\n\r\n    public recognizing: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    public recognized: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    public canceled: (sender: Recognizer, event: CancellationEventArgs) => void;\r\n\r\n    private privDisposedRecognizer: boolean;\r\n    private privConversation: Conversation;\r\n    private privMeeting: Meeting;\r\n    private isMeetingRecognizer: boolean;\r\n\r\n    /**\r\n     * TranscriberRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechTranslationConfig} speechTranslationConfig - Non-audio configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An audio configuration associated with the recognizer\r\n     */\r\n    public constructor(speechTranslationConfig: SpeechTranslationConfig, audioConfig: AudioConfig) {\r\n        const speechTranslationConfigImpl: SpeechTranslationConfigImpl = speechTranslationConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(speechTranslationConfigImpl, \"speechTranslationConfig\");\r\n\r\n        const audioConfigImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNull(audioConfigImpl, \"audioConfigImpl\");\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            speechTranslationConfigImpl.speechRecognitionLanguage,\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        super(audioConfig, speechTranslationConfigImpl.properties, new TranscriberConnectionFactory());\r\n        this.privDisposedRecognizer = false;\r\n        this.isMeetingRecognizer = false;\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    public set conversation(c: Conversation) {\r\n        Contracts.throwIfNullOrUndefined(c, \"Conversation\");\r\n        this.isMeetingRecognizer = false;\r\n        this.privConversation = c;\r\n    }\r\n\r\n    public getConversationInfo(): ConversationInfo {\r\n        Contracts.throwIfNullOrUndefined(this.privConversation, \"Conversation\");\r\n        return this.privConversation.conversationInfo;\r\n    }\r\n\r\n    public set meeting(m: Meeting) {\r\n        Contracts.throwIfNullOrUndefined(m, \"Meeting\");\r\n        this.isMeetingRecognizer = true;\r\n        this.privMeeting = m;\r\n    }\r\n\r\n    public getMeetingInfo(): MeetingInfo {\r\n        Contracts.throwIfNullOrUndefined(this.privMeeting, \"Meeting\");\r\n        return this.privMeeting.meetingInfo;\r\n    }\r\n\r\n    public IsMeetingRecognizer(): boolean {\r\n        return this.isMeetingRecognizer;\r\n    }\r\n\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    public async close(): Promise<void> {\r\n        if (!this.privDisposedRecognizer) {\r\n            await this.dispose(true);\r\n        }\r\n    }\r\n\r\n    // Push async join/leave conversation message via serviceRecognizer\r\n    public async pushConversationEvent(conversationInfo: ConversationInfo, command: string): Promise<void> {\r\n        const reco = (this.privReco) as TranscriptionServiceRecognizer;\r\n        Contracts.throwIfNullOrUndefined(reco, \"serviceRecognizer\");\r\n        await reco.sendSpeechEventAsync(conversationInfo, command);\r\n    }\r\n\r\n    // Push async join/leave meeting message via serviceRecognizer\r\n    public async pushMeetingEvent(meetingInfo: MeetingInfo, command: string): Promise<void> {\r\n        const reco = (this.privReco) as TranscriptionServiceRecognizer;\r\n        Contracts.throwIfNullOrUndefined(reco, \"serviceRecognizer\");\r\n        await reco.sendMeetingSpeechEventAsync(meetingInfo, command);\r\n    }\r\n\r\n    public async enforceAudioGating(): Promise<void> {\r\n        const audioConfigImpl = this.audioConfig as AudioConfigImpl;\r\n        const format: AudioStreamFormatImpl = await audioConfigImpl.format;\r\n        const channels = format.channels;\r\n        if (channels === 1) {\r\n            if (this.properties.getProperty(\"f0f5debc-f8c9-4892-ac4b-90a7ab359fd2\", \"false\").toLowerCase() !== \"true\") {\r\n                throw new Error(\"Single channel audio configuration for MeetingTranscriber is currently under private preview, please contact diarizationrequest@microsoft.com for more details\");\r\n            }\r\n        } else if (channels !== 8) {\r\n            throw new Error(`Unsupported audio configuration: Detected ${channels}-channel audio`);\r\n        }\r\n        return;\r\n    }\r\n\r\n    public connectMeetingCallbacks(transcriber: MeetingTranscriber): void {\r\n        this.isMeetingRecognizer = true;\r\n        this.canceled = (s: any, e: CancellationEventArgs): void => {\r\n            if (!!transcriber.canceled) {\r\n                transcriber.canceled(transcriber, e);\r\n            }\r\n        };\r\n        this.recognizing = (s: any, e: SpeechRecognitionEventArgs): void => {\r\n            if (!!transcriber.transcribing) {\r\n                transcriber.transcribing(transcriber, e);\r\n            }\r\n        };\r\n        this.recognized = (s: any, e: SpeechRecognitionEventArgs): void => {\r\n            if (!!transcriber.transcribed) {\r\n                transcriber.transcribed(transcriber, e);\r\n            }\r\n        };\r\n        this.sessionStarted = (s: any, e: SessionEventArgs): void => {\r\n            if (!!transcriber.sessionStarted) {\r\n                transcriber.sessionStarted(transcriber, e);\r\n            }\r\n        };\r\n        this.sessionStopped = (s: any, e: SessionEventArgs): void => {\r\n            if (!!transcriber.sessionStopped) {\r\n                transcriber.sessionStopped(transcriber, e);\r\n            }\r\n        };\r\n    }\r\n\r\n    public disconnectCallbacks(): void {\r\n        this.canceled = undefined;\r\n        this.recognizing = undefined;\r\n        this.recognized = undefined;\r\n        this.sessionStarted = undefined;\r\n        this.sessionStopped = undefined;\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member ConversationTranscriber.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n            await this.implRecognizerStop();\r\n        }\r\n\r\n        await super.dispose(disposing);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(\r\n            speechConfig,\r\n            this.properties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new TranscriptionServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport { ConversationManager } from \"./ConversationManager.js\";\r\nexport { ConversationConnectionConfig } from \"./ConversationConnectionConfig.js\";\r\nexport { ConversationRecognizerFactory } from \"./ConversationTranslatorRecognizer.js\";\r\nexport { TranscriberRecognizer } from \"./TranscriberRecognizer.js\";\r\nexport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs } from \"./ConversationTranslatorEventArgs.js\";\r\nexport {\r\n    ConversationRecognizer,\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IInternalConversation,\r\n    IInternalParticipant,\r\n    InternalParticipants} from \"./ConversationTranslatorInterfaces.js\";\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SpeechSynthesisBoundaryType } from \"../../sdk/Exports.js\";\r\n\r\nexport enum MetadataType {\r\n    WordBoundary = \"WordBoundary\",\r\n    Bookmark = \"Bookmark\",\r\n    Viseme = \"Viseme\",\r\n    SentenceBoundary = \"SentenceBoundary\",\r\n    SessionEnd = \"SessionEnd\",\r\n    AvatarSignal = \"TalkingAvatarSignal\",\r\n}\r\n\r\nexport interface ISynthesisMetadata {\r\n    Type: MetadataType;\r\n    Data: {\r\n        Offset: number;\r\n        Duration: number;\r\n        text: {\r\n            Text: string;\r\n            Length: number;\r\n            BoundaryType: SpeechSynthesisBoundaryType;\r\n        };\r\n        Bookmark: string;\r\n        VisemeId: number;\r\n        AnimationChunk: string;\r\n        IsLastAnimation: boolean;\r\n        Name: string;\r\n    };\r\n}\r\n\r\n// audio.metadata\r\nexport interface ISynthesisAudioMetadata {\r\n    Metadata: ISynthesisMetadata[];\r\n}\r\n\r\nexport class SynthesisAudioMetadata implements ISynthesisAudioMetadata {\r\n    private privSynthesisAudioMetadata: ISynthesisAudioMetadata;\r\n\r\n    private constructor(json: string) {\r\n        this.privSynthesisAudioMetadata = JSON.parse(json) as ISynthesisAudioMetadata;\r\n    }\r\n\r\n    public static fromJSON(json: string): SynthesisAudioMetadata {\r\n        return new SynthesisAudioMetadata(json);\r\n    }\r\n\r\n    public get Metadata(): ISynthesisMetadata[] {\r\n        return this.privSynthesisAudioMetadata.Metadata;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { EventType, PlatformEvent } from \"../common/Exports.js\";\r\n\r\nexport class SpeechSynthesisEvent extends PlatformEvent {\r\n    private privRequestId: string;\r\n\r\n    public constructor(eventName: string, requestId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n\r\n        this.privRequestId = requestId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n}\r\n\r\nexport class SynthesisTriggeredEvent extends SpeechSynthesisEvent {\r\n    private privSessionAudioDestinationId: string;\r\n    private privTurnAudioDestinationId: string;\r\n\r\n    public constructor(requestId: string, sessionAudioDestinationId: string, turnAudioDestinationId: string) {\r\n        super(\"SynthesisTriggeredEvent\", requestId);\r\n\r\n        this.privSessionAudioDestinationId = sessionAudioDestinationId;\r\n        this.privTurnAudioDestinationId = turnAudioDestinationId;\r\n    }\r\n\r\n    public get audioSessionDestinationId(): string {\r\n        return this.privSessionAudioDestinationId;\r\n    }\r\n\r\n    public get audioTurnDestinationId(): string {\r\n        return this.privTurnAudioDestinationId;\r\n    }\r\n}\r\n\r\nexport class ConnectingToSynthesisServiceEvent extends SpeechSynthesisEvent {\r\n    private privAuthFetchEventId: string;\r\n\r\n    public constructor(requestId: string, authFetchEventId: string) {\r\n        super(\"ConnectingToSynthesisServiceEvent\", requestId);\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n}\r\n\r\nexport class SynthesisStartedEvent extends SpeechSynthesisEvent {\r\n    private privAuthFetchEventId: string;\r\n\r\n    public constructor(requestId: string, authFetchEventId: string) {\r\n        super(\"SynthesisStartedEvent\", requestId);\r\n\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    IAudioDestination\r\n} from \"../common/Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat.js\";\r\nimport { PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream.js\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechSynthesisResult,\r\n} from \"../sdk/Exports.js\";\r\nimport { ISynthesisMetadata, MetadataType } from \"./ServiceMessages/SynthesisAudioMetadata.js\";\r\nimport {\r\n    ConnectingToSynthesisServiceEvent,\r\n    SpeechSynthesisEvent,\r\n    SynthesisStartedEvent,\r\n    SynthesisTriggeredEvent,\r\n} from \"./SynthesisEvents.js\";\r\n\r\nexport interface ISynthesisResponseContext {\r\n    serviceTag: string;\r\n}\r\n\r\nexport interface ISynthesisResponseAudio {\r\n    type: string;\r\n    streamId: string;\r\n}\r\n\r\nexport interface ISynthesisResponse {\r\n    context: ISynthesisResponseContext;\r\n    audio: ISynthesisResponseAudio;\r\n    webrtc: {\r\n        connectionString: string;\r\n    };\r\n}\r\n\r\nexport class SynthesisTurn {\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get streamId(): string {\r\n        return this.privStreamId;\r\n    }\r\n\r\n    public set streamId(value: string) {\r\n        this.privStreamId = value;\r\n    }\r\n\r\n    public get audioOutputFormat(): AudioOutputFormatImpl {\r\n        return this.privAudioOutputFormat;\r\n    }\r\n\r\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\r\n        this.privAudioOutputFormat = format;\r\n    }\r\n\r\n    public get turnCompletionPromise(): Promise<void> {\r\n        return this.privTurnDeferral.promise;\r\n    }\r\n\r\n    public get isSynthesisEnded(): boolean {\r\n        return this.privIsSynthesisEnded;\r\n    }\r\n\r\n    public get isSynthesizing(): boolean {\r\n        return this.privIsSynthesizing;\r\n    }\r\n\r\n    public get currentTextOffset(): number {\r\n        return this.privTextOffset;\r\n    }\r\n\r\n    public get currentSentenceOffset(): number {\r\n        return this.privSentenceOffset;\r\n    }\r\n\r\n    // The number of bytes received for current turn\r\n    public get bytesReceived(): number {\r\n        return this.privBytesReceived;\r\n    }\r\n\r\n    public get audioDuration(): number {\r\n        return this.privAudioDuration;\r\n    }\r\n\r\n    public get extraProperties(): PropertyCollection {\r\n        if (!!this.privWebRTCSDP) {\r\n            const properties = new PropertyCollection();\r\n            properties.setProperty(PropertyId.TalkingAvatarService_WebRTC_SDP, this.privWebRTCSDP);\r\n            return properties;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    private privIsDisposed: boolean = false;\r\n    private privAuthFetchEventId: string;\r\n    private privIsSynthesizing: boolean = false;\r\n    private privIsSynthesisEnded: boolean = false;\r\n    private privBytesReceived: number = 0;\r\n    private privRequestId: string;\r\n    private privStreamId: string;\r\n    private privTurnDeferral: Deferred<void>;\r\n    private privInTurn: boolean = false;\r\n    private privAudioOutputFormat: AudioOutputFormatImpl;\r\n    private privAudioOutputStream: PullAudioOutputStreamImpl;\r\n    private privReceivedAudio: ArrayBuffer;\r\n    private privReceivedAudioWithHeader: ArrayBuffer;\r\n    private privTextOffset: number = 0;\r\n    private privNextSearchTextIndex: number = 0;\r\n    private privSentenceOffset: number = 0;\r\n    private privNextSearchSentenceIndex: number = 0;\r\n    private privPartialVisemeAnimation: string;\r\n    private privRawText: string;\r\n    private privIsSSML: boolean;\r\n    private privTurnAudioDestination: IAudioDestination;\r\n    private privAudioDuration: number;\r\n    private privWebRTCSDP: string;\r\n\r\n    public constructor() {\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privTurnDeferral = new Deferred<void>();\r\n\r\n        // We're not in a turn, so resolve.\r\n        this.privTurnDeferral.resolve();\r\n    }\r\n\r\n    public async getAllReceivedAudio(): Promise<ArrayBuffer> {\r\n        if (!!this.privReceivedAudio) {\r\n            return Promise.resolve(this.privReceivedAudio);\r\n        }\r\n        if (!this.privIsSynthesisEnded) {\r\n            return null;\r\n        }\r\n        await this.readAllAudioFromStream();\r\n        return Promise.resolve(this.privReceivedAudio);\r\n    }\r\n\r\n    public async getAllReceivedAudioWithHeader(): Promise<ArrayBuffer> {\r\n        if (!!this.privReceivedAudioWithHeader) {\r\n            return this.privReceivedAudioWithHeader;\r\n        }\r\n        if (!this.privIsSynthesisEnded) {\r\n            return null;\r\n        }\r\n        if (this.audioOutputFormat.hasHeader) {\r\n            const audio: ArrayBuffer = await this.getAllReceivedAudio();\r\n            this.privReceivedAudioWithHeader = this.audioOutputFormat.addHeader(audio);\r\n            return this.privReceivedAudioWithHeader;\r\n        } else {\r\n            return this.getAllReceivedAudio();\r\n        }\r\n    }\r\n\r\n    public startNewSynthesis(requestId: string, rawText: string, isSSML: boolean, audioDestination?: IAudioDestination): void {\r\n        this.privIsSynthesisEnded = false;\r\n        this.privIsSynthesizing = true;\r\n        this.privRequestId = requestId;\r\n        this.privRawText = rawText;\r\n        this.privIsSSML = isSSML;\r\n        this.privAudioOutputStream = new PullAudioOutputStreamImpl();\r\n        this.privAudioOutputStream.format = this.privAudioOutputFormat;\r\n        this.privReceivedAudio = null;\r\n        this.privReceivedAudioWithHeader = null;\r\n        this.privBytesReceived = 0;\r\n        this.privTextOffset = 0;\r\n        this.privNextSearchTextIndex = 0;\r\n        this.privSentenceOffset = 0;\r\n        this.privNextSearchSentenceIndex = 0;\r\n        this.privPartialVisemeAnimation = \"\";\r\n        this.privWebRTCSDP = \"\";\r\n        if (audioDestination !== undefined) {\r\n            this.privTurnAudioDestination = audioDestination;\r\n            this.privTurnAudioDestination.format = this.privAudioOutputFormat;\r\n        }\r\n        this.onEvent(new SynthesisTriggeredEvent(this.requestId, undefined, audioDestination === undefined ? undefined : audioDestination.id()));\r\n    }\r\n\r\n    public onPreConnectionStart(authFetchEventId: string): void {\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n        this.onEvent(new ConnectingToSynthesisServiceEvent(this.privRequestId, this.privAuthFetchEventId));\r\n    }\r\n\r\n    public onAuthCompleted(isError: boolean): void {\r\n        if (isError) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onConnectionEstablishCompleted(statusCode: number): void {\r\n        if (statusCode === 200) {\r\n            this.onEvent(new SynthesisStartedEvent(this.requestId, this.privAuthFetchEventId));\r\n            this.privBytesReceived = 0;\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onServiceResponseMessage(responseJson: string): void {\r\n        const response: ISynthesisResponse = JSON.parse(responseJson) as ISynthesisResponse;\r\n        this.streamId = response.audio.streamId;\r\n    }\r\n\r\n    public onServiceTurnEndResponse(): void {\r\n        this.privInTurn = false;\r\n        this.privTurnDeferral.resolve();\r\n        this.onComplete();\r\n    }\r\n\r\n    public onServiceTurnStartResponse(responseJson: string): void {\r\n        if (!!this.privTurnDeferral && !!this.privInTurn) {\r\n            // What? How are we starting a turn with another not done?\r\n            this.privTurnDeferral.reject(\"Another turn started before current completed.\");\r\n            // Avoid UnhandledPromiseRejection if privTurnDeferral is not being awaited\r\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n            this.privTurnDeferral.promise.then().catch((): void => { });\r\n        }\r\n        this.privInTurn = true;\r\n        this.privTurnDeferral = new Deferred<void>();\r\n        const response: ISynthesisResponse = JSON.parse(responseJson) as ISynthesisResponse;\r\n        if (!!response.webrtc) {\r\n            this.privWebRTCSDP = response.webrtc.connectionString;\r\n        }\r\n    }\r\n\r\n    public onAudioChunkReceived(data: ArrayBuffer): void {\r\n        if (this.isSynthesizing) {\r\n            this.privAudioOutputStream.write(data);\r\n            this.privBytesReceived += data.byteLength;\r\n            if (this.privTurnAudioDestination !== undefined) {\r\n                this.privTurnAudioDestination.write(data);\r\n            }\r\n        }\r\n    }\r\n\r\n    public onTextBoundaryEvent(metadata: ISynthesisMetadata): void {\r\n        this.updateTextOffset(metadata.Data.text.Text, metadata.Type);\r\n    }\r\n\r\n    public onVisemeMetadataReceived(metadata: ISynthesisMetadata): void {\r\n        if (metadata.Data.AnimationChunk !== undefined) {\r\n            this.privPartialVisemeAnimation += metadata.Data.AnimationChunk;\r\n        }\r\n    }\r\n\r\n    public onSessionEnd(metadata: ISynthesisMetadata): void {\r\n        this.privAudioDuration = metadata.Data.Offset;\r\n    }\r\n\r\n    public async constructSynthesisResult(): Promise<SpeechSynthesisResult> {\r\n        const audioBuffer: ArrayBuffer = await this.getAllReceivedAudioWithHeader();\r\n        return new SpeechSynthesisResult(\r\n            this.requestId,\r\n            ResultReason.SynthesizingAudioCompleted,\r\n            audioBuffer,\r\n            undefined,\r\n            this.extraProperties,\r\n            this.audioDuration\r\n        );\r\n    }\r\n\r\n    public dispose(): void {\r\n        if (!this.privIsDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.privIsDisposed = true;\r\n        }\r\n    }\r\n\r\n    public onStopSynthesizing(): void {\r\n        this.onComplete();\r\n    }\r\n\r\n    /**\r\n     * Gets the viseme animation string (merged from animation chunk), and clears the internal\r\n     * partial animation.\r\n     */\r\n    public getAndClearVisemeAnimation(): string {\r\n        const animation: string = this.privPartialVisemeAnimation;\r\n        this.privPartialVisemeAnimation = \"\";\r\n        return animation;\r\n    }\r\n\r\n    protected onEvent(event: SpeechSynthesisEvent): void {\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    /**\r\n     * Check if the text is an XML(SSML) tag\r\n     * @param text\r\n     * @private\r\n     */\r\n    private static isXmlTag(text: string): boolean {\r\n        return text.length >= 2 && text[0] === \"<\" && text[text.length - 1] === \">\";\r\n    }\r\n\r\n    private updateTextOffset(text: string, type: MetadataType): void {\r\n        if (type === MetadataType.WordBoundary) {\r\n            this.privTextOffset = this.privRawText.indexOf(text, this.privNextSearchTextIndex);\r\n            if (this.privTextOffset >= 0) {\r\n                this.privNextSearchTextIndex = this.privTextOffset + text.length;\r\n                if (this.privIsSSML) {\r\n                    if (this.withinXmlTag(this.privTextOffset) && !SynthesisTurn.isXmlTag(text)) {\r\n                        this.updateTextOffset(text, type);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            this.privSentenceOffset = this.privRawText.indexOf(text, this.privNextSearchSentenceIndex);\r\n            if (this.privSentenceOffset >= 0) {\r\n                this.privNextSearchSentenceIndex = this.privSentenceOffset + text.length;\r\n                if (this.privIsSSML) {\r\n                    if (this.withinXmlTag(this.privSentenceOffset) && !SynthesisTurn.isXmlTag(text)) {\r\n                        this.updateTextOffset(text, type);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private onComplete(): void {\r\n        if (this.privIsSynthesizing) {\r\n            this.privIsSynthesizing = false;\r\n            this.privIsSynthesisEnded = true;\r\n            this.privAudioOutputStream.close();\r\n            this.privInTurn = false;\r\n            if (this.privTurnAudioDestination !== undefined) {\r\n                this.privTurnAudioDestination.close();\r\n                this.privTurnAudioDestination = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    private async readAllAudioFromStream(): Promise<void> {\r\n        if (this.privIsSynthesisEnded) {\r\n            this.privReceivedAudio = new ArrayBuffer(this.bytesReceived);\r\n            try {\r\n                await this.privAudioOutputStream.read(this.privReceivedAudio);\r\n            } catch (e) {\r\n                this.privReceivedAudio = new ArrayBuffer(0);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if current idx is in XML(SSML) tag\r\n     * @param idx\r\n     * @private\r\n     */\r\n    private withinXmlTag(idx: number): boolean {\r\n        return this.privRawText.indexOf(\"<\", idx + 1) > this.privRawText.indexOf(\">\", idx + 1);\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IAudioDestination,\r\n    IConnection,\r\n    IDisposable,\r\n    MessageType,\r\n    ServiceEvent,\r\n} from \"../common/Exports.js\";\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechSynthesisBookmarkEventArgs,\r\n    SpeechSynthesisResult,\r\n    SpeechSynthesisVisemeEventArgs,\r\n    SpeechSynthesisWordBoundaryEventArgs,\r\n    Synthesizer,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    AgentConfig,\r\n    CancellationErrorCodePropertyName,\r\n    ISynthesisConnectionFactory,\r\n    ISynthesisMetadata,\r\n    MetadataType,\r\n    SynthesisAudioMetadata,\r\n    SynthesisContext,\r\n    SynthesisTurn,\r\n    SynthesizerConfig\r\n} from \"./Exports.js\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\nexport abstract class SynthesisAdapterBase implements IDisposable {\r\n    protected privSynthesisTurn: SynthesisTurn;\r\n    protected privConnectionId: string;\r\n    protected privSynthesizerConfig: SynthesizerConfig;\r\n    protected privSynthesizer: Synthesizer;\r\n    protected privSuccessCallback: (e: SpeechSynthesisResult) => void;\r\n    protected privErrorCallback: (e: string) => void;\r\n\r\n    public get synthesisContext(): SynthesisContext {\r\n        return this.privSynthesisContext;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n\r\n    public get connectionEvents(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    public get serviceEvents(): EventSource<ServiceEvent> {\r\n        return this.privServiceEvents;\r\n    }\r\n\r\n    protected speakOverride: (ssml: string, requestId: string, sc: (e: SpeechSynthesisResult) => void, ec: (e: string) => void) => void = undefined;\r\n\r\n    // Called when telemetry data is sent to the service.\r\n    // Used for testing Telemetry capture.\r\n    public static telemetryData: (json: string) => void;\r\n    public static telemetryDataEnabled: boolean = true;\r\n\r\n    public set activityTemplate(messagePayload: string) {\r\n        this.privActivityTemplate = messagePayload;\r\n    }\r\n    public get activityTemplate(): string {\r\n        return this.privActivityTemplate;\r\n    }\r\n\r\n    protected receiveMessageOverride: () => void = undefined;\r\n\r\n    protected connectImplOverride: (isUnAuthorized: boolean) => void = undefined;\r\n\r\n    protected configConnectionOverride: (connection: IConnection) => Promise<IConnection> = undefined;\r\n\r\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\r\n        this.privAudioOutputFormat = format;\r\n        this.privSynthesisTurn.audioOutputFormat = format;\r\n        if (this.privSessionAudioDestination !== undefined) {\r\n            this.privSessionAudioDestination.format = format;\r\n        }\r\n        if (this.synthesisContext !== undefined) {\r\n            this.synthesisContext.audioOutputFormat = format;\r\n        }\r\n    }\r\n    private privAuthentication: IAuthentication;\r\n    private privConnectionFactory: ISynthesisConnectionFactory;\r\n\r\n    // A promise for a configured connection.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionConfigurationPromise: Promise<IConnection> = undefined;\r\n\r\n    // A promise for a connection, but one that has not had the speech context sent yet.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionPromise: Promise<IConnection>;\r\n    private privAuthFetchEventId: string;\r\n    private privIsDisposed: boolean;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privServiceEvents: EventSource<ServiceEvent>;\r\n    protected privSynthesisContext: SynthesisContext;\r\n    private privAgentConfig: AgentConfig;\r\n    private privActivityTemplate: string;\r\n    protected privAudioOutputFormat: AudioOutputFormatImpl;\r\n    private privSessionAudioDestination: IAudioDestination;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig,\r\n        audioDestination: IAudioDestination) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!synthesizerConfig) {\r\n            throw new ArgumentNullError(\"synthesizerConfig\");\r\n        }\r\n\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privSynthesizerConfig = synthesizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privSessionAudioDestination = audioDestination;\r\n        this.privSynthesisTurn = new SynthesisTurn();\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privServiceEvents = new EventSource<ServiceEvent>();\r\n        this.privSynthesisContext = new SynthesisContext();\r\n        this.privAgentConfig = new AgentConfig();\r\n\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                const connectionClosedEvent = connectionEvent as ConnectionClosedEvent;\r\n                if (connectionClosedEvent.statusCode !== 1000) {\r\n                    this.cancelSynthesisLocal(CancellationReason.Error,\r\n                        connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure,\r\n                        `${connectionClosedEvent.reason} websocket error code: ${connectionClosedEvent.statusCode}`);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privIsDisposed = true;\r\n        if (this.privSessionAudioDestination !== undefined) {\r\n            this.privSessionAudioDestination.close();\r\n        }\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            const connection: IConnection = await this.privConnectionConfigurationPromise;\r\n            await connection.dispose(reason);\r\n        }\r\n    }\r\n\r\n    public async connect(): Promise<void> {\r\n        await this.connectImpl();\r\n    }\r\n\r\n    public async sendNetworkMessage(path: string, payload: string | ArrayBuffer): Promise<void> {\r\n        const type: MessageType = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\r\n        const contentType: string = typeof payload === \"string\" ? \"application/json\" : \"\";\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new SpeechConnectionMessage(type, path, this.privSynthesisTurn.requestId, contentType, payload));\r\n    }\r\n\r\n    public async Speak(\r\n        text: string,\r\n        isSSML: boolean,\r\n        requestId: string,\r\n        successCallback: (e: SpeechSynthesisResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n        audioDestination: IAudioDestination,\r\n    ): Promise<void> {\r\n\r\n        let ssml: string;\r\n\r\n        if (isSSML) {\r\n            ssml = text;\r\n        } else {\r\n            ssml = this.privSynthesizer.buildSsml(text);\r\n        }\r\n\r\n        if (this.speakOverride !== undefined) {\r\n            return this.speakOverride(ssml, requestId, successCallback, errorCallBack);\r\n        }\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallBack;\r\n\r\n        this.privSynthesisTurn.startNewSynthesis(requestId, text, isSSML, audioDestination);\r\n\r\n        try {\r\n            await this.connectImpl();\r\n            const connection: IConnection = await this.fetchConnection();\r\n            await this.sendSynthesisContext(connection);\r\n            await this.sendSsmlMessage(connection, ssml, requestId);\r\n            this.onSynthesisStarted(requestId);\r\n\r\n            void this.receiveMessage();\r\n        } catch (e) {\r\n            this.cancelSynthesisLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, e as string);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    public async stopSpeaking(): Promise<void> {\r\n        await this.connectImpl();\r\n        const connection: IConnection = await this.fetchConnection();\r\n\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"synthesis.control\",\r\n            this.privSynthesisTurn.requestId,\r\n            \"application/json\",\r\n            JSON.stringify({\r\n                action: \"stop\"\r\n            })\r\n        ));\r\n    }\r\n\r\n    // Cancels synthesis.\r\n    protected cancelSynthesis(\r\n        requestId: string,\r\n        _cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n        const result: SpeechSynthesisResult = new SpeechSynthesisResult(\r\n            requestId,\r\n            ResultReason.Canceled,\r\n            undefined,\r\n            error,\r\n            properties\r\n        );\r\n\r\n        this.onSynthesisCancelled(result);\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    // Cancels synthesis.\r\n    protected cancelSynthesisLocal(\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        if (!!this.privSynthesisTurn.isSynthesizing) {\r\n            this.privSynthesisTurn.onStopSynthesizing();\r\n\r\n            this.cancelSynthesis(\r\n                this.privSynthesisTurn.requestId,\r\n                cancellationReason,\r\n                errorCode,\r\n                error);\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected processTypeSpecificMessages(_connectionMessage: SpeechConnectionMessage): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected async receiveMessage(): Promise<void> {\r\n        try {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            const message: ConnectionMessage = await connection.read();\r\n\r\n            if (this.receiveMessageOverride !== undefined) {\r\n                return this.receiveMessageOverride();\r\n            }\r\n            if (this.privIsDisposed) {\r\n                // We're done.\r\n                return;\r\n            }\r\n\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!message) {\r\n                if (!this.privSynthesisTurn.isSynthesizing) {\r\n                    return;\r\n                } else {\r\n                    return this.receiveMessage();\r\n                }\r\n            }\r\n\r\n\r\n            const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n            if (connectionMessage.requestId.toLowerCase() === this.privSynthesisTurn.requestId.toLowerCase()) {\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        this.privSynthesisTurn.onServiceTurnStartResponse(connectionMessage.textBody);\r\n                        break;\r\n                    case \"response\":\r\n                        this.privSynthesisTurn.onServiceResponseMessage(connectionMessage.textBody);\r\n                        break;\r\n                    case \"audio\":\r\n                        if (this.privSynthesisTurn.streamId.toLowerCase() === connectionMessage.streamId.toLowerCase()\r\n                            && !!connectionMessage.binaryBody) {\r\n                            this.privSynthesisTurn.onAudioChunkReceived(connectionMessage.binaryBody);\r\n                            this.onSynthesizing(connectionMessage.binaryBody);\r\n                            if (this.privSessionAudioDestination !== undefined) {\r\n                                this.privSessionAudioDestination.write(connectionMessage.binaryBody);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"audio.metadata\":\r\n                        const metadataList = SynthesisAudioMetadata.fromJSON(connectionMessage.textBody).Metadata;\r\n                        for (const metadata of metadataList) {\r\n                            switch (metadata.Type) {\r\n                                case MetadataType.WordBoundary:\r\n                                case MetadataType.SentenceBoundary:\r\n                                    this.privSynthesisTurn.onTextBoundaryEvent(metadata);\r\n                                    const wordBoundaryEventArgs: SpeechSynthesisWordBoundaryEventArgs = new SpeechSynthesisWordBoundaryEventArgs(\r\n                                        metadata.Data.Offset,\r\n                                        metadata.Data.Duration,\r\n                                        metadata.Data.text.Text,\r\n                                        metadata.Data.text.Length,\r\n                                        metadata.Type === MetadataType.WordBoundary\r\n                                            ? this.privSynthesisTurn.currentTextOffset : this.privSynthesisTurn.currentSentenceOffset,\r\n                                        metadata.Data.text.BoundaryType);\r\n                                    this.onWordBoundary(wordBoundaryEventArgs);\r\n                                    break;\r\n                                case MetadataType.Bookmark:\r\n                                    const bookmarkEventArgs: SpeechSynthesisBookmarkEventArgs = new SpeechSynthesisBookmarkEventArgs(\r\n                                        metadata.Data.Offset,\r\n                                        metadata.Data.Bookmark);\r\n                                    this.onBookmarkReached(bookmarkEventArgs);\r\n                                    break;\r\n                                case MetadataType.Viseme:\r\n                                    this.privSynthesisTurn.onVisemeMetadataReceived(metadata);\r\n                                    if (metadata.Data.IsLastAnimation) {\r\n                                        const visemeEventArgs: SpeechSynthesisVisemeEventArgs = new SpeechSynthesisVisemeEventArgs(\r\n                                            metadata.Data.Offset,\r\n                                            metadata.Data.VisemeId,\r\n                                            this.privSynthesisTurn.getAndClearVisemeAnimation());\r\n                                        this.onVisemeReceived(visemeEventArgs);\r\n                                    }\r\n                                    break;\r\n                                case MetadataType.AvatarSignal:\r\n                                    this.onAvatarEvent(metadata);\r\n                                    break;\r\n                                case MetadataType.SessionEnd:\r\n                                    this.privSynthesisTurn.onSessionEnd(metadata);\r\n                                    break;\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"turn.end\":\r\n                        this.privSynthesisTurn.onServiceTurnEndResponse();\r\n                        let result: SpeechSynthesisResult;\r\n                        try {\r\n                            result = await this.privSynthesisTurn.constructSynthesisResult();\r\n                            if (!!this.privSuccessCallback) {\r\n                                this.privSuccessCallback(result);\r\n                            }\r\n                        } catch (error) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(error as string);\r\n                            }\r\n                        }\r\n                        this.onSynthesisCompleted(result);\r\n                        break;\r\n\r\n                    default:\r\n                        if (!this.processTypeSpecificMessages(connectionMessage)) {\r\n                            // here are some messages that the derived class has not processed, dispatch them to connect class\r\n                            if (!!this.privServiceEvents) {\r\n                                this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                            }\r\n                        }\r\n\r\n                }\r\n            }\r\n\r\n            return this.receiveMessage();\r\n\r\n        } catch (e) {\r\n            // TODO: What goes here?\r\n        }\r\n    }\r\n\r\n    protected sendSynthesisContext(connection: IConnection): Promise<void> {\r\n        this.setSynthesisContextSynthesisSection();\r\n        const synthesisContextJson = this.synthesisContext.toJSON();\r\n\r\n        if (synthesisContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"synthesis.context\",\r\n                this.privSynthesisTurn.requestId,\r\n                \"application/json\",\r\n                synthesisContextJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected abstract setSynthesisContextSynthesisSection(): void;\r\n\r\n    protected setSpeechConfigSynthesisSection(): void {\r\n        return;\r\n    }\r\n\r\n    protected connectImpl(isUnAuthorized: boolean = false): Promise<IConnection> {\r\n        if (this.privConnectionPromise != null) {\r\n            return this.privConnectionPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionPromise = null;\r\n                    return this.connectImpl();\r\n                }\r\n                return this.privConnectionPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionPromise = null;\r\n                return this.connectImpl();\r\n            });\r\n        }\r\n        this.privAuthFetchEventId = createNoDashGuid();\r\n        this.privConnectionId = createNoDashGuid();\r\n\r\n        this.privSynthesisTurn.onPreConnectionStart(this.privAuthFetchEventId);\r\n\r\n        const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n\r\n        this.privConnectionPromise = authPromise.then(async (result: AuthInfo): Promise<IConnection> => {\r\n            this.privSynthesisTurn.onAuthCompleted(false);\r\n\r\n            const connection: IConnection = this.privConnectionFactory.create(this.privSynthesizerConfig, result, this.privConnectionId);\r\n\r\n            // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n            // it'll stop sending events.\r\n            connection.events.attach((event: ConnectionEvent): void => {\r\n                this.connectionEvents.onEvent(event);\r\n            });\r\n            const response = await connection.open();\r\n            if (response.statusCode === 200) {\r\n                this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.resolve(connection);\r\n            } else if (response.statusCode === 403 && !isUnAuthorized) {\r\n                return this.connectImpl(true);\r\n            } else {\r\n                this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.reject(\r\n                    `Unable to contact server. StatusCode: ${response.statusCode},\r\n                    ${this.privSynthesizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Url)} Reason: ${response.reason}`);\r\n            }\r\n        }, (error: string): Promise<IConnection> => {\r\n            this.privSynthesisTurn.onAuthCompleted(true);\r\n            throw new Error(error);\r\n        });\r\n\r\n        // Attach an empty handler to allow the promise to run in the background while\r\n        // other startup events happen. It'll eventually be awaited on.\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        this.privConnectionPromise.catch((): void => { });\r\n\r\n        return this.privConnectionPromise;\r\n    }\r\n    protected sendSpeechServiceConfig(connection: IConnection, SpeechServiceConfigJson: string): Promise<void> {\r\n        if (SpeechServiceConfigJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.config\",\r\n                this.privSynthesisTurn.requestId,\r\n                \"application/json\",\r\n                SpeechServiceConfigJson));\r\n        }\r\n    }\r\n\r\n    protected sendSsmlMessage(connection: IConnection, ssml: string, requestId: string): Promise<void> {\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"ssml\",\r\n            requestId,\r\n            \"application/ssml+xml\",\r\n            ssml));\r\n    }\r\n\r\n    private async fetchConnection(): Promise<IConnection> {\r\n        if (this.privConnectionConfigurationPromise !== undefined) {\r\n            return this.privConnectionConfigurationPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigurationPromise = undefined;\r\n                    return this.fetchConnection();\r\n                }\r\n                return this.privConnectionConfigurationPromise;\r\n            }, (): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigurationPromise = undefined;\r\n                return this.fetchConnection();\r\n            });\r\n        }\r\n        this.privConnectionConfigurationPromise = this.configureConnection();\r\n        return await this.privConnectionConfigurationPromise;\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configureConnection(): Promise<IConnection> {\r\n        const connection: IConnection = await this.connectImpl();\r\n        if (this.configConnectionOverride !== undefined) {\r\n            return this.configConnectionOverride(connection);\r\n        }\r\n        this.setSpeechConfigSynthesisSection();\r\n        await this.sendSpeechServiceConfig(connection, this.privSynthesizerConfig.SpeechServiceConfig.serialize());\r\n        return connection;\r\n    }\r\n\r\n    protected onAvatarEvent(_metadata: ISynthesisMetadata): void {\r\n        return;\r\n    }\r\n\r\n    protected onSynthesisStarted(_requestId: string): void {\r\n        return;\r\n    }\r\n\r\n    protected onSynthesizing(_audio: ArrayBuffer): void {\r\n        return;\r\n    }\r\n\r\n    protected onSynthesisCancelled(_result: SpeechSynthesisResult): void {\r\n        return;\r\n    }\r\n\r\n    protected onSynthesisCompleted(_result: SpeechSynthesisResult): void {\r\n        return;\r\n    }\r\n\r\n    protected onWordBoundary(_wordBoundaryEventArgs: SpeechSynthesisWordBoundaryEventArgs): void {\r\n        return;\r\n    }\r\n\r\n    protected onVisemeReceived(_visemeEventArgs: SpeechSynthesisVisemeEventArgs): void {\r\n        return;\r\n    }\r\n\r\n    protected onBookmarkReached(_bookmarkEventArgs: SpeechSynthesisBookmarkEventArgs): void {\r\n        return;\r\n    }\r\n\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    AvatarConfig,\r\n    AvatarEventArgs,\r\n    AvatarSynthesizer,\r\n    PropertyId,\r\n    Synthesizer,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    ISynthesisConnectionFactory,\r\n    ISynthesisMetadata,\r\n    ISynthesisSectionVideo,\r\n    SynthesisAdapterBase,\r\n    SynthesizerConfig\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\n\r\nexport class AvatarSynthesisAdapter extends SynthesisAdapterBase {\r\n    private readonly privAvatarSynthesizer: AvatarSynthesizer;\r\n    private readonly privAvatarConfig: AvatarConfig;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig,\r\n        avatarSynthesizer: AvatarSynthesizer,\r\n        avatarConfig: AvatarConfig,\r\n        ) {\r\n\r\n        super(authentication, connectionFactory,\r\n            synthesizerConfig, undefined);\r\n        this.privAvatarSynthesizer = avatarSynthesizer;\r\n        this.privSynthesizer = avatarSynthesizer as Synthesizer;\r\n        this.privAvatarConfig = avatarConfig;\r\n    }\r\n\r\n    protected setSynthesisContextSynthesisSection(): void {\r\n        this.privSynthesisContext.setSynthesisSection(undefined);\r\n    }\r\n\r\n    protected setSpeechConfigSynthesisSection(): void {\r\n        this.privSynthesizerConfig.synthesisVideoSection = {\r\n            format: {\r\n                bitrate: this.privAvatarConfig.videoFormat?.bitrate,\r\n                codec: this.privAvatarConfig.videoFormat?.codec,\r\n                crop: {\r\n                    bottomRight: {\r\n                        x: this.privAvatarConfig.videoFormat?.cropRange?.bottomRight?.x,\r\n                        y: this.privAvatarConfig.videoFormat?.cropRange?.bottomRight?.y,\r\n                    },\r\n                    topLeft: {\r\n                        x: this.privAvatarConfig.videoFormat?.cropRange?.topLeft?.x,\r\n                        y: this.privAvatarConfig.videoFormat?.cropRange?.topLeft?.y,\r\n                    },\r\n                },\r\n                resolution: {\r\n                    height: this.privAvatarConfig.videoFormat?.height,\r\n                    width: this.privAvatarConfig.videoFormat?.width,\r\n                },\r\n            },\r\n            protocol: {\r\n                name: \"WebRTC\",\r\n                webrtcConfig: {\r\n                    clientDescription: btoa(this.privSynthesizerConfig.parameters.getProperty(PropertyId.TalkingAvatarService_WebRTC_SDP)),\r\n                    iceServers: this.privAvatarConfig.remoteIceServers ?? this.privAvatarSynthesizer.iceServers,\r\n                },\r\n            },\r\n            talkingAvatar: {\r\n                background: {\r\n                    color: this.privAvatarConfig.backgroundColor,\r\n                    image: {\r\n                        url: this.privAvatarConfig.backgroundImage?.toString(),\r\n                    }\r\n                },\r\n                character: this.privAvatarConfig.character,\r\n                customized: this.privAvatarConfig.customized,\r\n                style: this.privAvatarConfig.style,\r\n            }\r\n        } as ISynthesisSectionVideo;\r\n    }\r\n\r\n\r\n    protected onAvatarEvent(metadata: ISynthesisMetadata): void {\r\n        if (!!this.privAvatarSynthesizer.avatarEventReceived) {\r\n            const avatarEventArgs: AvatarEventArgs = new AvatarEventArgs(\r\n                metadata.Data.Offset,\r\n                metadata.Data.Name);\r\n            try {\r\n                this.privAvatarSynthesizer.avatarEventReceived(this.privAvatarSynthesizer, avatarEventArgs);\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IAudioDestination } from \"../common/Exports.js\";\r\nimport {\r\n    ResultReason,\r\n    SpeechSynthesisBookmarkEventArgs,\r\n    SpeechSynthesisEventArgs,\r\n    SpeechSynthesisResult,\r\n    SpeechSynthesisVisemeEventArgs,\r\n    SpeechSynthesisWordBoundaryEventArgs,\r\n    SpeechSynthesizer,\r\n    Synthesizer,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    IAuthentication,\r\n    ISynthesisConnectionFactory,\r\n    SynthesisAdapterBase,\r\n    SynthesizerConfig\r\n} from \"./Exports.js\";\r\n\r\nexport class SpeechSynthesisAdapter extends SynthesisAdapterBase {\r\n    private privSpeechSynthesizer: SpeechSynthesizer;\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig,\r\n        speechSynthesizer: SpeechSynthesizer,\r\n        audioDestination: IAudioDestination) {\r\n            super(authentication, connectionFactory, synthesizerConfig, audioDestination);\r\n            this.privSpeechSynthesizer = speechSynthesizer;\r\n            this.privSynthesizer = speechSynthesizer as Synthesizer;\r\n        }\r\n\r\n    protected setSynthesisContextSynthesisSection(): void {\r\n        this.privSynthesisContext.setSynthesisSection(this.privSpeechSynthesizer);\r\n    }\r\n\r\n    protected onSynthesisStarted(requestId: string): void {\r\n        const synthesisStartEventArgs: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(\r\n            new SpeechSynthesisResult(\r\n                requestId,\r\n                ResultReason.SynthesizingAudioStarted,\r\n            )\r\n        );\r\n\r\n        if (!!this.privSpeechSynthesizer.synthesisStarted) {\r\n            this.privSpeechSynthesizer.synthesisStarted(this.privSpeechSynthesizer, synthesisStartEventArgs);\r\n        }\r\n    }\r\n\r\n    protected onSynthesizing(audio: ArrayBuffer): void {\r\n        if (!!this.privSpeechSynthesizer.synthesizing) {\r\n            try {\r\n                const audioWithHeader = this.privSynthesisTurn.audioOutputFormat.addHeader(audio);\r\n                const ev: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(\r\n                    new SpeechSynthesisResult(\r\n                        this.privSynthesisTurn.requestId,\r\n                        ResultReason.SynthesizingAudio,\r\n                        audioWithHeader));\r\n                this.privSpeechSynthesizer.synthesizing(this.privSpeechSynthesizer, ev);\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n\r\n    protected onSynthesisCancelled(result: SpeechSynthesisResult): void {\r\n        if (!!this.privSpeechSynthesizer.SynthesisCanceled) {\r\n            const cancelEvent: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(result);\r\n            try {\r\n                this.privSpeechSynthesizer.SynthesisCanceled(this.privSpeechSynthesizer, cancelEvent);\r\n                /* eslint-disable no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    protected onSynthesisCompleted(result: SpeechSynthesisResult): void {\r\n        if (this.privSpeechSynthesizer.synthesisCompleted) {\r\n            try {\r\n                this.privSpeechSynthesizer.synthesisCompleted(\r\n                    this.privSpeechSynthesizer,\r\n                    new SpeechSynthesisEventArgs(result)\r\n                );\r\n            } catch (e) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n\r\n    protected onWordBoundary(wordBoundaryEventArgs: SpeechSynthesisWordBoundaryEventArgs): void {\r\n        if (!!this.privSpeechSynthesizer.wordBoundary) {\r\n            try {\r\n                this.privSpeechSynthesizer.wordBoundary(this.privSpeechSynthesizer, wordBoundaryEventArgs);\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n\r\n    protected onVisemeReceived(visemeEventArgs: SpeechSynthesisVisemeEventArgs): void {\r\n        if (!!this.privSpeechSynthesizer.visemeReceived) {\r\n            try {\r\n                this.privSpeechSynthesizer.visemeReceived(this.privSpeechSynthesizer, visemeEventArgs);\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n\r\n    protected onBookmarkReached(bookmarkEventArgs: SpeechSynthesisBookmarkEventArgs): void {\r\n        if (!!this.privSpeechSynthesizer.bookmarkReached) {\r\n            try {\r\n                this.privSpeechSynthesizer.bookmarkReached(this.privSpeechSynthesizer, bookmarkEventArgs);\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n    }\r\n}\r\n", "import {\r\n    IRequestOptions,\r\n    IRestResponse,\r\n    RestConfigBase,\r\n    RestMessageAdapter,\r\n    RestRequestType,\r\n} from \"../common.browser/Exports.js\";\r\nimport {\r\n    PropertyId,\r\n} from \"../sdk/Exports.js\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase.js\";\r\nimport { AuthInfo, IAuthentication, SynthesizerConfig } from \"./Exports.js\";\r\nimport { HeaderNames } from \"./HeaderNames.js\";\r\n\r\n/**\r\n * Implements methods for speaker recognition classes, sending requests to endpoint\r\n * and parsing response into expected format\r\n * @class SynthesisRestAdapter\r\n */\r\nexport class SynthesisRestAdapter {\r\n    private privRestAdapter: RestMessageAdapter;\r\n    private privUri: string;\r\n    private privAuthentication: IAuthentication;\r\n\r\n    public constructor(config: SynthesizerConfig, authentication: IAuthentication) {\r\n\r\n        let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"westus\");\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `https://${region}.tts.speech${hostSuffix}`);\r\n        }\r\n        this.privUri = `${endpoint}/cognitiveservices/voices/list`;\r\n\r\n        const options: IRequestOptions = RestConfigBase.requestOptions;\r\n        this.privRestAdapter = new RestMessageAdapter(options);\r\n        this.privAuthentication = authentication;\r\n    }\r\n\r\n    /**\r\n     * Sends list voices request to endpoint.\r\n     * @function\r\n     * @public\r\n     * @param connectionId - guid for connectionId\r\n     * @returns {Promise<IRestResponse>} rest response to status request\r\n     */\r\n    public getVoicesList(connectionId: string): Promise<IRestResponse> {\r\n        this.privRestAdapter.setHeaders(HeaderNames.ConnectionId, connectionId);\r\n        return this.privAuthentication.fetch(connectionId).then((authInfo: AuthInfo): Promise<IRestResponse> => {\r\n            this.privRestAdapter.setHeaders(authInfo.headerName, authInfo.token);\r\n            return this.privRestAdapter.request(RestRequestType.Get, this.privUri);\r\n        });\r\n    }\r\n\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection } from \"../sdk/Exports.js\";\r\nimport {\r\n    Context,\r\n    ISynthesisSectionVideo,\r\n    SpeechServiceConfig\r\n    } from \"./Exports.js\";\r\n\r\nexport enum SynthesisServiceType {\r\n    Standard,\r\n    Custom,\r\n}\r\n\r\nexport class SynthesizerConfig {\r\n    private privSynthesisServiceType: SynthesisServiceType = SynthesisServiceType.Standard;\r\n    private privSpeechServiceConfig: SpeechServiceConfig;\r\n    private privParameters: PropertyCollection;\r\n    public avatarEnabled: boolean = false;\r\n\r\n    public constructor(\r\n        speechServiceConfig: SpeechServiceConfig,\r\n        parameters: PropertyCollection) {\r\n        this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));\r\n        this.privParameters = parameters;\r\n    }\r\n\r\n    public get parameters(): PropertyCollection {\r\n        return this.privParameters;\r\n    }\r\n\r\n    public get synthesisServiceType(): SynthesisServiceType {\r\n        return this.privSynthesisServiceType;\r\n    }\r\n\r\n    public set synthesisServiceType(value: SynthesisServiceType) {\r\n        this.privSynthesisServiceType = value;\r\n    }\r\n\r\n    public set synthesisVideoSection(value: ISynthesisSectionVideo) {\r\n        this.privSpeechServiceConfig.Context.synthesis = {\r\n            video: value\r\n        };\r\n    }\r\n\r\n    public get SpeechServiceConfig(): SpeechServiceConfig {\r\n        return this.privSpeechServiceConfig;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat.js\";\r\nimport { PropertyId, SpeechSynthesizer } from \"../sdk/Exports.js\";\r\n\r\n/**\r\n * Represents the JSON used in the synthesis.context message sent to the speech service.\r\n * The dynamic grammar is always refreshed from the encapsulated dynamic grammar object.\r\n */\r\nexport class SynthesisContext {\r\n    private privContext: { [section: string]: any } = {};\r\n    private privAudioOutputFormat: AudioOutputFormatImpl;\r\n\r\n    /**\r\n     * Adds a section to the synthesis.context object.\r\n     * @param sectionName Name of the section to add.\r\n     * @param value JSON serializable object that represents the value.\r\n     */\r\n    public setSection(sectionName: string, value: string | object): void {\r\n        this.privContext[sectionName] = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the audio output format for synthesis context generation.\r\n     * @param format {AudioOutputFormatImpl} the output format\r\n     */\r\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\r\n        this.privAudioOutputFormat = format;\r\n    }\r\n\r\n    public toJSON(): string {\r\n        return JSON.stringify(this.privContext);\r\n    }\r\n\r\n    public setSynthesisSection(speechSynthesizer: SpeechSynthesizer): void {\r\n        const synthesisSection: ISynthesisSection = this.buildSynthesisContext(speechSynthesizer);\r\n        this.setSection(\"synthesis\", synthesisSection);\r\n    }\r\n\r\n    private buildSynthesisContext(speechSynthesizer: SpeechSynthesizer): ISynthesisSection {\r\n        return {\r\n            audio: {\r\n                metadataOptions: {\r\n                    bookmarkEnabled: (!!speechSynthesizer?.bookmarkReached),\r\n                    punctuationBoundaryEnabled: speechSynthesizer?.properties.getProperty(\r\n                        PropertyId.SpeechServiceResponse_RequestPunctuationBoundary, (!!speechSynthesizer?.wordBoundary)),\r\n                    sentenceBoundaryEnabled: speechSynthesizer?.properties.getProperty(\r\n                        PropertyId.SpeechServiceResponse_RequestSentenceBoundary, false),\r\n                    sessionEndEnabled: true,\r\n                    visemeEnabled: (!!speechSynthesizer?.visemeReceived),\r\n                    wordBoundaryEnabled: speechSynthesizer?.properties.getProperty(\r\n                        PropertyId.SpeechServiceResponse_RequestWordBoundary, (!!speechSynthesizer?.wordBoundary)),\r\n                },\r\n                outputFormat: this.privAudioOutputFormat.requestAudioFormatString,\r\n            },\r\n            language: {\r\n                autoDetection: speechSynthesizer?.autoDetectSourceLanguage\r\n            }\r\n        } as ISynthesisSection;\r\n    }\r\n}\r\n\r\ninterface ISynthesisSection {\r\n    audio: {\r\n        outputFormat: string;\r\n        metadataOptions: {\r\n            bookmarkEnabled: boolean;\r\n            wordBoundaryEnabled: string;\r\n            punctuationBoundaryEnabled: string;\r\n            visemeEnabled: boolean;\r\n            sentenceBoundaryEnabled: string;\r\n            sessionEndEnabled: boolean;\r\n        };\r\n    };\r\n    language: {\r\n        autoDetection: boolean;\r\n    };\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection } from \"../sdk/Exports.js\";\r\nimport { Context } from \"./Exports.js\";\r\n\r\nexport class SpeakerRecognitionConfig {\r\n    private privParameters: PropertyCollection;\r\n    private privContext: Context;\r\n\r\n    public constructor(\r\n        context: Context,\r\n        parameters: PropertyCollection) {\r\n        this.privContext = context ? context : new Context(null);\r\n        this.privParameters = parameters;\r\n    }\r\n\r\n    public get parameters(): PropertyCollection {\r\n        return this.privParameters;\r\n    }\r\n\r\n    public get Context(): Context {\r\n        return this.privContext;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports.js\";\r\nimport {\r\n    Deferred,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    MessageType,\r\n} from \"../common/Exports.js\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat.js\";\r\nimport { SpeakerRecognitionModel } from \"../sdk/SpeakerRecognitionModel.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    SpeakerRecognitionResult,\r\n    SpeakerRecognizer,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SessionEventArgs,\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    ISpeechConfigAudioDevice,\r\n    SpeakerResponse,\r\n    ServiceRecognizerBase,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\ninterface SpeakerContext {\r\n    scenario: string;\r\n    profileIds: string[];\r\n    features: {\r\n        interimResult: string;\r\n        progressiveDetection: string;\r\n    };\r\n}\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class SpeakerServiceRecognizer extends ServiceRecognizerBase {\r\n    private privSpeakerRecognizer: SpeakerRecognizer;\r\n    private privSpeakerAudioSource: IAudioSource;\r\n    private privResultDeferral: Deferred<SpeakerRecognitionResult>;\r\n    private privSpeakerModel: SpeakerRecognitionModel;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: SpeakerRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.privSpeakerRecognizer = recognizer;\r\n        this.privSpeakerAudioSource = audioSource;\r\n        this.recognizeSpeaker = (model: SpeakerRecognitionModel): Promise<SpeakerRecognitionResult> => this.recognizeSpeakerOnce(model);\r\n        this.sendPrePayloadJSONOverride = (): Promise<void> => this.noOp();\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let processed: boolean = false;\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speaker.response\":\r\n                const response: SpeakerResponse = JSON.parse(connectionMessage.textBody) as SpeakerResponse;\r\n                let result: SpeakerRecognitionResult;\r\n                if (response.status.statusCode.toLowerCase() !== \"success\") {\r\n                    result = new SpeakerRecognitionResult(\r\n                        response,\r\n                        ResultReason.Canceled,\r\n                        CancellationErrorCode.ServiceError,\r\n                        response.status.reason\r\n                        );\r\n                } else {\r\n                    result = new SpeakerRecognitionResult(\r\n                        response,\r\n                        ResultReason.RecognizedSpeaker,\r\n                        );\r\n                }\r\n                if (!!this.privResultDeferral) {\r\n                    this.privResultDeferral.resolve(result);\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        const defferal = new Deferred<boolean>();\r\n        defferal.resolve(processed);\r\n        return defferal.promise;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privResultDeferral) {\r\n            const result: SpeakerRecognitionResult = new SpeakerRecognitionResult(\r\n                {\r\n                    scenario: this.privSpeakerModel.scenario,\r\n                    status: { statusCode: error, reason: error }\r\n                },\r\n                ResultReason.Canceled,\r\n                errorCode,\r\n                error\r\n                );\r\n            try {\r\n                this.privResultDeferral.resolve(result);\r\n            } catch (error) {\r\n                this.privResultDeferral.reject(error as string);\r\n            }\r\n        }\r\n    }\r\n\r\n    public async recognizeSpeakerOnce(model: SpeakerRecognitionModel): Promise<SpeakerRecognitionResult> {\r\n        this.privSpeakerModel = model;\r\n        this.voiceProfileType = model.scenario;\r\n        if (!this.privResultDeferral) {\r\n            this.privResultDeferral = new Deferred<SpeakerRecognitionResult>();\r\n        }\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privSpeakerAudioSource.events);\r\n\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.Speech_SessionId, this.privRequestSession.sessionId);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n\r\n        const preAudioPromise: Promise<void> = this.sendPreAudioMessages(this.extractSpeakerContext(model));\r\n\r\n        const node: IAudioStreamNode = await this.privSpeakerAudioSource.attach(this.privRequestSession.audioNodeId);\r\n        const format: AudioStreamFormatImpl = await this.privSpeakerAudioSource.format;\r\n        const deviceInfo: ISpeechConfigAudioDevice = await this.privSpeakerAudioSource.deviceInfo;\r\n\r\n        const audioNode = new ReplayableAudioNode(node, format.avgBytesPerSec);\r\n        await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n\r\n        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        try {\r\n            await conPromise;\r\n            await preAudioPromise;\r\n        } catch (err) {\r\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, err as string);\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        void this.receiveMessage();\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        // /* eslint-disable no-empty */\r\n        audioSendPromise.then((): void => { /* add? return true;*/ }, (error: string): void => {\r\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n\r\n        return this.privResultDeferral.promise;\r\n    }\r\n\r\n    private async sendPreAudioMessages(context: SpeakerContext): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await this.sendSpeakerRecognition(connection, context);\r\n        // await this.sendWaveHeader(connection);\r\n    }\r\n\r\n    private async sendSpeakerRecognition(connection: IConnection, context: SpeakerContext): Promise<void> {\r\n        const speakerContextJson = JSON.stringify(context);\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speaker.context\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            speakerContextJson));\r\n    }\r\n\r\n    private extractSpeakerContext(model: SpeakerRecognitionModel): SpeakerContext {\r\n        return {\r\n            features: {\r\n                interimResult: \"enabled\",\r\n                progressiveDetection: \"disabled\",\r\n            },\r\n            profileIds: model.profileIds,\r\n            scenario: model.scenario,\r\n        };\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports.js\";\r\nimport {\r\n    DeferralMap,\r\n    Deferred,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    MessageType,\r\n} from \"../common/Exports.js\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat.js\";\r\nimport { SpeakerRecognitionModel } from \"../sdk/SpeakerRecognitionModel.js\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    VoiceProfileClient,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SessionEventArgs,\r\n    VoiceProfileEnrollmentResult,\r\n    VoiceProfilePhraseResult,\r\n    VoiceProfileResult,\r\n    VoiceProfileType,\r\n    VoiceProfile\r\n} from \"../sdk/Exports.js\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    EnrollmentResponse,\r\n    IProfile,\r\n    ISpeechConfigAudioDevice,\r\n    ProfilePhraseResponse,\r\n    ProfileResponse,\r\n    ServiceRecognizerBase,\r\n} from \"./Exports.js\";\r\nimport { IAuthentication } from \"./IAuthentication.js\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory.js\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig.js\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal.js\";\r\n\r\ninterface CreateProfile {\r\n    scenario: string;\r\n    locale: string;\r\n    number: string;\r\n}\r\n\r\ninterface PhraseRequest {\r\n    scenario: string;\r\n    locale: string;\r\n}\r\n\r\ninterface SpeakerContext {\r\n    scenario: string;\r\n    profileIds: string[];\r\n    features: {\r\n        interimResult: string;\r\n        progressiveDetection: string;\r\n    };\r\n}\r\n\r\n// eslint-disable-next-line max-classes-per-file\r\nexport class VoiceServiceRecognizer extends ServiceRecognizerBase {\r\n    private privSpeakerAudioSource: IAudioSource;\r\n    private privDeferralMap: DeferralMap = new DeferralMap();\r\n    private privExpectedProfileId: string;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: VoiceProfileClient) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.privSpeakerAudioSource = audioSource;\r\n        this.sendPrePayloadJSONOverride = (): Promise<void> => this.noOp();\r\n    }\r\n\r\n    public set SpeakerAudioSource(audioSource: IAudioSource) {\r\n        this.privSpeakerAudioSource = audioSource;\r\n    }\r\n\r\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let processed: boolean = false;\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            // Profile management response for create, fetch, delete, reset\r\n            case \"speaker.profiles\":\r\n                const response: ProfileResponse = JSON.parse(connectionMessage.textBody) as ProfileResponse;\r\n                switch (response.operation.toLowerCase()) {\r\n                    case \"create\":\r\n                        this.handleCreateResponse(response, connectionMessage.requestId);\r\n                        break;\r\n\r\n                    case \"delete\":\r\n                    case \"reset\":\r\n                        this.handleResultResponse(response, connectionMessage.requestId);\r\n                        break;\r\n\r\n                    case \"fetch\":\r\n                        const enrollmentResponse: EnrollmentResponse = JSON.parse(connectionMessage.textBody) as EnrollmentResponse;\r\n                        this.handleFetchResponse(enrollmentResponse, connectionMessage.requestId);\r\n                        break;\r\n\r\n                    default:\r\n                        break;\r\n                }\r\n                processed = true;\r\n                break;\r\n            // Activation and authorization phrase response\r\n            case \"speaker.phrases\":\r\n                const phraseResponse: ProfilePhraseResponse = JSON.parse(connectionMessage.textBody) as ProfilePhraseResponse;\r\n                this.handlePhrasesResponse(phraseResponse, connectionMessage.requestId);\r\n                processed = true;\r\n                break;\r\n            // Enrollment response\r\n            case \"speaker.profile.enrollment\":\r\n                const enrollmentResponse: EnrollmentResponse = JSON.parse(connectionMessage.textBody) as EnrollmentResponse;\r\n                const result: VoiceProfileEnrollmentResult = new VoiceProfileEnrollmentResult(\r\n                    this.enrollmentReasonFrom(!!enrollmentResponse.enrollment ? enrollmentResponse.enrollment.enrollmentStatus : enrollmentResponse.status.statusCode),\r\n                    !!enrollmentResponse.enrollment ? JSON.stringify(enrollmentResponse.enrollment) : undefined,\r\n                    enrollmentResponse.status.reason,\r\n                    );\r\n                if (!!this.privDeferralMap.getId(connectionMessage.requestId)) {\r\n                    this.privDeferralMap.complete<VoiceProfileEnrollmentResult>(connectionMessage.requestId, result);\r\n                }\r\n                this.privRequestSession.onSpeechEnded();\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        const defferal = new Deferred<boolean>();\r\n        defferal.resolve(processed);\r\n        return defferal.promise;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        // const enrollmentResponse: EnrollmentResponse = JSON.parse(connectionMessage.textBody) as EnrollmentResponse;\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n            const result: VoiceProfileEnrollmentResult = new VoiceProfileEnrollmentResult(\r\n                ResultReason.Canceled,\r\n                error,\r\n                error,\r\n                );\r\n            if (!!this.privDeferralMap.getId(requestId)) {\r\n                this.privDeferralMap.complete<VoiceProfileEnrollmentResult>(requestId, result);\r\n            }\r\n    }\r\n\r\n    public async createProfile(profileType: VoiceProfileType, locale: string): Promise<string[]> {\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        this.voiceProfileType = profileType.toString();\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        try {\r\n            const createProfileDeferral = new Deferred<string[]>();\r\n            await conPromise;\r\n            await this.sendCreateProfile(createProfileDeferral, profileType, locale);\r\n            void this.receiveMessage();\r\n            return createProfileDeferral.promise;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public async resetProfile(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        return this.sendCommonRequest<VoiceProfileResult>(\"reset\", profile.profileType, profile);\r\n    }\r\n\r\n    public async deleteProfile(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        return this.sendCommonRequest<VoiceProfileResult>(\"delete\", profile.profileType, profile);\r\n    }\r\n\r\n    public async retrieveEnrollmentResult(profile: VoiceProfile): Promise<VoiceProfileEnrollmentResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        this.privExpectedProfileId = profile.profileId;\r\n        return this.sendCommonRequest<VoiceProfileEnrollmentResult>(\"fetch\", profile.profileType, profile);\r\n    }\r\n\r\n    public async getAllProfiles(profileType: VoiceProfileType): Promise<VoiceProfileEnrollmentResult[]> {\r\n        this.voiceProfileType = profileType.toString();\r\n        return this.sendCommonRequest<VoiceProfileEnrollmentResult[]>(\"fetch\", profileType);\r\n    }\r\n\r\n    public async getActivationPhrases(profileType: VoiceProfileType, lang: string): Promise<VoiceProfilePhraseResult> {\r\n        this.voiceProfileType = profileType.toString();\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        try {\r\n            const getPhrasesDeferral = new Deferred<VoiceProfilePhraseResult>();\r\n            await conPromise;\r\n            await this.sendPhrasesRequest(getPhrasesDeferral, profileType, lang);\r\n            void this.receiveMessage();\r\n            return getPhrasesDeferral.promise;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    public async enrollProfile(profile: VoiceProfile): Promise<VoiceProfileEnrollmentResult> {\r\n        this.voiceProfileType = profile.profileType.toString();\r\n        const enrollmentDeferral = new Deferred<VoiceProfileEnrollmentResult>();\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privSpeakerAudioSource.events);\r\n\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.Speech_SessionId, this.privRequestSession.sessionId);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n\r\n        const preAudioPromise: Promise<void> = this.sendPreAudioMessages(profile, enrollmentDeferral);\r\n\r\n        const node: IAudioStreamNode = await this.privSpeakerAudioSource.attach(this.privRequestSession.audioNodeId);\r\n        const format: AudioStreamFormatImpl = await this.privSpeakerAudioSource.format;\r\n        const deviceInfo: ISpeechConfigAudioDevice = await this.privSpeakerAudioSource.deviceInfo;\r\n\r\n        const audioNode = new ReplayableAudioNode(node, format.avgBytesPerSec);\r\n        await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n\r\n        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        try {\r\n            await conPromise;\r\n            await preAudioPromise;\r\n        } catch (err) {\r\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, err as string);\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        void this.receiveMessage();\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        // /* eslint-disable no-empty */\r\n        audioSendPromise.then((): void => { /* add? return true;*/ }, (error: string): void => {\r\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n\r\n        return enrollmentDeferral.promise;\r\n    }\r\n\r\n    private async sendPreAudioMessages(profile: VoiceProfile, enrollmentDeferral: Deferred<VoiceProfileEnrollmentResult>): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.privRequestSession.onSpeechContext();\r\n        this.privDeferralMap.add<VoiceProfileEnrollmentResult>(this.privRequestSession.requestId, enrollmentDeferral);\r\n        await this.sendBaseRequest(connection, \"enroll\", this.scenarioFrom(profile.profileType), profile);\r\n    }\r\n\r\n    private async sendPhrasesRequest(getPhrasesDeferral: Deferred<VoiceProfilePhraseResult>, profileType: VoiceProfileType, locale: string): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.privRequestSession.onSpeechContext();\r\n        this.privDeferralMap.add<VoiceProfilePhraseResult>(this.privRequestSession.requestId, getPhrasesDeferral);\r\n        const scenario = this.scenarioFrom(profileType);\r\n\r\n        const profileCreateRequest: PhraseRequest = {\r\n            locale,\r\n            scenario,\r\n        };\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speaker.profile.phrases\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            JSON.stringify(profileCreateRequest)));\r\n    }\r\n\r\n    private async sendCreateProfile(createProfileDeferral: Deferred<string[]>, profileType: VoiceProfileType, locale: string): Promise<void> {\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.privRequestSession.onSpeechContext();\r\n        this.privDeferralMap.add<string[]>(this.privRequestSession.requestId, createProfileDeferral);\r\n        const scenario = profileType === VoiceProfileType.TextIndependentIdentification ? \"TextIndependentIdentification\" :\r\n            profileType === VoiceProfileType.TextIndependentVerification ? \"TextIndependentVerification\" : \"TextDependentVerification\";\r\n\r\n        const profileCreateRequest: CreateProfile = {\r\n            locale,\r\n            number: \"1\",\r\n            scenario,\r\n        };\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speaker.profile.create\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            JSON.stringify(profileCreateRequest)));\r\n    }\r\n\r\n    private async sendCommonRequest<T>(operation: string, profileType: VoiceProfileType, profile: VoiceProfile = undefined): Promise<T> {\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        try {\r\n            const deferral = new Deferred<T>();\r\n            this.privRequestSession.onSpeechContext();\r\n            await conPromise;\r\n            const connection: IConnection = await this.fetchConnection();\r\n            this.privDeferralMap.add<T>(this.privRequestSession.requestId, deferral);\r\n            await this.sendBaseRequest(connection, operation, this.scenarioFrom(profileType), profile);\r\n            void this.receiveMessage();\r\n            return deferral.promise;\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    private async sendBaseRequest(connection: IConnection, operation: string, scenario: string, profile: VoiceProfile): Promise<void> {\r\n        const profileRequest: { maxPageSize?: number; profileIds?: string[]; scenario: string } = {\r\n            scenario\r\n        };\r\n        if (!!profile) {\r\n            profileRequest.profileIds = [ profile.profileId ];\r\n        } else {\r\n            profileRequest.maxPageSize = -1;\r\n        }\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            `speaker.profile.${operation}`,\r\n            this.privRequestSession.requestId,\r\n            \"application/json; charset=utf-8\",\r\n            JSON.stringify(profileRequest)));\r\n    }\r\n\r\n    private extractSpeakerContext(model: SpeakerRecognitionModel): SpeakerContext {\r\n        return {\r\n            features: {\r\n                interimResult: \"enabled\",\r\n                progressiveDetection: \"disabled\",\r\n            },\r\n            profileIds: model.profileIds,\r\n            scenario: model.scenario,\r\n        };\r\n    }\r\n\r\n    private handlePhrasesResponse(response: ProfilePhraseResponse, requestId: string): void {\r\n        if (!!this.privDeferralMap.getId(requestId)) {\r\n            if (response.status.statusCode.toLowerCase() !== \"success\") {\r\n                const reason: ResultReason = ResultReason.Canceled;\r\n                const result = new VoiceProfilePhraseResult(reason, response.status.statusCode, response.passPhraseType, []);\r\n                this.privDeferralMap.complete<VoiceProfilePhraseResult>(requestId, result);\r\n            } else if (!!response.phrases && response.phrases.length > 0) {\r\n                const reason: ResultReason = ResultReason.EnrollingVoiceProfile;\r\n                const result = new VoiceProfilePhraseResult(reason, response.status.statusCode, response.passPhraseType, response.phrases);\r\n                this.privDeferralMap.complete<VoiceProfilePhraseResult>(requestId, result);\r\n            } else {\r\n                throw new Error(\"Voice Profile get activation phrases failed, no phrases received\");\r\n            }\r\n        } else {\r\n            throw new Error(`Voice Profile get activation phrases request for requestID ${requestId} not found`);\r\n        }\r\n    }\r\n\r\n    private handleCreateResponse(response: ProfileResponse, requestId: string): void {\r\n        if (!!response.profiles && response.profiles.length > 0) {\r\n            if (!!this.privDeferralMap.getId(requestId)) {\r\n                const profileIds: string[] = response.profiles.map((profile: IProfile): string => profile.profileId);\r\n                this.privDeferralMap.complete<string[]>(requestId, profileIds);\r\n            } else {\r\n                throw new Error(`Voice Profile create request for requestID ${requestId} not found`);\r\n            }\r\n        } else {\r\n            throw new Error(\"Voice Profile create failed, no profile id received\");\r\n        }\r\n    }\r\n\r\n    private handleResultResponse(response: ProfileResponse, requestId: string): void {\r\n        if (!!this.privDeferralMap.getId(requestId)) {\r\n            const successReason: ResultReason = response.operation.toLowerCase() === \"delete\" ? ResultReason.DeletedVoiceProfile : ResultReason.ResetVoiceProfile;\r\n            const reason: ResultReason = response.status.statusCode.toLowerCase() === \"success\" ? successReason : ResultReason.Canceled;\r\n            const result = new VoiceProfileResult(reason, `statusCode: ${response.status.statusCode}, errorDetails: ${response.status.reason}`);\r\n            this.privDeferralMap.complete<VoiceProfileResult>(requestId, result);\r\n        } else {\r\n            throw new Error(`Voice Profile create request for requestID ${requestId} not found`);\r\n        }\r\n    }\r\n\r\n    private handleFetchResponse(enrollmentResponse: EnrollmentResponse, requestId: string): void {\r\n        if (!!this.privDeferralMap.getId(requestId) && !!enrollmentResponse.profiles[0]) {\r\n            if (!!this.privExpectedProfileId && enrollmentResponse.profiles.length === 1 && enrollmentResponse.profiles[0].profileId === this.privExpectedProfileId) {\r\n                this.privExpectedProfileId = undefined;\r\n                const profileInfo: IProfile = enrollmentResponse.profiles[0];\r\n                const result: VoiceProfileEnrollmentResult = new VoiceProfileEnrollmentResult(\r\n                    this.enrollmentReasonFrom(profileInfo.enrollmentStatus),\r\n                    JSON.stringify(profileInfo),\r\n                    enrollmentResponse.status.reason,\r\n                    );\r\n                this.privDeferralMap.complete<VoiceProfileEnrollmentResult>(requestId, result);\r\n            } else if (enrollmentResponse.profiles.length > 0) {\r\n                const iProfiles: IProfile[] = enrollmentResponse.profiles;\r\n                const profileResults: VoiceProfileEnrollmentResult[] = [];\r\n                for (const profile of iProfiles) {\r\n                    profileResults.push( new VoiceProfileEnrollmentResult(\r\n                        this.enrollmentReasonFrom(profile.enrollmentStatus),\r\n                        JSON.stringify(profile),\r\n                        enrollmentResponse.status.reason,\r\n                    ));\r\n                }\r\n                this.privDeferralMap.complete<VoiceProfileEnrollmentResult[]>(requestId, profileResults);\r\n            }\r\n        } else {\r\n            throw new Error(`Voice Profile fetch request for requestID ${requestId} not found`);\r\n        }\r\n    }\r\n\r\n    private enrollmentReasonFrom(statusCode: string): ResultReason {\r\n        switch (statusCode.toLowerCase()) {\r\n            case \"enrolled\":\r\n                return ResultReason.EnrolledVoiceProfile;\r\n            case \"invalidlocale\":\r\n            case \"invalidphrase\":\r\n            case \"invalidaudioformat\":\r\n            case \"invalidscenario\":\r\n            case \"invalidprofilecount\":\r\n            case \"invalidoperation\":\r\n            case \"audiotooshort\":\r\n            case \"audiotoolong\":\r\n            case \"toomanyenrollments\":\r\n            case \"storageconflict\":\r\n            case \"profilenotfound\":\r\n            case \"incompatibleprofiles\":\r\n            case \"incompleteenrollment\":\r\n                return ResultReason.Canceled;\r\n            default:\r\n                return ResultReason.EnrollingVoiceProfile;\r\n        }\r\n    }\r\n\r\n    private scenarioFrom(profileType: VoiceProfileType): string {\r\n        return profileType === VoiceProfileType.TextIndependentIdentification ? \"TextIndependentIdentification\" :\r\n            profileType === VoiceProfileType.TextIndependentVerification ? \"TextIndependentVerification\" : \"TextDependentVerification\";\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/* eslint-disable max-classes-per-file */\r\n\r\n// The config is serialized and sent as the Speech.Config\r\nexport class SpeechServiceConfig {\r\n    private context: Context;\r\n    private recognition: string;\r\n\r\n    public constructor(context: Context) {\r\n        this.context = context;\r\n    }\r\n\r\n    public serialize(): string {\r\n        return JSON.stringify(this, (key: any, value: { [k: string]: any }): any => {\r\n            if (value && typeof value === \"object\" && !Array.isArray(value)) {\r\n                const replacement: { [k: string ]: any } = {};\r\n                for (const k in value) {\r\n                    if (Object.hasOwnProperty.call(value, k)) {\r\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n                        replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k];\r\n                    }\r\n                }\r\n                return replacement;\r\n            }\r\n            return value;\r\n        });\r\n    }\r\n\r\n    public get Context(): Context {\r\n        return this.context;\r\n    }\r\n\r\n    public get Recognition(): string {\r\n        return this.recognition;\r\n    }\r\n\r\n    public set Recognition(value: string) {\r\n        this.recognition = value.toLowerCase();\r\n    }\r\n}\r\n\r\nexport class Context {\r\n    public system: System;\r\n    public os: OS;\r\n    public audio: ISpeechConfigAudio;\r\n    public synthesis: {\r\n        video: ISynthesisSectionVideo;\r\n    };\r\n\r\n    public constructor(os: OS) {\r\n        this.system = new System();\r\n        this.os = os;\r\n    }\r\n}\r\n\r\nexport class System {\r\n    public name: string;\r\n    public version: string;\r\n    public build: string;\r\n    public lang: string;\r\n\r\n    public constructor() {\r\n        // Note: below will be patched for official builds.\r\n        const SPEECHSDK_CLIENTSDK_VERSION = \"1.40.0\";\r\n\r\n        this.name = \"SpeechSDK\";\r\n        this.version = SPEECHSDK_CLIENTSDK_VERSION;\r\n        this.build = \"JavaScript\";\r\n        this.lang = \"JavaScript\";\r\n    }\r\n}\r\n\r\nexport class OS {\r\n    public platform: string;\r\n    public name: string;\r\n    public version: string;\r\n\r\n    public constructor(platform: string, name: string, version: string) {\r\n        this.platform = platform;\r\n        this.name = name;\r\n        this.version = version;\r\n    }\r\n}\r\n\r\nexport class Device {\r\n    public manufacturer: string;\r\n    public model: string;\r\n    public version: string;\r\n\r\n    public constructor(manufacturer: string, model: string, version: string) {\r\n        this.manufacturer = manufacturer;\r\n        this.model = model;\r\n        this.version = version;\r\n    }\r\n}\r\n\r\nexport interface ISpeechConfigAudio {\r\n    source?: ISpeechConfigAudioDevice;\r\n    playback?: ISpeechConfigAudioDevice;\r\n}\r\n\r\nexport interface ISpeechConfigAudioDevice {\r\n    manufacturer: string;\r\n    model: string;\r\n    connectivity: connectivity;\r\n    type: type;\r\n    samplerate: number;\r\n    bitspersample: number;\r\n    channelcount: number;\r\n}\r\n\r\nexport enum connectivity {\r\n    Bluetooth = \"Bluetooth\",\r\n    Wired = \"Wired\",\r\n    WiFi = \"WiFi\",\r\n    Cellular = \"Cellular\",\r\n    InBuilt = \"InBuilt\",\r\n    Unknown = \"Unknown\",\r\n}\r\n\r\nexport enum type {\r\n    Phone = \"Phone\",\r\n    Speaker = \"Speaker\",\r\n    Car = \"Car\",\r\n    Headset = \"Headset\",\r\n    Thermostat = \"Thermostat\",\r\n    Microphones = \"Microphones\",\r\n    Deskphone = \"Deskphone\",\r\n    RemoteControl = \"RemoteControl\",\r\n    Unknown = \"Unknown\",\r\n    File = \"File\",\r\n    Stream = \"Stream\",\r\n}\r\n\r\nexport interface ICoordinate {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\n// For avatar synthesis\r\nexport interface ISynthesisSectionVideo {\r\n    protocol: {\r\n        name: string;\r\n        webrtcConfig: {\r\n            clientDescription: string;\r\n            iceServers: {\r\n                urls: string[];\r\n                username: string;\r\n                credential: string;\r\n            }[];\r\n        };\r\n    };\r\n    format: {\r\n        bitrate: number;\r\n        codec: string;\r\n        crop: {\r\n            topLeft: ICoordinate;\r\n            bottomRight: ICoordinate;\r\n        };\r\n        resolution: {\r\n            width: number;\r\n            height: number;\r\n        };\r\n    };\r\n    talkingAvatar: {\r\n        character: string;\r\n        customized: boolean;\r\n        style: string;\r\n        background: {\r\n            color: string;\r\n        };\r\n    };\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// Make sure not to export internal modules.\r\n//\r\nexport * from \"./CognitiveSubscriptionKeyAuthentication.js\";\r\nexport * from \"./CognitiveTokenAuthentication.js\";\r\nexport * from \"./IAuthentication.js\";\r\nexport * from \"./IConnectionFactory.js\";\r\nexport * from \"./ISynthesisConnectionFactory.js\";\r\nexport * from \"./IntentConnectionFactory.js\";\r\nexport * from \"./SpeakerRecognitionConnectionFactory.js\";\r\nexport * from \"./RecognitionEvents.js\";\r\nexport * from \"./ServiceRecognizerBase.js\";\r\nexport * from \"./ConversationServiceRecognizer.js\";\r\nexport * from \"./RecognizerConfig.js\";\r\nexport * from \"./SpeechServiceInterfaces.js\";\r\nexport * from \"./WebsocketMessageFormatter.js\";\r\nexport * from \"./SpeechConnectionFactory.js\";\r\nexport * from \"./ConversationTranscriberConnectionFactory.js\";\r\nexport * from \"./TranscriberConnectionFactory.js\";\r\nexport * from \"./TranslationConnectionFactory.js\";\r\nexport * from \"./SpeechSynthesisConnectionFactory.js\";\r\nexport * from \"./EnumTranslation.js\";\r\nexport * from \"./ServiceMessages/Enums.js\";\r\nexport * from \"./ServiceMessages/TranslationSynthesisEnd.js\";\r\nexport * from \"./ServiceMessages/TranslationHypothesis.js\";\r\nexport * from \"./ServiceMessages/TranslationPhrase.js\";\r\nexport * from \"./TranslationServiceRecognizer.js\";\r\nexport * from \"./ServiceMessages/SpeechDetected.js\";\r\nexport * from \"./ServiceMessages/SpeechHypothesis.js\";\r\nexport * from \"./ServiceMessages/SpeechKeyword.js\";\r\nexport * from \"./SpeechServiceRecognizer.js\";\r\nexport * from \"./ConversationTranscriptionServiceRecognizer.js\";\r\nexport * from \"./TranscriptionServiceRecognizer.js\";\r\nexport * from \"./ServiceMessages/DetailedSpeechPhrase.js\";\r\nexport * from \"./ServiceMessages/SimpleSpeechPhrase.js\";\r\nexport * from \"./AddedLmIntent.js\";\r\nexport * from \"./IntentServiceRecognizer.js\";\r\nexport * from \"./ServiceMessages/IntentResponse.js\";\r\nexport * from \"./ServiceMessages/SpeakerResponse.js\";\r\nexport * from \"./RequestSession.js\";\r\nexport * from \"./SpeechContext.js\";\r\nexport * from \"./DynamicGrammarBuilder.js\";\r\nexport * from \"./DynamicGrammarInterfaces.js\";\r\nexport * from \"./DialogServiceAdapter.js\";\r\nexport * from \"./AgentConfig.js\";\r\nexport * from \"./Transcription/Exports.js\";\r\nexport * from \"./ServiceMessages/SynthesisAudioMetadata.js\";\r\nexport * from \"./SynthesisTurn.js\";\r\nexport * from \"./SynthesisAdapterBase.js\";\r\nexport { AvatarSynthesisAdapter } from \"./AvatarSynthesisAdapter.js\";\r\nexport { SpeechSynthesisAdapter } from \"./SpeechSynthesisAdapter.js\";\r\nexport * from \"./SynthesisRestAdapter.js\";\r\nexport * from \"./SynthesizerConfig.js\";\r\nexport * from \"./SynthesisContext.js\";\r\nexport * from \"./SpeakerRecognitionConfig.js\";\r\nexport * from \"./SpeakerServiceRecognizer.js\";\r\nexport * from \"./VoiceServiceRecognizer.js\";\r\nexport * from \"./SpeechServiceConfig.js\";\r\n\r\nexport const OutputFormatPropertyName: string = \"OutputFormat\";\r\nexport const CancellationErrorCodePropertyName: string = \"CancellationErrorCode\";\r\nexport const ServicePropertiesPropertyName: string = \"ServiceProperties\";\r\nexport const ForceDictationPropertyName: string = \"ForceDictation\";\r\nexport const AutoDetectSourceLanguagesOpenRangeOptionName: string = \"OpenRange\";\r\n", "/* eslint-disable @typescript-eslint/no-unused-vars */\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { AgentConfig } from \"./src/common.speech/Exports.js\";\r\n\r\n// Note: this instantiation ensures the above import isn't\r\n// removed on compile. The import being absent causes an error on running\r\nvoid new AgentConfig();\r\n\r\n// Speech SDK API\r\nexport * from \"./src/sdk/Exports.js\";\r\n", "// We are only importing what we need.\n\nimport {\n  AudioConfig,\n  OutputFormat,\n  ResultReason,\n  SpeechConfig,\n  SpeechRecognizer\n} from 'microsoft-cognitiveservices-speech-sdk/distrib/lib/microsoft.cognitiveservices.speech.sdk';\n\nexport default {\n  AudioConfig,\n  OutputFormat,\n  ResultReason,\n  SpeechConfig,\n  SpeechRecognizer\n};\n", "import arrayToMap from '../../Util/arrayToMap';\nimport SpeechSDK from '../SpeechSDK';\n\nconst {\n  ResultReason: { RecognizingSpeech, RecognizedSpeech }\n} = SpeechSDK;\n\nexport default function(result, { maxAlternatives = Infinity, textNormalization = 'display' } = {}) {\n  if (result.reason === RecognizingSpeech || (result.reason === RecognizedSpeech && !result.json.NBest)) {\n    const resultList = [\n      {\n        confidence: 0.5,\n        transcript: result.text\n      }\n    ];\n\n    if (result.reason === RecognizedSpeech) {\n      resultList.isFinal = true;\n    }\n\n    return resultList;\n  } else if (result.reason === RecognizedSpeech) {\n    const resultList = arrayToMap(\n      (result.json.NBest || [])\n        .slice(0, maxAlternatives)\n        .map(({ Confidence: confidence, Display: display, ITN: itn, Lexical: lexical, MaskedITN: maskedITN }) => ({\n          confidence,\n          transcript:\n            textNormalization === 'itn'\n              ? itn\n              : textNormalization === 'lexical'\n              ? lexical\n              : textNormalization === 'maskeditn'\n              ? maskedITN\n              : display\n        })),\n      { isFinal: true }\n    );\n\n    return resultList;\n  }\n\n  return [];\n}\n", "import createDeferred from 'p-defer-es5';\n\nexport default function() {\n  let shiftDeferred;\n  const queue = [];\n\n  const push = value => {\n    if (shiftDeferred) {\n      const { resolve } = shiftDeferred;\n\n      shiftDeferred = null;\n      resolve(value);\n    } else {\n      queue.push(value);\n    }\n  };\n\n  const shift = () => {\n    if (queue.length) {\n      return Promise.resolve(queue.shift());\n    }\n\n    return (shiftDeferred || (shiftDeferred = createDeferred())).promise;\n  };\n\n  return {\n    push,\n    shift\n  };\n}\n", "/* eslint class-methods-use-this: \"off\" */\n\nexport default class {\n  constructor() {\n    this._phrases = [];\n  }\n\n  addFromString() {\n    throw new Error('JSGF is not supported');\n  }\n\n  get phrases() {\n    return this._phrases;\n  }\n\n  set phrases(value) {\n    if (Array.isArray(value)) {\n      this._phrases = value;\n    } else if (typeof value === 'string') {\n      this._phrases = [value];\n    } else {\n      throw new Error(`The provided value is not an array or of type 'string'`);\n    }\n  }\n}\n", "/* eslint class-methods-use-this: \"off\" */\n/* eslint complexity: [\"error\", 70] */\n/* eslint no-await-in-loop: \"off\" */\n/* eslint no-empty-function: \"off\" */\n/* eslint no-magic-numbers: [\"error\", { \"ignore\": [0, 100, 150] }] */\n\nimport { Event, EventTarget, getEventAttributeValue, setEventAttributeValue } from 'event-target-shim/es5';\n\nimport cognitiveServiceEventResultToWebSpeechRecognitionResultList from './cognitiveServiceEventResultToWebSpeechRecognitionResultList';\nimport createPromiseQueue from '../../Util/createPromiseQueue';\nimport patchOptions from '../patchOptions';\nimport SpeechGrammarList from './SpeechGrammarList';\nimport SpeechSDK from '../SpeechSDK';\n\n// https://docs.microsoft.com/en-us/javascript/api/microsoft-cognitiveservices-speech-sdk/speechconfig?view=azure-node-latest#outputformat\n// {\n//   \"RecognitionStatus\": \"Success\",\n//   \"Offset\": 900000,\n//   \"Duration\": 49000000,\n//   \"NBest\": [\n//     {\n//       \"Confidence\": 0.738919,\n//       \"Lexical\": \"second\",\n//       \"ITN\": \"second\",\n//       \"MaskedITN\": \"second\",\n//       \"Display\": \"Second.\"\n//     }\n//   ]\n// }\n\n// {\n//   \"RecognitionStatus\": \"InitialSilenceTimeout\",\n//   \"Offset\": 50000000,\n//   \"Duration\": 0\n// }\n\nconst { AudioConfig, OutputFormat, ResultReason, SpeechConfig, SpeechRecognizer } = SpeechSDK;\n\nfunction serializeRecognitionResult({ duration, errorDetails, json, offset, properties, reason, resultId, text }) {\n  return {\n    duration,\n    errorDetails,\n    json: JSON.parse(json),\n    offset,\n    properties,\n    reason,\n    resultId,\n    text\n  };\n}\n\nfunction averageAmplitude(arrayBuffer) {\n  const array = new Int16Array(arrayBuffer);\n\n  return (\n    [].reduce.call(array, (averageAmplitude, amplitude) => averageAmplitude + Math.abs(amplitude), 0) / array.length\n  );\n}\n\nfunction cognitiveServicesAsyncToPromise(fn) {\n  return (...args) => new Promise((resolve, reject) => fn(...args, resolve, reject));\n}\n\nclass SpeechRecognitionEvent extends Event {\n  constructor(type, { data, emma, interpretation, resultIndex, results } = {}) {\n    super(type);\n\n    this.data = data;\n    this.emma = emma;\n    this.interpretation = interpretation;\n    this.resultIndex = resultIndex;\n    this.results = results;\n  }\n}\n\nfunction prepareAudioConfig(audioConfig) {\n  const originalAttach = audioConfig.attach;\n  const boundOriginalAttach = audioConfig.attach.bind(audioConfig);\n  let firstChunk;\n  let muted;\n\n  // We modify \"attach\" function and detect when audible chunk is read.\n  // We will only modify \"attach\" function once.\n  audioConfig.attach = async () => {\n    const reader = await boundOriginalAttach();\n\n    return {\n      ...reader,\n      read: async () => {\n        const chunk = await reader.read();\n\n        // The magic number 150 is measured by:\n        // 1. Set microphone volume to 0\n        // 2. Observe the amplitude (100-110) for the first few chunks\n        //    (There is a short static caught when turning on the microphone)\n        // 3. Set the number a bit higher than the observation\n\n        if (!firstChunk && averageAmplitude(chunk.buffer) > 150) {\n          audioConfig.events.onEvent({ name: 'FirstAudibleChunk' });\n          firstChunk = true;\n        }\n\n        if (muted) {\n          return { buffer: new ArrayBuffer(0), isEnd: true, timeReceived: Date.now() };\n        }\n\n        return chunk;\n      }\n    };\n  };\n\n  return {\n    audioConfig,\n    pause: () => {\n      muted = true;\n    },\n    unprepare: () => {\n      audioConfig.attach = originalAttach;\n    }\n  };\n}\n\nexport function createSpeechRecognitionPonyfillFromRecognizer({\n  createRecognizer,\n  enableTelemetry,\n  looseEvents,\n  referenceGrammars,\n  textNormalization\n}) {\n  // If enableTelemetry is set to null or non-boolean, we will default to true.\n  SpeechRecognizer.enableTelemetry(enableTelemetry !== false);\n\n  class SpeechRecognition extends EventTarget {\n    constructor() {\n      super();\n\n      this._continuous = false;\n      this._interimResults = false;\n      this._lang =\n        typeof window !== 'undefined'\n          ? window.document.documentElement.getAttribute('lang') || window.navigator.language\n          : 'en-US';\n      this._grammars = new SpeechGrammarList();\n      this._maxAlternatives = 1;\n    }\n\n    emitCognitiveServices(type, event) {\n      this.dispatchEvent(\n        new SpeechRecognitionEvent('cognitiveservices', {\n          data: {\n            ...event,\n            type\n          }\n        })\n      );\n    }\n\n    get continuous() {\n      return this._continuous;\n    }\n\n    set continuous(value) {\n      this._continuous = value;\n    }\n\n    get grammars() {\n      return this._grammars;\n    }\n\n    set grammars(value) {\n      if (value instanceof SpeechGrammarList) {\n        this._grammars = value;\n      } else {\n        throw new Error(`The provided value is not of type 'SpeechGrammarList'`);\n      }\n    }\n\n    get interimResults() {\n      return this._interimResults;\n    }\n\n    set interimResults(value) {\n      this._interimResults = value;\n    }\n\n    get maxAlternatives() {\n      return this._maxAlternatives;\n    }\n\n    set maxAlternatives(value) {\n      this._maxAlternatives = value;\n    }\n\n    get lang() {\n      return this._lang;\n    }\n\n    set lang(value) {\n      this._lang = value;\n    }\n\n    get onaudioend() {\n      return getEventAttributeValue(this, 'audioend');\n    }\n\n    set onaudioend(value) {\n      setEventAttributeValue(this, 'audioend', value);\n    }\n\n    get onaudiostart() {\n      return getEventAttributeValue(this, 'audiostart');\n    }\n\n    set onaudiostart(value) {\n      setEventAttributeValue(this, 'audiostart', value);\n    }\n\n    get oncognitiveservices() {\n      return getEventAttributeValue(this, 'cognitiveservices');\n    }\n\n    set oncognitiveservices(value) {\n      setEventAttributeValue(this, 'cognitiveservices', value);\n    }\n\n    get onend() {\n      return getEventAttributeValue(this, 'end');\n    }\n\n    set onend(value) {\n      setEventAttributeValue(this, 'end', value);\n    }\n\n    get onerror() {\n      return getEventAttributeValue(this, 'error');\n    }\n\n    set onerror(value) {\n      setEventAttributeValue(this, 'error', value);\n    }\n\n    get onresult() {\n      return getEventAttributeValue(this, 'result');\n    }\n\n    set onresult(value) {\n      setEventAttributeValue(this, 'result', value);\n    }\n\n    get onsoundend() {\n      return getEventAttributeValue(this, 'soundend');\n    }\n\n    set onsoundend(value) {\n      setEventAttributeValue(this, 'soundend', value);\n    }\n\n    get onsoundstart() {\n      return getEventAttributeValue(this, 'soundstart');\n    }\n\n    set onsoundstart(value) {\n      setEventAttributeValue(this, 'soundstart', value);\n    }\n\n    get onspeechend() {\n      return getEventAttributeValue(this, 'speechend');\n    }\n\n    set onspeechend(value) {\n      setEventAttributeValue(this, 'speechend', value);\n    }\n\n    get onspeechstart() {\n      return getEventAttributeValue(this, 'speechstart');\n    }\n\n    set onspeechstart(value) {\n      setEventAttributeValue(this, 'speechstart', value);\n    }\n\n    get onstart() {\n      return getEventAttributeValue(this, 'start');\n    }\n\n    set onstart(value) {\n      setEventAttributeValue(this, 'start', value);\n    }\n\n    start() {\n      this._startOnce().catch(err => {\n        this.dispatchEvent(new ErrorEvent('error', { error: err, message: err && (err.stack || err.message) }));\n      });\n    }\n\n    async _startOnce() {\n      // TODO: [P2] Should check if recognition is active, we should not start recognition twice\n      const recognizer = await createRecognizer(this.lang);\n\n      const { pause, unprepare } = prepareAudioConfig(recognizer.audioConfig);\n\n      try {\n        const queue = createPromiseQueue();\n        let soundStarted;\n        let speechStarted;\n        let stopping;\n\n        const { detach: detachAudioConfigEvent } = recognizer.audioConfig.events.attach(event => {\n          const { name } = event;\n\n          if (name === 'AudioSourceReadyEvent') {\n            queue.push({ audioSourceReady: {} });\n          } else if (name === 'AudioSourceOffEvent') {\n            queue.push({ audioSourceOff: {} });\n          } else if (name === 'FirstAudibleChunk') {\n            queue.push({ firstAudibleChunk: {} });\n          }\n        });\n\n        recognizer.canceled = (_, { errorDetails, offset, reason, sessionId }) => {\n          queue.push({\n            canceled: {\n              errorDetails,\n              offset,\n              reason,\n              sessionId\n            }\n          });\n        };\n\n        recognizer.recognized = (_, { offset, result, sessionId }) => {\n          queue.push({\n            recognized: {\n              offset,\n              result: serializeRecognitionResult(result),\n              sessionId\n            }\n          });\n        };\n\n        recognizer.recognizing = (_, { offset, result, sessionId }) => {\n          queue.push({\n            recognizing: {\n              offset,\n              result: serializeRecognitionResult(result),\n              sessionId\n            }\n          });\n        };\n\n        recognizer.sessionStarted = (_, { sessionId }) => {\n          queue.push({ sessionStarted: { sessionId } });\n        };\n\n        recognizer.sessionStopped = (_, { sessionId }) => {\n          // \"sessionStopped\" is never fired, probably because we are using startContinuousRecognitionAsync instead of recognizeOnceAsync.\n          queue.push({ sessionStopped: { sessionId } });\n        };\n\n        recognizer.speechStartDetected = (_, { offset, sessionId }) => {\n          queue.push({ speechStartDetected: { offset, sessionId } });\n        };\n\n        recognizer.speechEndDetected = (_, { sessionId }) => {\n          // \"speechEndDetected\" is never fired, probably because we are using startContinuousRecognitionAsync instead of recognizeOnceAsync.\n          // Update: \"speechEndDetected\" is fired for DLSpeech.listenOnceAsync()\n          queue.push({ speechEndDetected: { sessionId } });\n        };\n\n        const { phrases } = this.grammars;\n\n        // HACK: We are using the internal of SpeechRecognizer because they did not expose it\n        const { dynamicGrammar } = recognizer.privReco;\n\n        referenceGrammars && referenceGrammars.length && dynamicGrammar.addReferenceGrammar(referenceGrammars);\n        phrases && phrases.length && dynamicGrammar.addPhrase(phrases);\n\n        await cognitiveServicesAsyncToPromise(recognizer.startContinuousRecognitionAsync.bind(recognizer))();\n\n        if (recognizer.stopContinuousRecognitionAsync) {\n          this.abort = () => queue.push({ abort: {} });\n          this.stop = () => queue.push({ stop: {} });\n        } else {\n          this.abort = this.stop = undefined;\n        }\n\n        let audioStarted;\n        let finalEvent;\n        let finalizedResults = [];\n\n        for (let loop = 0; !stopping || audioStarted; loop++) {\n          const event = await queue.shift();\n          const {\n            abort,\n            audioSourceOff,\n            audioSourceReady,\n            canceled,\n            firstAudibleChunk,\n            recognized,\n            recognizing,\n            stop\n          } = event;\n\n          // We are emitting event \"cognitiveservices\" for debugging purpose.\n          Object.keys(event).forEach(name => this.emitCognitiveServices(name, event[name]));\n\n          const errorMessage = canceled && canceled.errorDetails;\n\n          if (/Permission\\sdenied/u.test(errorMessage || '')) {\n            // If microphone is not allowed, we should not emit \"start\" event.\n\n            finalEvent = {\n              error: 'not-allowed',\n              type: 'error'\n            };\n\n            break;\n          }\n\n          if (!loop) {\n            this.dispatchEvent(new SpeechRecognitionEvent('start'));\n          }\n\n          if (errorMessage) {\n            if (/1006/u.test(errorMessage)) {\n              if (!audioStarted) {\n                this.dispatchEvent(new SpeechRecognitionEvent('audiostart'));\n                this.dispatchEvent(new SpeechRecognitionEvent('audioend'));\n              }\n\n              finalEvent = {\n                error: 'network',\n                type: 'error'\n              };\n            } else {\n              finalEvent = {\n                error: 'unknown',\n                type: 'error'\n              };\n            }\n\n            break;\n          } else if (abort || stop) {\n            if (abort) {\n              finalEvent = {\n                error: 'aborted',\n                type: 'error'\n              };\n\n              // If we are aborting, we will ignore lingering recognizing/recognized events. But if we are stopping, we need them.\n              stopping = 'abort';\n            } else {\n              // When we pause, we will send { isEnd: true }, Speech Services will send us \"recognized\" event.\n              pause();\n              stopping = 'stop';\n            }\n\n            // Abort should not be dispatched without support of \"stopContinuousRecognitionAsync\".\n            // But for defensive purpose, we make sure \"stopContinuousRecognitionAsync\" is available before we can call.\n            if (abort && recognizer.stopContinuousRecognitionAsync) {\n              await cognitiveServicesAsyncToPromise(recognizer.stopContinuousRecognitionAsync.bind(recognizer))();\n            }\n          } else if (audioSourceReady) {\n            this.dispatchEvent(new SpeechRecognitionEvent('audiostart'));\n\n            audioStarted = true;\n          } else if (firstAudibleChunk) {\n            this.dispatchEvent(new SpeechRecognitionEvent('soundstart'));\n\n            soundStarted = true;\n          } else if (audioSourceOff) {\n            // Looks like we don't need this line and all the tests are still working.\n            // Guessing probably stopping is already truthy.\n            // stopping = true;\n\n            speechStarted && this.dispatchEvent(new SpeechRecognitionEvent('speechend'));\n            soundStarted && this.dispatchEvent(new SpeechRecognitionEvent('soundend'));\n            audioStarted && this.dispatchEvent(new SpeechRecognitionEvent('audioend'));\n\n            audioStarted = soundStarted = speechStarted = false;\n\n            break;\n          } else if (stopping !== 'abort') {\n            if (recognized && recognized.result && recognized.result.reason === ResultReason.NoMatch) {\n              finalEvent = {\n                error: 'no-speech',\n                type: 'error'\n              };\n            } else if (recognized || recognizing) {\n              if (!audioStarted) {\n                // Unconfirmed prevention of quirks\n                this.dispatchEvent(new SpeechRecognitionEvent('audiostart'));\n\n                audioStarted = true;\n              }\n\n              if (!soundStarted) {\n                this.dispatchEvent(new SpeechRecognitionEvent('soundstart'));\n\n                soundStarted = true;\n              }\n\n              if (!speechStarted) {\n                this.dispatchEvent(new SpeechRecognitionEvent('speechstart'));\n\n                speechStarted = true;\n              }\n\n              if (recognized) {\n                const result = cognitiveServiceEventResultToWebSpeechRecognitionResultList(recognized.result, {\n                  maxAlternatives: this.maxAlternatives,\n                  textNormalization\n                });\n\n                const recognizable = !!result[0].transcript;\n\n                if (recognizable) {\n                  finalizedResults = [...finalizedResults, result];\n\n                  this.continuous &&\n                    this.dispatchEvent(\n                      new SpeechRecognitionEvent('result', {\n                        results: finalizedResults\n                      })\n                    );\n                }\n\n                // If it is continuous, we just sent the finalized results. So we don't need to send it again after \"audioend\" event.\n                if (this.continuous && recognizable) {\n                  finalEvent = null;\n                } else {\n                  finalEvent = {\n                    results: finalizedResults,\n                    type: 'result'\n                  };\n                }\n\n                if (!this.continuous && recognizer.stopContinuousRecognitionAsync) {\n                  await cognitiveServicesAsyncToPromise(recognizer.stopContinuousRecognitionAsync.bind(recognizer))();\n                }\n\n                // If event order can be loosened, we can send the recognized event as soon as we receive it.\n                // 1. If it is not recognizable (no-speech), we should send an \"error\" event just before \"end\" event. We will not loosen \"error\" events.\n                if (looseEvents && finalEvent && recognizable) {\n                  this.dispatchEvent(new SpeechRecognitionEvent(finalEvent.type, finalEvent));\n                  finalEvent = null;\n                }\n              } else if (recognizing) {\n                this.interimResults &&\n                  this.dispatchEvent(\n                    new SpeechRecognitionEvent('result', {\n                      results: [\n                        ...finalizedResults,\n                        cognitiveServiceEventResultToWebSpeechRecognitionResultList(recognizing.result, {\n                          maxAlternatives: this.maxAlternatives,\n                          textNormalization\n                        })\n                      ]\n                    })\n                  );\n              }\n            }\n          }\n        }\n\n        if (speechStarted) {\n          this.dispatchEvent(new SpeechRecognitionEvent('speechend'));\n        }\n\n        if (soundStarted) {\n          this.dispatchEvent(new SpeechRecognitionEvent('soundend'));\n        }\n\n        if (audioStarted) {\n          this.dispatchEvent(new SpeechRecognitionEvent('audioend'));\n        }\n\n        if (finalEvent) {\n          if (finalEvent.type === 'result' && !finalEvent.results.length) {\n            finalEvent = {\n              error: 'no-speech',\n              type: 'error'\n            };\n          }\n\n          if (finalEvent.type === 'error') {\n            this.dispatchEvent(new ErrorEvent('error', finalEvent));\n          } else {\n            this.dispatchEvent(new SpeechRecognitionEvent(finalEvent.type, finalEvent));\n          }\n        }\n\n        // Even though there is no \"start\" event emitted, we will still emit \"end\" event\n        // This is mainly for \"microphone blocked\" story.\n        this.dispatchEvent(new SpeechRecognitionEvent('end'));\n\n        detachAudioConfigEvent();\n      } catch (err) {\n        // Logging out the erorr because Speech SDK would fail silently.\n        console.error(err);\n\n        throw err;\n      } finally {\n        unprepare();\n        recognizer.dispose();\n      }\n    }\n  }\n\n  return {\n    SpeechGrammarList,\n    SpeechRecognition,\n    SpeechRecognitionEvent\n  };\n}\n\nexport default options => {\n  const {\n    audioConfig = AudioConfig.fromDefaultMicrophoneInput(),\n\n    // We set telemetry to true to honor the default telemetry settings of Speech SDK\n    // https://github.com/Microsoft/cognitive-services-speech-sdk-js#data--telemetry\n    enableTelemetry = true,\n\n    fetchCredentials,\n    looseEvents,\n    referenceGrammars,\n    speechRecognitionEndpointId,\n    textNormalization = 'display'\n  } = patchOptions(options);\n\n  if (!audioConfig && (!window.navigator.mediaDevices || !window.navigator.mediaDevices.getUserMedia)) {\n    console.warn(\n      'web-speech-cognitive-services: This browser does not support WebRTC and it will not work with Cognitive Services Speech Services.'\n    );\n\n    return {};\n  }\n\n  const createRecognizer = async lang => {\n    const { authorizationToken, region, speechRecognitionHostname, subscriptionKey } = await fetchCredentials();\n    let speechConfig;\n\n    if (speechRecognitionHostname) {\n      const host = { hostname: speechRecognitionHostname, port: 443, protocol: 'wss:' };\n\n      if (authorizationToken) {\n        speechConfig = SpeechConfig.fromHost(host);\n        speechConfig.authorizationToken = authorizationToken;\n      } else {\n        speechConfig = SpeechConfig.fromHost(host, subscriptionKey);\n      }\n    } else {\n      speechConfig = authorizationToken\n        ? SpeechConfig.fromAuthorizationToken(authorizationToken, region)\n        : SpeechConfig.fromSubscription(subscriptionKey, region);\n    }\n\n    if (speechRecognitionEndpointId) {\n      speechConfig.endpointId = speechRecognitionEndpointId;\n    }\n\n    speechConfig.outputFormat = OutputFormat.Detailed;\n    speechConfig.speechRecognitionLanguage = lang || 'en-US';\n\n    return new SpeechRecognizer(speechConfig, audioConfig);\n  };\n\n  return createSpeechRecognitionPonyfillFromRecognizer({\n    audioConfig,\n    createRecognizer,\n    enableTelemetry,\n    looseEvents,\n    referenceGrammars,\n    textNormalization\n  });\n};\n", "import createSpeechRecognitionPonyfill, {\n  createSpeechRecognitionPonyfillFromRecognizer\n} from './SpeechToText/createSpeechRecognitionPonyfill';\n\nexport default createSpeechRecognitionPonyfill;\n\nexport { createSpeechRecognitionPonyfillFromRecognizer };\n", "\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.asrMachine = void 0;\nconst xstate_1 = require(\"xstate\");\nconst getToken_1 = require(\"./getToken\");\nconst SpeechToText_1 = require(\"web-speech-cognitive-services/lib/SpeechServices/SpeechToText\");\nexports.asrMachine = (0, xstate_1.setup)({\n    types: {\n        context: {},\n        events: {},\n        input: {},\n    },\n    actions: {\n        recStop: ({ context }) => {\n            context.wsaASRinstance.abort();\n            console.debug(\"[ASR] stopped\");\n        },\n    },\n    actors: {\n        getToken: getToken_1.getToken,\n        ponyfill: (0, xstate_1.fromCallback)(({ sendBack, input }) => {\n            const { SpeechGrammarList, SpeechRecognition } = (0, SpeechToText_1.default)({\n                audioContext: input.audioContext,\n                speechRecognitionEndpointId: input.speechRecognitionEndpointId,\n                credentials: {\n                    region: input.azureRegion,\n                    authorizationToken: input.azureAuthorizationToken,\n                },\n            });\n            sendBack({\n                type: \"READY\",\n                value: {\n                    wsaASR: SpeechRecognition,\n                    wsaGrammarList: SpeechGrammarList,\n                },\n            });\n            console.debug(\"[ASR] READY\", input);\n        }),\n        recStart: (0, xstate_1.fromCallback)(({ sendBack, input }) => {\n            let asr = new input.wsaASR();\n            asr.grammars = new input.wsaGrammarList();\n            asr.grammars.phrases = input.phrases || [];\n            asr.lang = input.locale;\n            asr.continuous = true;\n            asr.interimResults = true;\n            asr.onresult = function (event) {\n                if (event.results[event.results.length - 1].isFinal) {\n                    const transcript = event.results\n                        .map((x) => x[0].transcript.replace(/\\.$/, \"\"))\n                        .join(\" \");\n                    const confidence = event.results\n                        .map((x) => x[0].confidence)\n                        .reduce((a, b) => a + b) / event.results.length;\n                    const res = [\n                        {\n                            utterance: transcript,\n                            confidence: confidence,\n                        },\n                    ];\n                    sendBack({\n                        type: \"RESULT\",\n                        value: res,\n                    });\n                    console.debug(\"[ASR] RESULT (pre-final)\", res);\n                }\n                else {\n                    sendBack({ type: \"STARTSPEECH\" });\n                }\n            };\n            asr.addEventListener(\"start\", () => {\n                sendBack({ type: \"STARTED\", value: { wsaASRinstance: asr } });\n            });\n            // receive((event) => {\n            //   console.debug(\"bla\");\n            //   if (event.type === \"STOP\") {\n            //     asr.abort();\n            //   }\n            // });\n            asr.start();\n        }),\n        nluPromise: (0, xstate_1.fromPromise)(({ input }) => __awaiter(void 0, void 0, void 0, function* () {\n            const response = yield fetch(new Request(input.endpoint, {\n                method: \"POST\",\n                headers: {\n                    \"Ocp-Apim-Subscription-Key\": input.key,\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    kind: \"Conversation\",\n                    analysisInput: {\n                        conversationItem: {\n                            id: \"PARTICIPANT_ID_HERE\",\n                            text: input.query,\n                            modality: \"text\",\n                            language: \"en-US\", // TODO\n                            participantId: \"PARTICIPANT_ID_HERE\",\n                        },\n                    },\n                    parameters: {\n                        projectName: input.projectName,\n                        verbose: true,\n                        deploymentName: input.deploymentName,\n                        stringIndexType: \"TextElement_V8\",\n                    },\n                }),\n            }));\n            return response.json();\n        })),\n    },\n}).createMachine({\n    id: \"asr\",\n    context: ({ input }) => ({\n        asrDefaultCompleteTimeout: input.asrDefaultCompleteTimeout || 0,\n        asrDefaultNoInputTimeout: input.asrDefaultNoInputTimeout || 5000,\n        locale: input.locale || \"en-US\",\n        audioContext: input.audioContext,\n        azureCredentials: input.azureCredentials,\n        azureRegion: input.azureRegion,\n        azureLanguageCredentials: input.azureLanguageCredentials,\n        speechRecognitionEndpointId: input.speechRecognitionEndpointId,\n    }),\n    initial: \"GetToken\",\n    on: {\n        READY: {\n            target: \".Ready\",\n            actions: [\n                (0, xstate_1.assign)({\n                    wsaASR: ({ event }) => event.value.wsaASR,\n                    wsaGrammarList: ({ event }) => event.value.wsaGrammarList,\n                }),\n                (0, xstate_1.sendParent)({ type: \"ASR_READY\" }),\n            ],\n        },\n    },\n    states: {\n        Fail: {},\n        Ready: {\n            on: {\n                START: {\n                    target: \"Recognising\",\n                    actions: (0, xstate_1.assign)({ params: ({ event }) => event.value || {} }),\n                },\n            },\n        },\n        Recognising: {\n            initial: \"WaitForRecogniser\",\n            invoke: {\n                id: \"recStart\",\n                input: ({ context }) => ({\n                    wsaASR: context.wsaASR,\n                    wsaGrammarList: context.wsaGrammarList,\n                    locale: context.locale,\n                    phrases: (context.params || {}).hints || [],\n                }),\n                src: \"recStart\",\n            },\n            exit: \"recStop\",\n            on: {\n                RESULT: {\n                    actions: [\n                        (0, xstate_1.assign)({\n                            result: ({ event }) => event.value,\n                        }),\n                        (0, xstate_1.cancel)(\"completeTimeout\"),\n                    ],\n                    target: \".Match\",\n                },\n                RECOGNISED: [\n                    {\n                        target: \".NLURequest\",\n                        guard: ({ context }) => !!(context.params.nlu && context.azureLanguageCredentials),\n                    },\n                    {\n                        target: \"Ready\",\n                        actions: [\n                            (0, xstate_1.sendParent)(({ context }) => ({\n                                type: \"RECOGNISED\",\n                                value: context.result,\n                            })),\n                        ],\n                    },\n                ],\n                CONTROL: {\n                    target: \"Paused\",\n                },\n                STOP: {\n                    target: \"Ready\",\n                },\n                NOINPUT: {\n                    actions: (0, xstate_1.sendParent)({ type: \"ASR_NOINPUT\" }),\n                    target: \"Ready\",\n                },\n            },\n            states: {\n                WaitForRecogniser: {\n                    on: {\n                        STARTED: {\n                            target: \"NoInput\",\n                            actions: [\n                                (0, xstate_1.assign)({\n                                    wsaASRinstance: ({ event }) => event.value.wsaASRinstance,\n                                }),\n                                (0, xstate_1.sendParent)({ type: \"ASR_STARTED\" }),\n                            ],\n                        },\n                    },\n                },\n                NoInput: {\n                    entry: [\n                        (0, xstate_1.raise)({ type: \"NOINPUT\" }, {\n                            delay: ({ context }) => (context.params || {}).noInputTimeout ||\n                                context.asrDefaultNoInputTimeout,\n                            id: \"timeout\",\n                        }),\n                    ],\n                    on: {\n                        STARTSPEECH: {\n                            target: \"InProgress\",\n                            actions: (0, xstate_1.cancel)(\"completeTimeout\"),\n                        },\n                    },\n                    exit: [(0, xstate_1.cancel)(\"timeout\")],\n                },\n                InProgress: {\n                    entry: () => console.debug(\"[ASR] in progress\"),\n                },\n                Match: {\n                    entry: [\n                        ({ context }) => console.debug(\"RECOGNISED will be sent in (ms)\", (context.params || {}).completeTimeout ||\n                            context.asrDefaultCompleteTimeout),\n                        (0, xstate_1.raise)({ type: \"RECOGNISED\" }, {\n                            delay: ({ context }) => (context.params || {}).completeTimeout ||\n                                context.asrDefaultCompleteTimeout,\n                            id: \"completeTimeout\",\n                        }),\n                    ],\n                },\n                NLURequest: {\n                    invoke: {\n                        src: \"nluPromise\",\n                        input: ({ context }) => {\n                            let c;\n                            typeof context.params.nlu === \"boolean\"\n                                ? (c = context.azureLanguageCredentials)\n                                : (c = context.params.nlu);\n                            return {\n                                endpoint: c.endpoint,\n                                key: c.key,\n                                projectName: c.projectName,\n                                deploymentName: c.deploymentName,\n                                query: context.result[0].utterance,\n                            };\n                        },\n                        onDone: [\n                            {\n                                actions: [\n                                    ({ event }) => console.error(\"[ASR] no NLU prediction\", event.output),\n                                    (0, xstate_1.sendParent)(({ context }) => ({\n                                        type: \"RECOGNISED\",\n                                        value: context.result,\n                                    })),\n                                ],\n                                target: \"#asr.Ready\",\n                                guard: ({ event }) => !(event.output.result || {}).prediction,\n                            },\n                            {\n                                actions: [\n                                    ({ event }) => console.debug(\"[ASR] NLU result\", event.output.result.prediction),\n                                    (0, xstate_1.sendParent)(({ context, event }) => ({\n                                        type: \"RECOGNISED\",\n                                        value: context.result,\n                                        nluValue: event.output.result.prediction,\n                                    })),\n                                ],\n                                target: \"#asr.Ready\",\n                            },\n                        ],\n                        onError: {\n                            actions: [\n                                ({ event }) => console.error(\"[ASR]\", event.error),\n                                (0, xstate_1.sendParent)(({ context }) => ({\n                                    type: \"RECOGNISED\",\n                                    value: context.result,\n                                })),\n                            ],\n                            target: \"#asr.Ready\",\n                        },\n                    },\n                },\n            },\n        },\n        Paused: {\n            entry: (0, xstate_1.sendParent)({ type: \"ASR_PAUSED\" }),\n            on: {\n                CONTROL: {\n                    target: \"Recognising\",\n                    //       ///// todo? reset noInputTimeout\n                    //       // actions: assign({\n                    //       //   params: {\n                    //       //     noInputTimeout: ({ context }) =>\n                    //       //       context.asrDefaultNoInputTimeout,\n                    //       //     completeTimeout: 0,\n                    //       //     locale: \"0\",\n                    //       //     hints: [\"\"],\n                    //       //   },\n                    //       // }),} },\n                },\n            },\n        },\n        GetToken: {\n            invoke: {\n                id: \"getAuthorizationToken\",\n                input: ({ context }) => ({\n                    credentials: context.azureCredentials,\n                }),\n                src: \"getToken\",\n                onDone: {\n                    target: \"Ponyfill\",\n                    actions: [\n                        (0, xstate_1.assign)(({ event }) => {\n                            return { azureAuthorizationToken: event.output };\n                        }),\n                    ],\n                },\n                onError: {\n                    actions: ({ event }) => console.error(\"[ASR]\", event.error),\n                    target: \"Fail\",\n                },\n            },\n        },\n        Ponyfill: {\n            invoke: {\n                id: \"ponyASR\",\n                src: \"ponyfill\",\n                input: ({ context }) => ({\n                    azureRegion: context.azureRegion,\n                    audioContext: context.audioContext,\n                    azureAuthorizationToken: context.azureAuthorizationToken,\n                    locale: context.locale,\n                    speechRecognitionEndpointId: context.speechRecognitionEndpointId,\n                }),\n            },\n        },\n    },\n});\n", "\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.speechstate = void 0;\nconst xstate_1 = require(\"xstate\");\nconst tts_1 = require(\"./tts\");\nconst asr_1 = require(\"./asr\");\nconst speechstate = (0, xstate_1.setup)({\n    types: {},\n    actors: {\n        audioContext: (0, xstate_1.fromPromise)(() => __awaiter(void 0, void 0, void 0, function* () {\n            const audioContext = new AudioContext();\n            navigator.mediaDevices\n                .getUserMedia({ audio: true })\n                .then(function (stream) {\n                audioContext.createMediaStreamSource(stream);\n            });\n            return audioContext;\n        })),\n        tts: tts_1.ttsMachine,\n        asr: asr_1.asrMachine,\n    },\n    actions: {\n        spawnTTS: (0, xstate_1.assign)({\n            ttsRef: ({ context, spawn }) => {\n                return spawn(\"tts\", {\n                    id: \"ttsRef\",\n                    input: {\n                        ttsDefaultVoice: context.settings.ttsDefaultVoice,\n                        ttsLexicon: context.settings.ttsLexicon,\n                        audioContext: context.audioContext,\n                        azureCredentials: context.settings.azureCredentials,\n                        azureRegion: context.settings.azureRegion,\n                    },\n                });\n            },\n        }),\n        spawnASR: (0, xstate_1.assign)({\n            asrRef: ({ context, spawn }) => {\n                return spawn(\"asr\", {\n                    id: \"asrRef\",\n                    input: {\n                        asrDefaultCompleteTimeout: context.settings.asrDefaultCompleteTimeout,\n                        asrDefaultNoInputTimeout: context.settings.asrDefaultNoInputTimeout,\n                        locale: context.settings.locale,\n                        audioContext: context.audioContext,\n                        azureCredentials: context.settings.azureCredentials,\n                        azureRegion: context.settings.azureRegion,\n                        azureLanguageCredentials: context.settings.azureLanguageCredentials,\n                        speechRecognitionEndpointId: context.settings.speechRecognitionEndpointId,\n                    },\n                });\n            },\n        }),\n    },\n}).createMachine({\n    context: ({ input }) => ({\n        settings: input,\n    }),\n    id: \"speechstate\",\n    initial: \"Active\",\n    states: {\n        Stopped: {\n            meta: { view: \"stopped\" },\n            entry: [\n                (0, xstate_1.stopChild)(\"ttsRef\"),\n                (0, xstate_1.stopChild)(\"asrRef\"),\n                (0, xstate_1.assign)({\n                    audioContext: undefined,\n                    ttsRef: undefined,\n                    asrRef: undefined,\n                }),\n                () => console.debug(\"[SpSt] destroyed ASR and TTS\"),\n            ],\n        },\n        Active: {\n            type: \"parallel\",\n            states: {\n                AsrTtsSpawner: {\n                    initial: \"Idle\",\n                    states: {\n                        Idle: { on: { PREPARE: \"CreateAudioContext\" } },\n                        CreateAudioContext: {\n                            invoke: {\n                                id: \"createAudioContext\",\n                                src: \"audioContext\",\n                                onDone: {\n                                    target: \"Spawn\",\n                                    actions: (0, xstate_1.assign)(({ event }) => {\n                                        return {\n                                            audioContext: event.output,\n                                        };\n                                    }),\n                                },\n                            },\n                        },\n                        Spawn: {\n                            entry: [{ type: \"spawnTTS\" }, { type: \"spawnASR\" }],\n                            after: {\n                                300000: {\n                                    target: \"Spawn\",\n                                    reenter: true,\n                                    actions: [\n                                        ({}) => console.debug(\"[SpSt] respawning ASR and TTS\"),\n                                        (0, xstate_1.stopChild)(\"ttsRef\"),\n                                        (0, xstate_1.stopChild)(\"asrRef\"),\n                                        (0, xstate_1.assign)({\n                                            audioContext: undefined,\n                                            ttsRef: undefined,\n                                            asrRef: undefined,\n                                        }),\n                                    ],\n                                },\n                            },\n                        },\n                    },\n                },\n                AsrTtsManager: {\n                    initial: \"Initialize\",\n                    on: {\n                        TTS_READY: {\n                            actions: () => console.debug(\"[TTS→SpSt] TTS_READY\"),\n                            target: \".PreReady\",\n                        },\n                        ASR_READY: {\n                            actions: () => console.debug(\"[ASR→SpSt] ASR_READY\"),\n                            target: \".PreReady\",\n                        },\n                        // ASR_ERROR not implemented\n                        TTS_ERROR: {\n                            actions: () => console.error(\"[TTS→SpSt] TTS_ERROR\"),\n                            target: \".Fail\",\n                        },\n                        ASR_NOINPUT: {\n                            actions: [\n                                () => console.debug(\"[ASR→SpSt] NOINPUT\"),\n                                (0, xstate_1.sendParent)({ type: \"ASR_NOINPUT\" }),\n                            ],\n                            target: \".Ready\",\n                        },\n                        STOP: \"#speechstate.Stopped\",\n                    },\n                    states: {\n                        Initialize: {\n                            meta: { view: \"not-ready\" },\n                        },\n                        PreReady: {\n                            meta: { view: \"not-ready\" },\n                            on: {\n                                TTS_READY: {\n                                    actions: () => console.debug(\"[TTS→SpSt] TTS_READY\"),\n                                    target: \"Ready\",\n                                },\n                                ASR_READY: {\n                                    actions: () => console.debug(\"[ASR→SpSt] ASR_READY\"),\n                                    target: \"Ready\",\n                                },\n                            },\n                        },\n                        Ready: {\n                            initial: \"Idle\",\n                            entry: [\n                                () => console.debug(\"[SpSt] All ready\"),\n                                (0, xstate_1.sendParent)({ type: \"ASRTTS_READY\" }),\n                            ],\n                            states: {\n                                Idle: {\n                                    meta: { view: \"idle\" },\n                                    on: {\n                                        LISTEN: { target: \"WaitForRecogniser\" },\n                                        SPEAK: [\n                                            {\n                                                target: \"Speaking\",\n                                            },\n                                        ],\n                                    },\n                                },\n                                Speaking: {\n                                    initial: \"Proceed\",\n                                    entry: [\n                                        ({ event }) => console.debug(\"[SpSt→TTS] SPEAK\", event.value),\n                                        ({ context, event }) => context.ttsRef.send({\n                                            type: \"SPEAK\",\n                                            value: event.value,\n                                        }),\n                                    ],\n                                    on: {\n                                        STOP: {\n                                            target: \"#speechstate.Stopped\",\n                                            actions: [\n                                                ({}) => console.debug(\"[SpSt→TTS] STOP\"),\n                                                ({ context }) => context.ttsRef.send({\n                                                    type: \"STOP\",\n                                                }),\n                                            ],\n                                        },\n                                        TTS_STARTED: {\n                                            actions: [\n                                                () => console.debug(\"[TTS→SpSt] TTS_STARTED\"),\n                                                (0, xstate_1.sendParent)({ type: \"TTS_STARTED\" }),\n                                            ],\n                                        },\n                                        SPEAK_COMPLETE: {\n                                            target: \"Idle\",\n                                            actions: [\n                                                () => console.debug(\"[TTS→SpSt] SPEAK_COMPLETE\"),\n                                                (0, xstate_1.sendParent)({ type: \"SPEAK_COMPLETE\" }),\n                                            ],\n                                        },\n                                        STREAMING_SET_PERSONA: {\n                                            actions: [\n                                                () => console.debug(\"[TTS→SpSt] STREAMING_SET_PERSONA\"),\n                                                (0, xstate_1.sendParent)(({ event }) => ({\n                                                    type: \"STREAMING_SET_PERSONA\",\n                                                    value: event.value,\n                                                })),\n                                            ],\n                                        },\n                                    },\n                                    states: {\n                                        Proceed: {\n                                            meta: { view: \"speaking\" },\n                                            on: {\n                                                CONTROL: {\n                                                    target: \"Paused\",\n                                                    actions: [\n                                                        () => console.debug(\"[SpSt→TTS] CONTROL\"),\n                                                        ({ context }) => context.ttsRef.send({\n                                                            type: \"CONTROL\",\n                                                        }),\n                                                    ],\n                                                },\n                                            },\n                                        },\n                                        Paused: {\n                                            meta: { view: \"speaking-paused\" },\n                                            on: {\n                                                CONTROL: {\n                                                    target: \"Proceed\",\n                                                    actions: [\n                                                        () => console.debug(\"[SpSt→TTS] CONTROL\"),\n                                                        ({ context }) => context.ttsRef.send({\n                                                            type: \"CONTROL\",\n                                                        }),\n                                                    ],\n                                                },\n                                            },\n                                        },\n                                    },\n                                },\n                                WaitForRecogniser: {\n                                    meta: { view: \"idle\" },\n                                    entry: [\n                                        ({ event }) => console.debug(\"[SpSt→ASR] START\", event.value),\n                                        ({ context, event }) => context.asrRef.send({\n                                            type: \"START\",\n                                            value: event.value,\n                                        }),\n                                    ],\n                                    on: {\n                                        ASR_STARTED: {\n                                            target: \"Recognising\",\n                                            actions: [\n                                                () => console.debug(\"[ASR→SpSt] ASR_STARTED\"),\n                                                (0, xstate_1.sendParent)({ type: \"ASR_STARTED\" }),\n                                            ],\n                                        },\n                                    },\n                                },\n                                Recognising: {\n                                    initial: \"Proceed\",\n                                    on: {\n                                        STOP: {\n                                            target: \"#speechstate.Stopped\",\n                                            actions: [\n                                                () => console.debug(\"[SpSt→ASR] STOP\"),\n                                                ({ context }) => context.asrRef.send({\n                                                    type: \"STOP\",\n                                                }),\n                                            ],\n                                        },\n                                        RECOGNISED: {\n                                            actions: [\n                                                ({ event }) => console.debug(\"[ASR→SpSt] RECOGNISED\", event.value, event.nluValue),\n                                                (0, xstate_1.sendParent)(({ event }) => ({\n                                                    type: \"RECOGNISED\",\n                                                    value: event.value,\n                                                    nluValue: event.nluValue,\n                                                })),\n                                            ],\n                                            target: \"Idle\",\n                                        },\n                                    },\n                                    states: {\n                                        Proceed: {\n                                            meta: { view: \"recognising\" },\n                                            on: {\n                                                CONTROL: {\n                                                    target: \"Paused\",\n                                                    actions: [\n                                                        () => console.debug(\"[SpSt→ASR] CONTROL\"),\n                                                        ({ context }) => context.asrRef.send({\n                                                            type: \"CONTROL\",\n                                                        }),\n                                                    ],\n                                                },\n                                            },\n                                        },\n                                        Paused: {\n                                            meta: { view: \"recognising-paused\" },\n                                            on: {\n                                                CONTROL: {\n                                                    target: \"Proceed\",\n                                                    actions: [\n                                                        () => console.debug(\"[SpSt→ASR] CONTROL\"),\n                                                        ({ context }) => context.asrRef.send({\n                                                            type: \"CONTROL\",\n                                                        }),\n                                                    ],\n                                                },\n                                            },\n                                        },\n                                    },\n                                },\n                            },\n                        },\n                        Fail: { meta: { view: \"error\" } },\n                        Stopped: { meta: { view: \"stopped\" } },\n                    },\n                },\n            },\n        },\n    },\n});\nexports.speechstate = speechstate;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.speechstate = void 0;\nvar speechstate_1 = require(\"./speechstate\");\nObject.defineProperty(exports, \"speechstate\", { enumerable: true, get: function () { return speechstate_1.speechstate; } });\n"],
  "mappings": "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CA,KAAK;UACb,KAAK;AACD,mBAAO,IAAI,uBACP,uBAAA,eAAe,KACf,GACA,MACA,MAAM,GACN,GACA,IACA,mCACA,mCACA,KAAK;UACb,KAAK;AACD,mBAAO,IAAI,uBACP,uBAAA,eAAe,KACf,GACA,MACA,MAAM,GACN,GACA,IACA,mCACA,mCACA,KAAK;UACb,KAAK;AACD,mBAAO,IAAI,uBACP,uBAAA,eAAe,KACf,GACA,MACA,OAAO,GACP,GACA,IACA,mCACA,mCACA,KAAK;UACb,KAAK;AACD,mBAAO,IAAI,uBACP,uBAAA,eAAe,WACf,GACA,MACA,MACA,GACA,IACA,mCACA,mCACA,KAAK;UAEb,KAAK;AACD,mBAAO,IAAI,uBACP,uBAAA,eAAe,KACf,GACA,KACA,MACA,GACA,IACA,mCACA,2BACA,IAAI;UACZ,KAAK;AACD,mBAAO,IAAI,uBACP,uBAAA,eAAe,KACf,GACA,MACA,MACA,GACA,IACA,mCACA,4BACA,IAAI;UACZ,KAAK;AACD,mBAAO,IAAI,uBACP,uBAAA,eAAe,OACf,GACA,KACA,KACA,GACA,GACA,mCACA,4BACA,IAAI;UACZ,KAAK;AACD,mBAAO,IAAI,uBACP,uBAAA,eAAe,KACf,GACA,MACA,MACA,GACA,IACA,mCACA,4BACA,KAAK;UACb,KAAK;AACD,mBAAO,IAAI,uBACP,uBAAA,eAAe,KACf,GACA,MACA,MACA,GACA,IACA,mCACA,4BACA,KAAK;UACb,KAAK;AACD,mBAAO,IAAI,uBACP,uBAAA,eAAe,KACf,GACA,KACA,MACA,GACA,IACA,mCACA,2BACA,KAAK;UACb,KAAK;AACD,mBAAO,IAAI,uBACP,uBAAA,eAAe,UACf,GACA,MACA,MACA,GACA,IACA,mCACA,mCACA,KAAK;UACb,KAAK;AACD,mBAAO,IAAI,uBACP,uBAAA,eAAe,UACf,GACA,MACA,MACA,GACA,IACA,mCACA,mCACA,KAAK;UACb,KAAK;AACD,mBAAO,IAAI,uBACP,uBAAA,eAAe,KACf,GACA,MACA,MACA,GACA,IACA,mCACA,4BACA,KAAK;UACb,KAAK;AACD,mBAAO,IAAI,uBACP,uBAAA,eAAe,KACf,GACA,MACA,MACA,GACA,IACA,mCACA,4BACA,IAAI;UACZ,KAAK;AACD,mBAAO,IAAI,uBACP,uBAAA,eAAe,KACf,GACA,MACA,MAAM,GACN,GACA,IACA,mCACA,mCACA,KAAK;UACb,KAAK;AACD,mBAAO,IAAI,uBACP,uBAAA,eAAe,KACf,GACA,MACA,OAAO,GACP,GACA,IACA,mCACA,mCACA,KAAK;UACb,KAAK;AACD,mBAAO,IAAI,uBACP,uBAAA,eAAe,UACf,GACA,MACA,MACA,GACA,IACA,mCACA,mCACA,KAAK;UACb,KAAK;AACD,mBAAO,IAAI,uBACP,uBAAA,eAAe,WACf,GACA,MACA,KACA,GACA,IACA,mCACA,mCACA,KAAK;UACb,KAAK;AACD,mBAAO,IAAI,uBACP,uBAAA,eAAe,WACf,GACA,MACA,KACA,GACA,IACA,mCACA,mCACA,KAAK;UACb,KAAK;AACD,mBAAO,IAAI,uBACP,uBAAA,eAAe,WACf,GACA,MACA,KACA,GACA,IACA,mCACA,mCACA,KAAK;UACb,KAAK;AACD,mBAAO,IAAI,uBACP,uBAAA,eAAe,MACf,GACA,MACA,KACA,GACA,IACA,mCACA,mCACA,KAAK;UACb,KAAK;AACD,mBAAO,IAAI,uBACP,uBAAA,eAAe,MACf,GACA,MACA,KACA,GACA,IACA,mCACA,mCACA,KAAK;UACb,KAAK;AACD,mBAAO,IAAI,uBACP,uBAAA,eAAe,MACf,GACA,MACA,KACA,GACA,IACA,mCACA,mCACA,KAAK;UACb,KAAK;AACD,mBAAO,IAAI,uBACP,uBAAA,eAAe,MACf,GACA,MACA,MACA,GACA,IACA,mCACA,mCACA,KAAK;UACb,KAAK;AACD,mBAAO,IAAI,uBACP,uBAAA,eAAe,MACf,GACA,MACA,KACA,GACA,IACA,mCACA,mCACA,KAAK;UACb,KAAK;AACD,mBAAO,IAAI,uBACP,uBAAA,eAAe,WACf,GACA,MACA,MACA,GACA,IACA,mCACA,mCACA,KAAK;UACb,KAAK;AACD,mBAAO,IAAI,u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",
  "names": ["obj", "_regeneratorRuntime", "exports", "define", "self", "innerFn", "context", "value", "next", "key", "self", "_setPrototypeOf", "o", "p", "self", "self", "_getPrototypeOf", "o", "set", "target", "property", "value", "receiver", "_get", "_construct", "Parent", "args", "Class", "_wrapNativeSuper", "Class", "keys", "i", "Warning", "Event", "DOMException", "_loop", "_i", "EventWrapper", "CustomEventWrapper", "EventTarget", "dispatchEvent", "CustomEventTarget", "require_interopRequireDefault", "globalThis", "globalThis", "navigator", "globalThis", "process", "Deno", "globalThis", "globalThis", "globalThis", "globalThis", "Symbol", "globalThis", "document", "globalThis", "activeXDocument", "globalThis", "WeakMap", "globalThis", "TypeError", "WeakMap", "globalThis", "globalThis", "process", "Function", "String", "globalThis", "globalThis", "document", "process", "Promise", "globalThis", "globalThis", "globalThis", "TypeError", "document", "process", "dispatchEvent", "Promise", "globalThis", "require_promise", "require_promise", "require_lib", "isEqual", "_default", "audioContext", "suspend", "playingUtterance", "dispatchEvent", "CustomEvent", "resume", "queue", "utterance", "shift", "play", "stop", "state", "_default", "audioContext", "ponyfill", "consumer", "paused", "queue", "getAudioContext", "memoize", "AudioContext", "pause", "utterance", "push", "startConsumer", "resume", "length", "AudioContextConsumer", "start", "splice", "stop", "_default", "gender", "lang", "voiceURI", "_gender", "_lang", "_localService", "_name", "_voiceURI", "fetchCustomVoices", "customVoiceHostname", "deploymentId", "region", "subscriptionKey", "hostname", "fetch", "encodeURI", "encodeURIComponent", "headers", "accept", "res", "ok", "Error", "json", "models", "map", "gender", "properties", "Gender", "lang", "locale", "voiceURI", "name", "SpeechSynthesisVoice", "sort", "x", "y", "fetchVoices", "authorizationToken", "region", "speechSynthesisHostname", "subscriptionKey", "hostname", "encodeURI", "fetch", "headers", "authorization", "res", "ok", "Error", "json", "voices", "map", "gender", "Gender", "lang", "Locale", "voiceURI", "Name", "SpeechSynthesisVoice", "sort", "x", "name", "y", "resolveFunctionOrReturnValue", "fnOrValue", "shouldWarnOnSubscriptionKey", "patchOptions", "authorizationToken", "credentials", "looseEvent", "looseEvents", "region", "subscriptionKey", "otherOptions", "console", "warn", "Error", "resolveFunctionOrReturnValue", "fetchCredentials", "customVoiceHostname", "speechRecognitionHostname", "speechSynthesisHostname", "resolvedCredentials", "SpeechSynthesisEvent", "type", "Event", "module", "exports", "ret", "promise", "Promise", "resolve", "reject", "EventAsPromise", "options", "defers", "upcomingDeferred", "eventListener", "bind", "one", "upcoming", "Symbol", "iterator", "next", "done", "value", "event", "deferred", "shift", "args", "array", "slice", "call", "arguments", "resolve", "push", "promise", "relativePercentage", "value", "relative", "Math", "round", "buildSSML", "lang", "pitch", "rate", "text", "voice", "volume", "SPEAK_TAG_PATTERN", "XML_PROLOG_PATTERN", "isSSML", "text", "test", "DEFAULT_LANGUAGE", "DEFAULT_OUTPUT_FORMAT", "DEFAULT_VOICE", "EMPTY_MP3_BASE64", "deploymentId", "fetchCredentials", "lang", "outputFormat", "pitch", "rate", "text", "voice", "volume", "decode", "authorizationToken", "region", "speechSynthesisHostname", "subscriptionKey", "Error", "ssml", "isSSML", "buildSSML", "hostname", "encodeURI", "search", "url", "fetch", "headers", "Authorization", "method", "body", "res", "ok", "status", "arrayBuffer", "subscribeEvent", "target", "name", "handler", "addEventListener", "removeEventListener", "asyncDecodeAudioData", "audioContext", "arrayBuffer", "Promise", "resolve", "reject", "promise", "decodeAudioData", "then", "playDecoded", "audioBuffer", "source", "audioContextClosed", "EventAsPromise", "sourceEnded", "unsubscribe", "subscribeEvent", "state", "target", "eventListener", "buffer", "onended", "connect", "destination", "start", "race", "upcoming", "err", "SpeechSynthesisUtterance", "text", "_lang", "_pitch", "_rate", "_voice", "_volume", "onboundary", "onend", "onerror", "onmark", "onpause", "onresume", "onstart", "value", "getEventAttributeValue", "setEventAttributeValue", "deploymentId", "fetchCredentials", "outputFormat", "arrayBufferPromise", "fetchSpeechData", "lang", "window", "navigator", "language", "pitch", "rate", "voice", "voiceURI", "volume", "catch", "dispatchEvent", "SpeechSynthesisEvent", "createBufferSource", "_playingSource", "ErrorEvent", "error", "message", "stack", "stop", "EventTarget", "DEFAULT_OUTPUT_FORMAT", "EMPTY_ARRAY", "_default", "options", "patchOptions", "audioContext", "fetchCredentials", "ponyfill", "AudioContext", "window", "webkitAudioContext", "speechSynthesisDeploymentId", "speechSynthesisOutputFormat", "console", "warn", "SpeechSynthesis", "queue", "AudioContextQueue", "updateVoices", "stop", "getEventAttributeValue", "value", "setEventAttributeValue", "pause", "resume", "utterance", "SpeechSynthesisUtterance", "Error", "createDeferred", "reject", "resolve", "promise", "handleError", "errorCode", "error", "message", "stack", "addEventListener", "preload", "deploymentId", "outputFormat", "push", "finally", "removeEventListener", "speaking", "customVoiceHostname", "region", "speechSynthesisHostname", "subscriptionKey", "onErrorResumeNext", "fetchCustomVoices", "voices", "getVoices", "fetchVoices", "dispatchEvent", "SpeechSynthesisEvent", "EventTarget", "speechSynthesis", "createSpeechSynthesisPonyfill", "ponyfill", "array", "extras", "map", "reduce", "call", "value", "index", "length", "Symbol", "iterator", "slice", "EventType", "MessageType", "EventSource", "ConnectionState", "PromiseState", "error", "SubscriberType", "TranslationStatus", "clearTimeout", "setTimeout", "AudioFormatTag", "AudioContext", "header", "SpeechSynthesisOutputFormat", "CancellationReason", "OutputFormat", "ResultReason", "PropertyId", "VoiceProfileType", "NoMatchReason", "CancellationErrorCode", "ServicePropertyChannel", "ProfanityOption", "LanguageIdMode", "SpeakerRecognitionResultType", "e", "SpeechState", "ParticipantChangedReason", "e", "e", "SpeechSynthesisBoundaryType", "SynthesisVoiceGender", "SynthesisVoiceType", "PronunciationAssessmentGradingSystem", "PronunciationAssessmentGranularity", "AvatarEventTypes", "RestRequestType", "RecognitionCompletionStatus", "RecognitionMode", "SpeechResultFormat", "SynthesisStatus", "RecognitionStatus", "MessageDataStreamType", "cb", "err", "MetadataType", "SynthesisServiceType", "error", "enrollmentResponse", "connectivity", "type", "AudioConfig", "OutputFormat", "ResultReason", "SpeechConfig", "SpeechRecognizer", "SpeechSDK", "ResultReason", "RecognizingSpeech", "RecognizedSpeech", "result", "maxAlternatives", "Infinity", "textNormalization", "reason", "json", "NBest", "resultList", "confidence", "transcript", "text", "isFinal", "arrayToMap", "slice", "map", "Confidence", "display", "Display", "itn", "ITN", "lexical", "Lexical", "maskedITN", "MaskedITN", "shiftDeferred", "queue", "push", "value", "resolve", "shift", "length", "Promise", "createDeferred", "promise", "_default", "_phrases", "Error", "value", "Array", "isArray", "AudioConfig", "SpeechSDK", "OutputFormat", "ResultReason", "SpeechConfig", "SpeechRecognizer", "serializeRecognitionResult", "duration", "errorDetails", "json", "offset", "properties", "reason", "resultId", "text", "JSON", "parse", "averageAmplitude", "arrayBuffer", "array", "Int16Array", "reduce", "call", "amplitude", "Math", "abs", "length", "cognitiveServicesAsyncToPromise", "fn", "args", "Promise", "resolve", "reject", "SpeechRecognitionEvent", "type", "data", "emma", "interpretation", "resultIndex", "results", "Event", "prepareAudioConfig", "audioConfig", "originalAttach", "attach", "boundOriginalAttach", "bind", "firstChunk", "muted", "reader", "read", "chunk", "buffer", "events", "onEvent", "name", "ArrayBuffer", "isEnd", "timeReceived", "Date", "now", "pause", "unprepare", "createSpeechRecognitionPonyfillFromRecognizer", "createRecognizer", "enableTelemetry", "looseEvents", "referenceGrammars", "textNormalization", "SpeechRecognition", "_continuous", "_interimResults", "_lang", "window", "document", "documentElement", "getAttribute", "navigator", "language", "_grammars", "SpeechGrammarList", "_maxAlternatives", "event", "dispatchEvent", "value", "Error", "getEventAttributeValue", "setEventAttributeValue", "_startOnce", "catch", "err", "ErrorEvent", "error", "message", "stack", "lang", "recognizer", "queue", "createPromiseQueue", "push", "audioSourceReady", "audioSourceOff", "firstAudibleChunk", "detachAudioConfigEvent", "detach", "canceled", "_", "sessionId", "recognized", "result", "recognizing", "sessionStarted", "sessionStopped", "speechStartDetected", "speechEndDetected", "phrases", "grammars", "dynamicGrammar", "privReco", "addReferenceGrammar", "addPhrase", "startContinuousRecognitionAsync", "stopContinuousRecognitionAsync", "abort", "stop", "undefined", "finalizedResults", "_loop", "loop", "shift", "Object", "keys", "forEach", "emitCognitiveServices", "errorMessage", "test", "finalEvent", "audioStarted", "stopping", "soundStarted", "speechStarted", "NoMatch", "cognitiveServiceEventResultToWebSpeechRecognitionResultList", "maxAlternatives", "recognizable", "transcript", "continuous", "interimResults", "console", "dispose", "EventTarget", "_default", "options", "patchOptions", "fromDefaultMicrophoneInput", "fetchCredentials", "speechRecognitionEndpointId", "mediaDevices", "getUserMedia", "warn", "authorizationToken", "region", "speechRecognitionHostname", "subscriptionKey", "host", "hostname", "port", "protocol", "speechConfig", "fromHost", "fromAuthorizationToken", "fromSubscription", "endpointId", "outputFormat", "Detailed", "speechRecognitionLanguage", "createSpeechRecognitionPonyfill"]
}
